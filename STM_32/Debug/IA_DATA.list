
IA_DATA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b2e4  08006e80  08006e80  00007e80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012164  08012164  0001497c  2**0
                  CONTENTS
  4 .ARM          00000008  08012164  08012164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801216c  0801216c  0001497c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801216c  0801216c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012170  08012170  00013170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000097c  20000000  08012174  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000980  08012af0  00014980  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20040000  20040000  00015000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001497c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f994  00000000  00000000  000149ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002460  00000000  00000000  00024340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  000267a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000086a  00000000  00000000  000272c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031edc  00000000  00000000  00027b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec85  00000000  00000000  00059a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a783  00000000  00000000  0006868b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00192e0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003540  00000000  00000000  00192e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001963d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000980 	.word	0x20000980
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006e58 	.word	0x08006e58

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000984 	.word	0x20000984
 80001fc:	08006e58 	.word	0x08006e58

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 f9e7 	bl	8000966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f809 	bl	80005ae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f8a4 	bl	80006e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 f856 	bl	8000650 <MX_USART2_UART_Init>
  MX_X_CUBE_AI_Init();
 80005a4:	f003 fb7a 	bl	8003c9c <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 80005a8:	f003 fb86 	bl	8003cb8 <MX_X_CUBE_AI_Process>
 80005ac:	e7fc      	b.n	80005a8 <main+0x18>

080005ae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b096      	sub	sp, #88	@ 0x58
 80005b2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2244      	movs	r2, #68	@ 0x44
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f005 fd39 	bl	8006034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fcd5 	bl	8000f80 <HAL_PWREx_ControlVoltageScaling>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005dc:	f000 f89c 	bl	8000718 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ea:	2340      	movs	r3, #64	@ 0x40
 80005ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f2:	2302      	movs	r3, #2
 80005f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005fa:	231e      	movs	r3, #30
 80005fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000606:	2302      	movs	r3, #2
 8000608:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fd5a 	bl	80010c8 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x70>
  {
    Error_Handler();
 800061a:	f000 f87d 	bl	8000718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2303      	movs	r3, #3
 8000624:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800062e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000634:	463b      	mov	r3, r7
 8000636:	2105      	movs	r1, #5
 8000638:	4618      	mov	r0, r3
 800063a:	f001 f95f 	bl	80018fc <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000644:	f000 f868 	bl	8000718 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3758      	adds	r7, #88	@ 0x58
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 8000656:	4a23      	ldr	r2, [pc, #140]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 8000658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065a:	4b21      	ldr	r3, [pc, #132]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066e:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000686:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800068c:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 800068e:	2200      	movs	r2, #0
 8000690:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 8000694:	2200      	movs	r2, #0
 8000696:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000698:	4811      	ldr	r0, [pc, #68]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 800069a:	f002 f965 	bl	8002968 <HAL_UART_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006a4:	f000 f838 	bl	8000718 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a8:	2100      	movs	r1, #0
 80006aa:	480d      	ldr	r0, [pc, #52]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 80006ac:	f003 f858 	bl	8003760 <HAL_UARTEx_SetTxFifoThreshold>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006b6:	f000 f82f 	bl	8000718 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ba:	2100      	movs	r1, #0
 80006bc:	4808      	ldr	r0, [pc, #32]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 80006be:	f003 f88d 	bl	80037dc <HAL_UARTEx_SetRxFifoThreshold>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006c8:	f000 f826 	bl	8000718 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <MX_USART2_UART_Init+0x90>)
 80006ce:	f003 f80e 	bl	80036ee <HAL_UARTEx_DisableFifoMode>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006d8:	f000 f81e 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000099c 	.word	0x2000099c
 80006e4:	40004400 	.word	0x40004400

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_GPIO_Init+0x2c>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	4a08      	ldr	r2, [pc, #32]	@ (8000714 <MX_GPIO_Init+0x2c>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_GPIO_Init+0x2c>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071c:	b672      	cpsid	i
}
 800071e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <Error_Handler+0x8>

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <HAL_MspInit+0x44>)
 800072c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800072e:	4a0e      	ldr	r2, [pc, #56]	@ (8000768 <HAL_MspInit+0x44>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6613      	str	r3, [r2, #96]	@ 0x60
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <HAL_MspInit+0x44>)
 8000738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <HAL_MspInit+0x44>)
 8000744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000746:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <HAL_MspInit+0x44>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074c:	6593      	str	r3, [r2, #88]	@ 0x58
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <HAL_MspInit+0x44>)
 8000750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b0b0      	sub	sp, #192	@ 0xc0
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	229c      	movs	r2, #156	@ 0x9c
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f005 fc51 	bl	8006034 <memset>
  if(huart->Instance==USART2)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a21      	ldr	r2, [pc, #132]	@ (800081c <HAL_UART_MspInit+0xb0>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d13b      	bne.n	8000814 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800079c:	2302      	movs	r3, #2
 800079e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fb65 	bl	8001e78 <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007b4:	f7ff ffb0 	bl	8000718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b8:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <HAL_UART_MspInit+0xb4>)
 80007ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007bc:	4a18      	ldr	r2, [pc, #96]	@ (8000820 <HAL_UART_MspInit+0xb4>)
 80007be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80007c4:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <HAL_UART_MspInit+0xb4>)
 80007c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <HAL_UART_MspInit+0xb4>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d4:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <HAL_UART_MspInit+0xb4>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007dc:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <HAL_UART_MspInit+0xb4>)
 80007de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART_RX_Pin|USART_TX_Pin;
 80007e8:	230c      	movs	r3, #12
 80007ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000800:	2307      	movs	r3, #7
 8000802:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800080a:	4619      	mov	r1, r3
 800080c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000810:	f000 fa04 	bl	8000c1c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000814:	bf00      	nop
 8000816:	37c0      	adds	r7, #192	@ 0xc0
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40004400 	.word	0x40004400
 8000820:	40021000 	.word	0x40021000

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <NMI_Handler+0x4>

0800082c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <MemManage_Handler+0x4>

0800083c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <UsageFault_Handler+0x4>

0800084c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087a:	f000 f8c9 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800088c:	4a14      	ldr	r2, [pc, #80]	@ (80008e0 <_sbrk+0x5c>)
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <_sbrk+0x60>)
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000898:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <_sbrk+0x64>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <_sbrk+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d207      	bcs.n	80008c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b4:	f005 fbd6 	bl	8006064 <__errno>
 80008b8:	4603      	mov	r3, r0
 80008ba:	220c      	movs	r2, #12
 80008bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008c2:	e009      	b.n	80008d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ca:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a05      	ldr	r2, [pc, #20]	@ (80008e8 <_sbrk+0x64>)
 80008d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200a0000 	.word	0x200a0000
 80008e4:	00000800 	.word	0x00000800
 80008e8:	20000a30 	.word	0x20000a30
 80008ec:	20040000 	.word	0x20040000

080008f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	@ (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800094c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000918:	f7ff ffea 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <LoopForever+0x6>)
  ldr r1, =_edata
 800091e:	490d      	ldr	r1, [pc, #52]	@ (8000954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000920:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <LoopForever+0xe>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000934:	4c0a      	ldr	r4, [pc, #40]	@ (8000960 <LoopForever+0x16>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000942:	f005 fb95 	bl	8006070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000946:	f7ff fe23 	bl	8000590 <main>

0800094a <LoopForever>:

LoopForever:
    b LoopForever
 800094a:	e7fe      	b.n	800094a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800094c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	2000097c 	.word	0x2000097c
  ldr r2, =_sidata
 8000958:	08012174 	.word	0x08012174
  ldr r2, =_sbss
 800095c:	20000980 	.word	0x20000980
  ldr r4, =_ebss
 8000960:	20000f38 	.word	0x20000f38

08000964 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_IRQHandler>

08000966 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 f91f 	bl	8000bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000976:	200f      	movs	r0, #15
 8000978:	f000 f80e 	bl	8000998 <HAL_InitTick>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	e001      	b.n	800098c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000988:	f7ff fecc 	bl	8000724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800098c:	79fb      	ldrb	r3, [r7, #7]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009a4:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <HAL_InitTick+0x6c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d023      	beq.n	80009f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <HAL_InitTick+0x70>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <HAL_InitTick+0x6c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f91d 	bl	8000c02 <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10f      	bne.n	80009ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d809      	bhi.n	80009e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009dc:	f000 f8f5 	bl	8000bca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <HAL_InitTick+0x74>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e007      	b.n	80009f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
 80009ec:	e004      	b.n	80009f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e001      	b.n	80009f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	@ (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000a34 	.word	0x20000a34

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000a34 	.word	0x20000a34

08000a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a82:	4a04      	ldr	r2, [pc, #16]	@ (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60d3      	str	r3, [r2, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a9c:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	f003 0307 	and.w	r3, r3, #7
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	db0a      	blt.n	8000ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	490c      	ldr	r1, [pc, #48]	@ (8000b00 <__NVIC_SetPriority+0x4c>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	0112      	lsls	r2, r2, #4
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000adc:	e00a      	b.n	8000af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4908      	ldr	r1, [pc, #32]	@ (8000b04 <__NVIC_SetPriority+0x50>)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	3b04      	subs	r3, #4
 8000aec:	0112      	lsls	r2, r2, #4
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	440b      	add	r3, r1
 8000af2:	761a      	strb	r2, [r3, #24]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000e100 	.word	0xe000e100
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b089      	sub	sp, #36	@ 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	f1c3 0307 	rsb	r3, r3, #7
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	bf28      	it	cs
 8000b26:	2304      	movcs	r3, #4
 8000b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d902      	bls.n	8000b38 <NVIC_EncodePriority+0x30>
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3b03      	subs	r3, #3
 8000b36:	e000      	b.n	8000b3a <NVIC_EncodePriority+0x32>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43da      	mvns	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	43d9      	mvns	r1, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	4313      	orrs	r3, r2
         );
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3724      	adds	r7, #36	@ 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b80:	d301      	bcc.n	8000b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00f      	b.n	8000ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <SysTick_Config+0x40>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8e:	210f      	movs	r1, #15
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b94:	f7ff ff8e 	bl	8000ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <SysTick_Config+0x40>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9e:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <SysTick_Config+0x40>)
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	e000e010 	.word	0xe000e010

08000bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff47 	bl	8000a50 <__NVIC_SetPriorityGrouping>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bdc:	f7ff ff5c 	bl	8000a98 <__NVIC_GetPriorityGrouping>
 8000be0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	6978      	ldr	r0, [r7, #20]
 8000be8:	f7ff ff8e 	bl	8000b08 <NVIC_EncodePriority>
 8000bec:	4602      	mov	r2, r0
 8000bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff5d 	bl	8000ab4 <__NVIC_SetPriority>
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff ffb0 	bl	8000b70 <SysTick_Config>
 8000c10:	4603      	mov	r3, r0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2a:	e166      	b.n	8000efa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	2101      	movs	r1, #1
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	fa01 f303 	lsl.w	r3, r1, r3
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 8158 	beq.w	8000ef4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d005      	beq.n	8000c5c <HAL_GPIO_Init+0x40>
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d130      	bne.n	8000cbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c92:	2201      	movs	r2, #1
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	091b      	lsrs	r3, r3, #4
 8000ca8:	f003 0201 	and.w	r2, r3, #1
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	d017      	beq.n	8000cfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d123      	bne.n	8000d4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	08da      	lsrs	r2, r3, #3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3208      	adds	r2, #8
 8000d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	691a      	ldr	r2, [r3, #16]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f003 0307 	and.w	r3, r3, #7
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	08da      	lsrs	r2, r3, #3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3208      	adds	r2, #8
 8000d48:	6939      	ldr	r1, [r7, #16]
 8000d4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0203 	and.w	r2, r3, #3
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 80b2 	beq.w	8000ef4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d90:	4b61      	ldr	r3, [pc, #388]	@ (8000f18 <HAL_GPIO_Init+0x2fc>)
 8000d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d94:	4a60      	ldr	r2, [pc, #384]	@ (8000f18 <HAL_GPIO_Init+0x2fc>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d9c:	4b5e      	ldr	r3, [pc, #376]	@ (8000f18 <HAL_GPIO_Init+0x2fc>)
 8000d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000da8:	4a5c      	ldr	r2, [pc, #368]	@ (8000f1c <HAL_GPIO_Init+0x300>)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	089b      	lsrs	r3, r3, #2
 8000dae:	3302      	adds	r3, #2
 8000db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000dd2:	d02b      	beq.n	8000e2c <HAL_GPIO_Init+0x210>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a52      	ldr	r2, [pc, #328]	@ (8000f20 <HAL_GPIO_Init+0x304>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d025      	beq.n	8000e28 <HAL_GPIO_Init+0x20c>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a51      	ldr	r2, [pc, #324]	@ (8000f24 <HAL_GPIO_Init+0x308>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d01f      	beq.n	8000e24 <HAL_GPIO_Init+0x208>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a50      	ldr	r2, [pc, #320]	@ (8000f28 <HAL_GPIO_Init+0x30c>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d019      	beq.n	8000e20 <HAL_GPIO_Init+0x204>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a4f      	ldr	r2, [pc, #316]	@ (8000f2c <HAL_GPIO_Init+0x310>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d013      	beq.n	8000e1c <HAL_GPIO_Init+0x200>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a4e      	ldr	r2, [pc, #312]	@ (8000f30 <HAL_GPIO_Init+0x314>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d00d      	beq.n	8000e18 <HAL_GPIO_Init+0x1fc>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a4d      	ldr	r2, [pc, #308]	@ (8000f34 <HAL_GPIO_Init+0x318>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d007      	beq.n	8000e14 <HAL_GPIO_Init+0x1f8>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a4c      	ldr	r2, [pc, #304]	@ (8000f38 <HAL_GPIO_Init+0x31c>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d101      	bne.n	8000e10 <HAL_GPIO_Init+0x1f4>
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	e00e      	b.n	8000e2e <HAL_GPIO_Init+0x212>
 8000e10:	2308      	movs	r3, #8
 8000e12:	e00c      	b.n	8000e2e <HAL_GPIO_Init+0x212>
 8000e14:	2306      	movs	r3, #6
 8000e16:	e00a      	b.n	8000e2e <HAL_GPIO_Init+0x212>
 8000e18:	2305      	movs	r3, #5
 8000e1a:	e008      	b.n	8000e2e <HAL_GPIO_Init+0x212>
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	e006      	b.n	8000e2e <HAL_GPIO_Init+0x212>
 8000e20:	2303      	movs	r3, #3
 8000e22:	e004      	b.n	8000e2e <HAL_GPIO_Init+0x212>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e002      	b.n	8000e2e <HAL_GPIO_Init+0x212>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <HAL_GPIO_Init+0x212>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	f002 0203 	and.w	r2, r2, #3
 8000e34:	0092      	lsls	r2, r2, #2
 8000e36:	4093      	lsls	r3, r2
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e3e:	4937      	ldr	r1, [pc, #220]	@ (8000f1c <HAL_GPIO_Init+0x300>)
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f3c <HAL_GPIO_Init+0x320>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e70:	4a32      	ldr	r2, [pc, #200]	@ (8000f3c <HAL_GPIO_Init+0x320>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e76:	4b31      	ldr	r3, [pc, #196]	@ (8000f3c <HAL_GPIO_Init+0x320>)
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e9a:	4a28      	ldr	r2, [pc, #160]	@ (8000f3c <HAL_GPIO_Init+0x320>)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ea0:	4b26      	ldr	r3, [pc, #152]	@ (8000f3c <HAL_GPIO_Init+0x320>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f3c <HAL_GPIO_Init+0x320>)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000eca:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <HAL_GPIO_Init+0x320>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eee:	4a13      	ldr	r2, [pc, #76]	@ (8000f3c <HAL_GPIO_Init+0x320>)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	fa22 f303 	lsr.w	r3, r2, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f47f ae91 	bne.w	8000c2c <HAL_GPIO_Init+0x10>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
 8000f0e:	371c      	adds	r7, #28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010000 	.word	0x40010000
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48000800 	.word	0x48000800
 8000f28:	48000c00 	.word	0x48000c00
 8000f2c:	48001000 	.word	0x48001000
 8000f30:	48001400 	.word	0x48001400
 8000f34:	48001800 	.word	0x48001800
 8000f38:	48001c00 	.word	0x48001c00
 8000f3c:	40010400 	.word	0x40010400

08000f40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f44:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f50:	d102      	bne.n	8000f58 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000f52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f56:	e00b      	b.n	8000f70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f66:	d102      	bne.n	8000f6e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000f68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f6c:	e000      	b.n	8000f70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000f6e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40007000 	.word	0x40007000

08000f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d141      	bne.n	8001012 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f9a:	d131      	bne.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f9c:	4b47      	ldr	r3, [pc, #284]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fa2:	4a46      	ldr	r2, [pc, #280]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	4b43      	ldr	r3, [pc, #268]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fb4:	4a41      	ldr	r2, [pc, #260]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000fbc:	4b40      	ldr	r3, [pc, #256]	@ (80010c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2232      	movs	r2, #50	@ 0x32
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80010c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	0c9b      	lsrs	r3, r3, #18
 8000fce:	3301      	adds	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fd2:	e002      	b.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fda:	4b38      	ldr	r3, [pc, #224]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fe6:	d102      	bne.n	8000fee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f2      	bne.n	8000fd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fee:	4b33      	ldr	r3, [pc, #204]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ffa:	d158      	bne.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e057      	b.n	80010b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001000:	4b2e      	ldr	r3, [pc, #184]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001006:	4a2d      	ldr	r2, [pc, #180]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800100c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001010:	e04d      	b.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001018:	d141      	bne.n	800109e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800101a:	4b28      	ldr	r3, [pc, #160]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001026:	d131      	bne.n	800108c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001028:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800102a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102e:	4a23      	ldr	r2, [pc, #140]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001034:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001038:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001040:	4a1e      	ldr	r2, [pc, #120]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001046:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001048:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2232      	movs	r2, #50	@ 0x32
 800104e:	fb02 f303 	mul.w	r3, r2, r3
 8001052:	4a1c      	ldr	r2, [pc, #112]	@ (80010c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001054:	fba2 2303 	umull	r2, r3, r2, r3
 8001058:	0c9b      	lsrs	r3, r3, #18
 800105a:	3301      	adds	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800105e:	e002      	b.n	8001066 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3b01      	subs	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800106e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001072:	d102      	bne.n	800107a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f2      	bne.n	8001060 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001086:	d112      	bne.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e011      	b.n	80010b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800108e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001098:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800109c:	e007      	b.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800109e:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010a6:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	40007000 	.word	0x40007000
 80010c0:	20000000 	.word	0x20000000
 80010c4:	431bde83 	.word	0x431bde83

080010c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f000 bc08 	b.w	80018ec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010dc:	4b96      	ldr	r3, [pc, #600]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010e6:	4b94      	ldr	r3, [pc, #592]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0310 	and.w	r3, r3, #16
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80e4 	beq.w	80012c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <HAL_RCC_OscConfig+0x4c>
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	2b0c      	cmp	r3, #12
 8001108:	f040 808b 	bne.w	8001222 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2b01      	cmp	r3, #1
 8001110:	f040 8087 	bne.w	8001222 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001114:	4b88      	ldr	r3, [pc, #544]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_OscConfig+0x64>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e3df      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a1a      	ldr	r2, [r3, #32]
 8001130:	4b81      	ldr	r3, [pc, #516]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	2b00      	cmp	r3, #0
 800113a:	d004      	beq.n	8001146 <HAL_RCC_OscConfig+0x7e>
 800113c:	4b7e      	ldr	r3, [pc, #504]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001144:	e005      	b.n	8001152 <HAL_RCC_OscConfig+0x8a>
 8001146:	4b7c      	ldr	r3, [pc, #496]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001152:	4293      	cmp	r3, r2
 8001154:	d223      	bcs.n	800119e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fdcc 	bl	8001cf8 <RCC_SetFlashLatencyFromMSIRange>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e3c0      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800116a:	4b73      	ldr	r3, [pc, #460]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a72      	ldr	r2, [pc, #456]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b70      	ldr	r3, [pc, #448]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	496d      	ldr	r1, [pc, #436]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001188:	4b6b      	ldr	r3, [pc, #428]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	4968      	ldr	r1, [pc, #416]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
 800119c:	e025      	b.n	80011ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800119e:	4b66      	ldr	r3, [pc, #408]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a65      	ldr	r2, [pc, #404]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	4b63      	ldr	r3, [pc, #396]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4960      	ldr	r1, [pc, #384]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	495b      	ldr	r1, [pc, #364]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fd8c 	bl	8001cf8 <RCC_SetFlashLatencyFromMSIRange>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e380      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011ea:	f000 fcc1 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 80011ee:	4602      	mov	r2, r0
 80011f0:	4b51      	ldr	r3, [pc, #324]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	4950      	ldr	r1, [pc, #320]	@ (800133c <HAL_RCC_OscConfig+0x274>)
 80011fc:	5ccb      	ldrb	r3, [r1, r3]
 80011fe:	f003 031f 	and.w	r3, r3, #31
 8001202:	fa22 f303 	lsr.w	r3, r2, r3
 8001206:	4a4e      	ldr	r2, [pc, #312]	@ (8001340 <HAL_RCC_OscConfig+0x278>)
 8001208:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800120a:	4b4e      	ldr	r3, [pc, #312]	@ (8001344 <HAL_RCC_OscConfig+0x27c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fbc2 	bl	8000998 <HAL_InitTick>
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d052      	beq.n	80012c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	e364      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d032      	beq.n	8001290 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800122a:	4b43      	ldr	r3, [pc, #268]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a42      	ldr	r2, [pc, #264]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001236:	f7ff fbff 	bl	8000a38 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800123e:	f7ff fbfb 	bl	8000a38 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e34d      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001250:	4b39      	ldr	r3, [pc, #228]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800125c:	4b36      	ldr	r3, [pc, #216]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a35      	ldr	r2, [pc, #212]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b33      	ldr	r3, [pc, #204]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4930      	ldr	r1, [pc, #192]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127a:	4b2f      	ldr	r3, [pc, #188]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	492b      	ldr	r1, [pc, #172]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
 800128e:	e01a      	b.n	80012c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001290:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a28      	ldr	r2, [pc, #160]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001296:	f023 0301 	bic.w	r3, r3, #1
 800129a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800129c:	f7ff fbcc 	bl	8000a38 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a4:	f7ff fbc8 	bl	8000a38 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e31a      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012b6:	4b20      	ldr	r3, [pc, #128]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x1dc>
 80012c2:	e000      	b.n	80012c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d073      	beq.n	80013ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_OscConfig+0x21c>
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b0c      	cmp	r3, #12
 80012dc:	d10e      	bne.n	80012fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d10b      	bne.n	80012fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d063      	beq.n	80013b8 <HAL_RCC_OscConfig+0x2f0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d15f      	bne.n	80013b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e2f7      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001304:	d106      	bne.n	8001314 <HAL_RCC_OscConfig+0x24c>
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a0b      	ldr	r2, [pc, #44]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e025      	b.n	8001360 <HAL_RCC_OscConfig+0x298>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800131c:	d114      	bne.n	8001348 <HAL_RCC_OscConfig+0x280>
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a02      	ldr	r2, [pc, #8]	@ (8001338 <HAL_RCC_OscConfig+0x270>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e013      	b.n	8001360 <HAL_RCC_OscConfig+0x298>
 8001338:	40021000 	.word	0x40021000
 800133c:	08007044 	.word	0x08007044
 8001340:	20000000 	.word	0x20000000
 8001344:	20000004 	.word	0x20000004
 8001348:	4ba0      	ldr	r3, [pc, #640]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a9f      	ldr	r2, [pc, #636]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 800134e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b9d      	ldr	r3, [pc, #628]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a9c      	ldr	r2, [pc, #624]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 800135a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800135e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d013      	beq.n	8001390 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fb66 	bl	8000a38 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fb62 	bl	8000a38 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	@ 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e2b4      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001382:	4b92      	ldr	r3, [pc, #584]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x2a8>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fb52 	bl	8000a38 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fb4e 	bl	8000a38 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	@ 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e2a0      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013aa:	4b88      	ldr	r3, [pc, #544]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x2d0>
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d060      	beq.n	8001488 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_OscConfig+0x310>
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d119      	bne.n	8001406 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d116      	bne.n	8001406 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d8:	4b7c      	ldr	r3, [pc, #496]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_OscConfig+0x328>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e27d      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b76      	ldr	r3, [pc, #472]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	061b      	lsls	r3, r3, #24
 80013fe:	4973      	ldr	r1, [pc, #460]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001404:	e040      	b.n	8001488 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d023      	beq.n	8001456 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800140e:	4b6f      	ldr	r3, [pc, #444]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a6e      	ldr	r2, [pc, #440]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fb0d 	bl	8000a38 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fb09 	bl	8000a38 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e25b      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001434:	4b65      	ldr	r3, [pc, #404]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b62      	ldr	r3, [pc, #392]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	061b      	lsls	r3, r3, #24
 800144e:	495f      	ldr	r1, [pc, #380]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
 8001454:	e018      	b.n	8001488 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b5d      	ldr	r3, [pc, #372]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a5c      	ldr	r2, [pc, #368]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 800145c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff fae9 	bl	8000a38 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff fae5 	bl	8000a38 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e237      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800147c:	4b53      	ldr	r3, [pc, #332]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d03c      	beq.n	800150e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d01c      	beq.n	80014d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149c:	4b4b      	ldr	r3, [pc, #300]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 800149e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a2:	4a4a      	ldr	r2, [pc, #296]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ac:	f7ff fac4 	bl	8000a38 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fac0 	bl	8000a38 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e212      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014c6:	4b41      	ldr	r3, [pc, #260]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 80014c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0ef      	beq.n	80014b4 <HAL_RCC_OscConfig+0x3ec>
 80014d4:	e01b      	b.n	800150e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d6:	4b3d      	ldr	r3, [pc, #244]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 80014d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014dc:	4a3b      	ldr	r2, [pc, #236]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e6:	f7ff faa7 	bl	8000a38 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff faa3 	bl	8000a38 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e1f5      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001500:	4b32      	ldr	r3, [pc, #200]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 8001502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ef      	bne.n	80014ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80a6 	beq.w	8001668 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001520:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10d      	bne.n	8001548 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	4b27      	ldr	r3, [pc, #156]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001530:	4a26      	ldr	r2, [pc, #152]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 8001532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001536:	6593      	str	r3, [r2, #88]	@ 0x58
 8001538:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001544:	2301      	movs	r3, #1
 8001546:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001548:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <HAL_RCC_OscConfig+0x508>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d118      	bne.n	8001586 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001554:	4b1e      	ldr	r3, [pc, #120]	@ (80015d0 <HAL_RCC_OscConfig+0x508>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1d      	ldr	r2, [pc, #116]	@ (80015d0 <HAL_RCC_OscConfig+0x508>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800155e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001560:	f7ff fa6a 	bl	8000a38 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001568:	f7ff fa66 	bl	8000a38 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1b8      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <HAL_RCC_OscConfig+0x508>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d108      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4d8>
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 8001590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001594:	4a0d      	ldr	r2, [pc, #52]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800159e:	e029      	b.n	80015f4 <HAL_RCC_OscConfig+0x52c>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d115      	bne.n	80015d4 <HAL_RCC_OscConfig+0x50c>
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 80015aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ae:	4a07      	ldr	r2, [pc, #28]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015b8:	4b04      	ldr	r3, [pc, #16]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015be:	4a03      	ldr	r2, [pc, #12]	@ (80015cc <HAL_RCC_OscConfig+0x504>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015c8:	e014      	b.n	80015f4 <HAL_RCC_OscConfig+0x52c>
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40007000 	.word	0x40007000
 80015d4:	4b9d      	ldr	r3, [pc, #628]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 80015d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015da:	4a9c      	ldr	r2, [pc, #624]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015e4:	4b99      	ldr	r3, [pc, #612]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 80015e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ea:	4a98      	ldr	r2, [pc, #608]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 80015ec:	f023 0304 	bic.w	r3, r3, #4
 80015f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d016      	beq.n	800162a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fa1c 	bl	8000a38 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff fa18 	bl	8000a38 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e168      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800161a:	4b8c      	ldr	r3, [pc, #560]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 800161c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0ed      	beq.n	8001604 <HAL_RCC_OscConfig+0x53c>
 8001628:	e015      	b.n	8001656 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162a:	f7ff fa05 	bl	8000a38 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff fa01 	bl	8000a38 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e151      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001648:	4b80      	ldr	r3, [pc, #512]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 800164a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ed      	bne.n	8001632 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001656:	7ffb      	ldrb	r3, [r7, #31]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165c:	4b7b      	ldr	r3, [pc, #492]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001660:	4a7a      	ldr	r2, [pc, #488]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 8001662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001666:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b00      	cmp	r3, #0
 8001672:	d03c      	beq.n	80016ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01c      	beq.n	80016b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800167c:	4b73      	ldr	r3, [pc, #460]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 800167e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001682:	4a72      	ldr	r2, [pc, #456]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff f9d4 	bl	8000a38 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001694:	f7ff f9d0 	bl	8000a38 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e122      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016a6:	4b69      	ldr	r3, [pc, #420]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 80016a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ef      	beq.n	8001694 <HAL_RCC_OscConfig+0x5cc>
 80016b4:	e01b      	b.n	80016ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016b6:	4b65      	ldr	r3, [pc, #404]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 80016b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016bc:	4a63      	ldr	r2, [pc, #396]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c6:	f7ff f9b7 	bl	8000a38 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ce:	f7ff f9b3 	bl	8000a38 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e105      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016e0:	4b5a      	ldr	r3, [pc, #360]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 80016e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1ef      	bne.n	80016ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80f9 	beq.w	80018ea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	f040 80cf 	bne.w	80018a0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001702:	4b52      	ldr	r3, [pc, #328]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f003 0203 	and.w	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001712:	429a      	cmp	r2, r3
 8001714:	d12c      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001720:	3b01      	subs	r3, #1
 8001722:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d123      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001732:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d11b      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001742:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001744:	429a      	cmp	r2, r3
 8001746:	d113      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001752:	085b      	lsrs	r3, r3, #1
 8001754:	3b01      	subs	r3, #1
 8001756:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d109      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	3b01      	subs	r3, #1
 800176a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d071      	beq.n	8001854 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b0c      	cmp	r3, #12
 8001774:	d068      	beq.n	8001848 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001776:	4b35      	ldr	r3, [pc, #212]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d105      	bne.n	800178e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001782:	4b32      	ldr	r3, [pc, #200]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0ac      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001792:	4b2e      	ldr	r3, [pc, #184]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a2d      	ldr	r2, [pc, #180]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 8001798:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800179c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800179e:	f7ff f94b 	bl	8000a38 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff f947 	bl	8000a38 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e099      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b8:	4b24      	ldr	r3, [pc, #144]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c4:	4b21      	ldr	r3, [pc, #132]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <HAL_RCC_OscConfig+0x788>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017d4:	3a01      	subs	r2, #1
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	4311      	orrs	r1, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017de:	0212      	lsls	r2, r2, #8
 80017e0:	4311      	orrs	r1, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017e6:	0852      	lsrs	r2, r2, #1
 80017e8:	3a01      	subs	r2, #1
 80017ea:	0552      	lsls	r2, r2, #21
 80017ec:	4311      	orrs	r1, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017f2:	0852      	lsrs	r2, r2, #1
 80017f4:	3a01      	subs	r2, #1
 80017f6:	0652      	lsls	r2, r2, #25
 80017f8:	4311      	orrs	r1, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017fe:	06d2      	lsls	r2, r2, #27
 8001800:	430a      	orrs	r2, r1
 8001802:	4912      	ldr	r1, [pc, #72]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 8001804:	4313      	orrs	r3, r2
 8001806:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001808:	4b10      	ldr	r3, [pc, #64]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0f      	ldr	r2, [pc, #60]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 800180e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001812:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001814:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4a0c      	ldr	r2, [pc, #48]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 800181a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800181e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001820:	f7ff f90a 	bl	8000a38 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001828:	f7ff f906 	bl	8000a38 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e058      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183a:	4b04      	ldr	r3, [pc, #16]	@ (800184c <HAL_RCC_OscConfig+0x784>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001846:	e050      	b.n	80018ea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e04f      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
 800184c:	40021000 	.word	0x40021000
 8001850:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001854:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <HAL_RCC_OscConfig+0x82c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d144      	bne.n	80018ea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001860:	4b24      	ldr	r3, [pc, #144]	@ (80018f4 <HAL_RCC_OscConfig+0x82c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a23      	ldr	r2, [pc, #140]	@ (80018f4 <HAL_RCC_OscConfig+0x82c>)
 8001866:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800186a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800186c:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <HAL_RCC_OscConfig+0x82c>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4a20      	ldr	r2, [pc, #128]	@ (80018f4 <HAL_RCC_OscConfig+0x82c>)
 8001872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001876:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001878:	f7ff f8de 	bl	8000a38 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff f8da 	bl	8000a38 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e02c      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001892:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <HAL_RCC_OscConfig+0x82c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x7b8>
 800189e:	e024      	b.n	80018ea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b0c      	cmp	r3, #12
 80018a4:	d01f      	beq.n	80018e6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <HAL_RCC_OscConfig+0x82c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <HAL_RCC_OscConfig+0x82c>)
 80018ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff f8c1 	bl	8000a38 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff f8bd 	bl	8000a38 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e00f      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HAL_RCC_OscConfig+0x82c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_RCC_OscConfig+0x82c>)
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	4905      	ldr	r1, [pc, #20]	@ (80018f4 <HAL_RCC_OscConfig+0x82c>)
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_RCC_OscConfig+0x830>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	60cb      	str	r3, [r1, #12]
 80018e4:	e001      	b.n	80018ea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	feeefffc 	.word	0xfeeefffc

080018fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e11d      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001914:	4b90      	ldr	r3, [pc, #576]	@ (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d910      	bls.n	8001944 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b8d      	ldr	r3, [pc, #564]	@ (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 020f 	bic.w	r2, r3, #15
 800192a:	498b      	ldr	r1, [pc, #556]	@ (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b89      	ldr	r3, [pc, #548]	@ (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e105      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d010      	beq.n	8001972 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4b81      	ldr	r3, [pc, #516]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800195c:	429a      	cmp	r2, r3
 800195e:	d908      	bls.n	8001972 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001960:	4b7e      	ldr	r3, [pc, #504]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	497b      	ldr	r1, [pc, #492]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d079      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d11e      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	4b75      	ldr	r3, [pc, #468]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e0dc      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001996:	f000 fa09 	bl	8001dac <RCC_GetSysClockFreqFromPLLSource>
 800199a:	4603      	mov	r3, r0
 800199c:	4a70      	ldr	r2, [pc, #448]	@ (8001b60 <HAL_RCC_ClockConfig+0x264>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d946      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80019a2:	4b6e      	ldr	r3, [pc, #440]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d140      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019ae:	4b6b      	ldr	r3, [pc, #428]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019b6:	4a69      	ldr	r2, [pc, #420]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 80019b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e035      	b.n	8001a30 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019cc:	4b63      	ldr	r3, [pc, #396]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d115      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0b9      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e4:	4b5d      	ldr	r3, [pc, #372]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0ad      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f4:	4b59      	ldr	r3, [pc, #356]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0a5      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001a04:	f000 f8b4 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a55      	ldr	r2, [pc, #340]	@ (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d90f      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a10:	4b52      	ldr	r3, [pc, #328]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d109      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a1c:	4b4f      	ldr	r3, [pc, #316]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a24:	4a4d      	ldr	r2, [pc, #308]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a2a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a30:	4b4a      	ldr	r3, [pc, #296]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 0203 	bic.w	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4947      	ldr	r1, [pc, #284]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a42:	f7fe fff9 	bl	8000a38 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4a:	f7fe fff5 	bl	8000a38 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e077      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a60:	4b3e      	ldr	r3, [pc, #248]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 020c 	and.w	r2, r3, #12
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d1eb      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2b80      	cmp	r3, #128	@ 0x80
 8001a76:	d105      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a78:	4b38      	ldr	r3, [pc, #224]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a37      	ldr	r2, [pc, #220]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a82:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d010      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	4b31      	ldr	r3, [pc, #196]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d208      	bcs.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	492b      	ldr	r1, [pc, #172]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab2:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d210      	bcs.n	8001ae2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac0:	4b25      	ldr	r3, [pc, #148]	@ (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 020f 	bic.w	r2, r3, #15
 8001ac8:	4923      	ldr	r1, [pc, #140]	@ (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad0:	4b21      	ldr	r3, [pc, #132]	@ (8001b58 <HAL_RCC_ClockConfig+0x25c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d001      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e036      	b.n	8001b50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d008      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aee:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	4918      	ldr	r1, [pc, #96]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d009      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b0c:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4910      	ldr	r1, [pc, #64]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b20:	f000 f826 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	490c      	ldr	r1, [pc, #48]	@ (8001b64 <HAL_RCC_ClockConfig+0x268>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b68 <HAL_RCC_ClockConfig+0x26c>)
 8001b3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b40:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <HAL_RCC_ClockConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe ff27 	bl	8000998 <HAL_InitTick>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73fb      	strb	r3, [r7, #15]

  return status;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40022000 	.word	0x40022000
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	04c4b400 	.word	0x04c4b400
 8001b64:	08007044 	.word	0x08007044
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	@ 0x24
 8001b74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b88:	4b3b      	ldr	r3, [pc, #236]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d121      	bne.n	8001be2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d11e      	bne.n	8001be2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ba4:	4b34      	ldr	r3, [pc, #208]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bb0:	4b31      	ldr	r3, [pc, #196]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	e005      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10d      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d102      	bne.n	8001bee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001be8:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	e004      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf4:	4b23      	ldr	r3, [pc, #140]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d134      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d003      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0xac>
 8001c14:	e005      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c18:	617b      	str	r3, [r7, #20]
      break;
 8001c1a:	e005      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c1e:	617b      	str	r3, [r7, #20]
      break;
 8001c20:	e002      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	617b      	str	r3, [r7, #20]
      break;
 8001c26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	3301      	adds	r3, #1
 8001c34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c36:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	fb03 f202 	mul.w	r2, r3, r2
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	0e5b      	lsrs	r3, r3, #25
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	3301      	adds	r3, #1
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c68:	69bb      	ldr	r3, [r7, #24]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	@ 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	0800705c 	.word	0x0800705c
 8001c80:	00f42400 	.word	0x00f42400
 8001c84:	007a1200 	.word	0x007a1200

08001c88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	@ (8001c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000000 	.word	0x20000000

08001ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ca4:	f7ff fff0 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4904      	ldr	r1, [pc, #16]	@ (8001cc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	08007054 	.word	0x08007054

08001ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cd0:	f7ff ffda 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	0adb      	lsrs	r3, r3, #11
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4904      	ldr	r1, [pc, #16]	@ (8001cf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08007054 	.word	0x08007054

08001cf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d04:	4b27      	ldr	r3, [pc, #156]	@ (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d10:	f7ff f916 	bl	8000f40 <HAL_PWREx_GetVoltageRange>
 8001d14:	6178      	str	r0, [r7, #20]
 8001d16:	e014      	b.n	8001d42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d18:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1c:	4a21      	ldr	r2, [pc, #132]	@ (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d22:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d24:	4b1f      	ldr	r3, [pc, #124]	@ (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d30:	f7ff f906 	bl	8000f40 <HAL_PWREx_GetVoltageRange>
 8001d34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d36:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d40:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d48:	d10b      	bne.n	8001d62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b80      	cmp	r3, #128	@ 0x80
 8001d4e:	d913      	bls.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d54:	d902      	bls.n	8001d5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d56:	2302      	movs	r3, #2
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	e00d      	b.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	e00a      	b.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d66:	d902      	bls.n	8001d6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001d68:	2302      	movs	r3, #2
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	e004      	b.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b70      	cmp	r3, #112	@ 0x70
 8001d72:	d101      	bne.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d74:	2301      	movs	r3, #1
 8001d76:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d78:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 020f 	bic.w	r2, r3, #15
 8001d80:	4909      	ldr	r1, [pc, #36]	@ (8001da8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d88:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d001      	beq.n	8001d9a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40022000 	.word	0x40022000

08001dac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001db2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d00b      	beq.n	8001dda <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d825      	bhi.n	8001e14 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d008      	beq.n	8001de0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d11f      	bne.n	8001e14 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001dd4:	4b25      	ldr	r3, [pc, #148]	@ (8001e6c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001dd6:	613b      	str	r3, [r7, #16]
    break;
 8001dd8:	e01f      	b.n	8001e1a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001dda:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001ddc:	613b      	str	r3, [r7, #16]
    break;
 8001dde:	e01c      	b.n	8001e1a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001de0:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	@ (8001e68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e005      	b.n	8001e08 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001e08:	4a1a      	ldr	r2, [pc, #104]	@ (8001e74 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	613b      	str	r3, [r7, #16]
    break;
 8001e12:	e002      	b.n	8001e1a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
    break;
 8001e18:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	3301      	adds	r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	fb03 f202 	mul.w	r2, r3, r2
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e40:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0e5b      	lsrs	r3, r3, #25
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001e5a:	683b      	ldr	r3, [r7, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	00f42400 	.word	0x00f42400
 8001e70:	007a1200 	.word	0x007a1200
 8001e74:	0800705c 	.word	0x0800705c

08001e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e80:	2300      	movs	r3, #0
 8001e82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e84:	2300      	movs	r3, #0
 8001e86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d040      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e98:	2b80      	cmp	r3, #128	@ 0x80
 8001e9a:	d02a      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001e9c:	2b80      	cmp	r3, #128	@ 0x80
 8001e9e:	d825      	bhi.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001ea0:	2b60      	cmp	r3, #96	@ 0x60
 8001ea2:	d026      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001ea4:	2b60      	cmp	r3, #96	@ 0x60
 8001ea6:	d821      	bhi.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001ea8:	2b40      	cmp	r3, #64	@ 0x40
 8001eaa:	d006      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x42>
 8001eac:	2b40      	cmp	r3, #64	@ 0x40
 8001eae:	d81d      	bhi.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d009      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d010      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001eb8:	e018      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eba:	4b89      	ldr	r3, [pc, #548]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	4a88      	ldr	r2, [pc, #544]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ec6:	e015      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fb62 	bl	8002598 <RCCEx_PLLSAI1_Config>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ed8:	e00c      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3320      	adds	r3, #32
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 fc4d 	bl	8002780 <RCCEx_PLLSAI2_Config>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eea:	e003      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	74fb      	strb	r3, [r7, #19]
      break;
 8001ef0:	e000      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8001ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ef4:	7cfb      	ldrb	r3, [r7, #19]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10b      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001efa:	4b79      	ldr	r3, [pc, #484]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f00:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f08:	4975      	ldr	r1, [pc, #468]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8001f10:	e001      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f12:	7cfb      	ldrb	r3, [r7, #19]
 8001f14:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d047      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f2a:	d030      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f30:	d82a      	bhi.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f36:	d02a      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001f38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f3c:	d824      	bhi.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f42:	d008      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f48:	d81e      	bhi.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f52:	d010      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001f54:	e018      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f56:	4b62      	ldr	r3, [pc, #392]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	4a61      	ldr	r2, [pc, #388]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f60:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f62:	e015      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3304      	adds	r3, #4
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fb14 	bl	8002598 <RCCEx_PLLSAI1_Config>
 8001f70:	4603      	mov	r3, r0
 8001f72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f74:	e00c      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3320      	adds	r3, #32
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fbff 	bl	8002780 <RCCEx_PLLSAI2_Config>
 8001f82:	4603      	mov	r3, r0
 8001f84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f86:	e003      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	74fb      	strb	r3, [r7, #19]
      break;
 8001f8c:	e000      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8001f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10b      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f96:	4b52      	ldr	r3, [pc, #328]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa4:	494e      	ldr	r1, [pc, #312]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8001fac:	e001      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fae:	7cfb      	ldrb	r3, [r7, #19]
 8001fb0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 809f 	beq.w	80020fe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fc4:	4b46      	ldr	r3, [pc, #280]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fde:	4a40      	ldr	r2, [pc, #256]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a3a      	ldr	r2, [pc, #232]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002000:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002002:	f7fe fd19 	bl	8000a38 <HAL_GetTick>
 8002006:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002008:	e009      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200a:	f7fe fd15 	bl	8000a38 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d902      	bls.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	74fb      	strb	r3, [r7, #19]
        break;
 800201c:	e005      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800201e:	4b31      	ldr	r3, [pc, #196]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0ef      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d15b      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002030:	4b2b      	ldr	r3, [pc, #172]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800203a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d01f      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	429a      	cmp	r2, r3
 800204c:	d019      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800204e:	4b24      	ldr	r3, [pc, #144]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002058:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800205a:	4b21      	ldr	r3, [pc, #132]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002060:	4a1f      	ldr	r2, [pc, #124]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002062:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002066:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800206a:	4b1d      	ldr	r3, [pc, #116]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002070:	4a1b      	ldr	r2, [pc, #108]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002072:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002076:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800207a:	4a19      	ldr	r2, [pc, #100]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d016      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe fcd4 	bl	8000a38 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002092:	e00b      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002094:	f7fe fcd0 	bl	8000a38 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d902      	bls.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	74fb      	strb	r3, [r7, #19]
            break;
 80020aa:	e006      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ac:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0ec      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80020ba:	7cfb      	ldrb	r3, [r7, #19]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10c      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020c0:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020d0:	4903      	ldr	r1, [pc, #12]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020d8:	e008      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020da:	7cfb      	ldrb	r3, [r7, #19]
 80020dc:	74bb      	strb	r3, [r7, #18]
 80020de:	e005      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x274>
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ec:	7c7b      	ldrb	r3, [r7, #17]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d105      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f2:	4ba0      	ldr	r3, [pc, #640]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80020f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f6:	4a9f      	ldr	r2, [pc, #636]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80020f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800210a:	4b9a      	ldr	r3, [pc, #616]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800210c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002110:	f023 0203 	bic.w	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002118:	4996      	ldr	r1, [pc, #600]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00a      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800212c:	4b91      	ldr	r3, [pc, #580]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002132:	f023 020c 	bic.w	r2, r3, #12
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	498e      	ldr	r1, [pc, #568]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800214e:	4b89      	ldr	r3, [pc, #548]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002154:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215c:	4985      	ldr	r1, [pc, #532]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002170:	4b80      	ldr	r3, [pc, #512]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002176:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217e:	497d      	ldr	r1, [pc, #500]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002192:	4b78      	ldr	r3, [pc, #480]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002198:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a0:	4974      	ldr	r1, [pc, #464]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c2:	496c      	ldr	r1, [pc, #432]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021d6:	4b67      	ldr	r3, [pc, #412]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80021d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021e4:	4963      	ldr	r1, [pc, #396]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002206:	495b      	ldr	r1, [pc, #364]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800221a:	4b56      	ldr	r3, [pc, #344]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002220:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002228:	4952      	ldr	r1, [pc, #328]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800223c:	4b4d      	ldr	r3, [pc, #308]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002242:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224a:	494a      	ldr	r1, [pc, #296]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800225e:	4b45      	ldr	r3, [pc, #276]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002264:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226c:	4941      	ldr	r1, [pc, #260]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002280:	4b3c      	ldr	r3, [pc, #240]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800228e:	4939      	ldr	r1, [pc, #228]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d028      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022a2:	4b34      	ldr	r3, [pc, #208]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80022a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b0:	4930      	ldr	r1, [pc, #192]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022c0:	d106      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	4a2b      	ldr	r2, [pc, #172]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80022c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022cc:	60d3      	str	r3, [r2, #12]
 80022ce:	e011      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3304      	adds	r3, #4
 80022de:	2101      	movs	r1, #1
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 f959 	bl	8002598 <RCCEx_PLLSAI1_Config>
 80022e6:	4603      	mov	r3, r0
 80022e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022ea:	7cfb      	ldrb	r3, [r7, #19]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d04d      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002304:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002308:	d108      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800230a:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800230c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002310:	4a18      	ldr	r2, [pc, #96]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002312:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002316:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800231a:	e012      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800231c:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800231e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002322:	4a14      	ldr	r2, [pc, #80]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002324:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002328:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800232c:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002332:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800233a:	490e      	ldr	r1, [pc, #56]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800234a:	d106      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234c:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a08      	ldr	r2, [pc, #32]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002356:	60d3      	str	r3, [r2, #12]
 8002358:	e020      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800235e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002362:	d109      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002364:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4a02      	ldr	r2, [pc, #8]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800236a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236e:	60d3      	str	r3, [r2, #12]
 8002370:	e014      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800237c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002380:	d10c      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3304      	adds	r3, #4
 8002386:	2101      	movs	r1, #1
 8002388:	4618      	mov	r0, r3
 800238a:	f000 f905 	bl	8002598 <RCCEx_PLLSAI1_Config>
 800238e:	4603      	mov	r3, r0
 8002390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d028      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023a8:	4b7a      	ldr	r3, [pc, #488]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023b6:	4977      	ldr	r1, [pc, #476]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023c6:	d106      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c8:	4b72      	ldr	r3, [pc, #456]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a71      	ldr	r2, [pc, #452]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80023ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023d2:	60d3      	str	r3, [r2, #12]
 80023d4:	e011      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023de:	d10c      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	2101      	movs	r1, #1
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f8d6 	bl	8002598 <RCCEx_PLLSAI1_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d01e      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002406:	4b63      	ldr	r3, [pc, #396]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002416:	495f      	ldr	r1, [pc, #380]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002424:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002428:	d10c      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	2102      	movs	r1, #2
 8002430:	4618      	mov	r0, r3
 8002432:	f000 f8b1 	bl	8002598 <RCCEx_PLLSAI1_Config>
 8002436:	4603      	mov	r3, r0
 8002438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00b      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002450:	4b50      	ldr	r3, [pc, #320]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002452:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002456:	f023 0204 	bic.w	r2, r3, #4
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002460:	494c      	ldr	r1, [pc, #304]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00b      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002474:	4b47      	ldr	r3, [pc, #284]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002476:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800247a:	f023 0218 	bic.w	r2, r3, #24
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002484:	4943      	ldr	r1, [pc, #268]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d035      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002498:	4b3e      	ldr	r3, [pc, #248]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a3d      	ldr	r2, [pc, #244]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800249e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a4:	f7fe fac8 	bl	8000a38 <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024aa:	e009      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024ac:	f7fe fac4 	bl	8000a38 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d902      	bls.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	74fb      	strb	r3, [r7, #19]
        break;
 80024be:	e005      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024c0:	4b34      	ldr	r3, [pc, #208]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ef      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d113      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80024d2:	4b30      	ldr	r3, [pc, #192]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80024d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024e2:	492c      	ldr	r1, [pc, #176]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3320      	adds	r3, #32
 80024ee:	2102      	movs	r1, #2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f945 	bl	8002780 <RCCEx_PLLSAI2_Config>
 80024f6:	4603      	mov	r3, r0
 80024f8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01e      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002510:	4b20      	ldr	r3, [pc, #128]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002512:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002516:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002520:	491c      	ldr	r1, [pc, #112]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002532:	d10c      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3320      	adds	r3, #32
 8002538:	2101      	movs	r1, #1
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f920 	bl	8002780 <RCCEx_PLLSAI2_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800254a:	7cfb      	ldrb	r3, [r7, #19]
 800254c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d017      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800255a:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800255c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002560:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256a:	490a      	ldr	r1, [pc, #40]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002578:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800257c:	d105      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800257e:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002588:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800258a:	7cbb      	ldrb	r3, [r7, #18]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000

08002598 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025a6:	4b72      	ldr	r3, [pc, #456]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00e      	beq.n	80025d0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0203 	and.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d103      	bne.n	80025ca <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
       ||
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d142      	bne.n	8002650 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
 80025ce:	e03f      	b.n	8002650 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d018      	beq.n	800260a <RCCEx_PLLSAI1_Config+0x72>
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d825      	bhi.n	8002628 <RCCEx_PLLSAI1_Config+0x90>
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d002      	beq.n	80025e6 <RCCEx_PLLSAI1_Config+0x4e>
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d009      	beq.n	80025f8 <RCCEx_PLLSAI1_Config+0x60>
 80025e4:	e020      	b.n	8002628 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025e6:	4b62      	ldr	r3, [pc, #392]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d11d      	bne.n	800262e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f6:	e01a      	b.n	800262e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025f8:	4b5d      	ldr	r3, [pc, #372]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d116      	bne.n	8002632 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002608:	e013      	b.n	8002632 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800260a:	4b59      	ldr	r3, [pc, #356]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10f      	bne.n	8002636 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002616:	4b56      	ldr	r3, [pc, #344]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002626:	e006      	b.n	8002636 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
      break;
 800262c:	e004      	b.n	8002638 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800262e:	bf00      	nop
 8002630:	e002      	b.n	8002638 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002632:	bf00      	nop
 8002634:	e000      	b.n	8002638 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002636:	bf00      	nop
    }

    if(status == HAL_OK)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d108      	bne.n	8002650 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800263e:	4b4c      	ldr	r3, [pc, #304]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4949      	ldr	r1, [pc, #292]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 800264c:	4313      	orrs	r3, r2
 800264e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 8086 	bne.w	8002764 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002658:	4b45      	ldr	r3, [pc, #276]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a44      	ldr	r2, [pc, #272]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 800265e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002664:	f7fe f9e8 	bl	8000a38 <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800266a:	e009      	b.n	8002680 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800266c:	f7fe f9e4 	bl	8000a38 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d902      	bls.n	8002680 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	73fb      	strb	r3, [r7, #15]
        break;
 800267e:	e005      	b.n	800268c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002680:	4b3b      	ldr	r3, [pc, #236]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ef      	bne.n	800266c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d168      	bne.n	8002764 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d113      	bne.n	80026c0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002698:	4b35      	ldr	r3, [pc, #212]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	4b35      	ldr	r3, [pc, #212]	@ (8002774 <RCCEx_PLLSAI1_Config+0x1dc>)
 800269e:	4013      	ands	r3, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	0211      	lsls	r1, r2, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68d2      	ldr	r2, [r2, #12]
 80026aa:	06d2      	lsls	r2, r2, #27
 80026ac:	4311      	orrs	r1, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6852      	ldr	r2, [r2, #4]
 80026b2:	3a01      	subs	r2, #1
 80026b4:	0112      	lsls	r2, r2, #4
 80026b6:	430a      	orrs	r2, r1
 80026b8:	492d      	ldr	r1, [pc, #180]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	610b      	str	r3, [r1, #16]
 80026be:	e02d      	b.n	800271c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d115      	bne.n	80026f2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6892      	ldr	r2, [r2, #8]
 80026d2:	0211      	lsls	r1, r2, #8
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6912      	ldr	r2, [r2, #16]
 80026d8:	0852      	lsrs	r2, r2, #1
 80026da:	3a01      	subs	r2, #1
 80026dc:	0552      	lsls	r2, r2, #21
 80026de:	4311      	orrs	r1, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6852      	ldr	r2, [r2, #4]
 80026e4:	3a01      	subs	r2, #1
 80026e6:	0112      	lsls	r2, r2, #4
 80026e8:	430a      	orrs	r2, r1
 80026ea:	4921      	ldr	r1, [pc, #132]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	610b      	str	r3, [r1, #16]
 80026f0:	e014      	b.n	800271c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	4b21      	ldr	r3, [pc, #132]	@ (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6892      	ldr	r2, [r2, #8]
 80026fe:	0211      	lsls	r1, r2, #8
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6952      	ldr	r2, [r2, #20]
 8002704:	0852      	lsrs	r2, r2, #1
 8002706:	3a01      	subs	r2, #1
 8002708:	0652      	lsls	r2, r2, #25
 800270a:	4311      	orrs	r1, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6852      	ldr	r2, [r2, #4]
 8002710:	3a01      	subs	r2, #1
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	430a      	orrs	r2, r1
 8002716:	4916      	ldr	r1, [pc, #88]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002718:	4313      	orrs	r3, r2
 800271a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800271c:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a13      	ldr	r2, [pc, #76]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002722:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002726:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7fe f986 	bl	8000a38 <HAL_GetTick>
 800272c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800272e:	e009      	b.n	8002744 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002730:	f7fe f982 	bl	8000a38 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d902      	bls.n	8002744 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	73fb      	strb	r3, [r7, #15]
          break;
 8002742:	e005      	b.n	8002750 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002744:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0ef      	beq.n	8002730 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002756:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	4904      	ldr	r1, [pc, #16]	@ (8002770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002760:	4313      	orrs	r3, r2
 8002762:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	07ff800f 	.word	0x07ff800f
 8002778:	ff9f800f 	.word	0xff9f800f
 800277c:	f9ff800f 	.word	0xf9ff800f

08002780 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800278e:	4b72      	ldr	r3, [pc, #456]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00e      	beq.n	80027b8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800279a:	4b6f      	ldr	r3, [pc, #444]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0203 	and.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d103      	bne.n	80027b2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
       ||
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d142      	bne.n	8002838 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	e03f      	b.n	8002838 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d018      	beq.n	80027f2 <RCCEx_PLLSAI2_Config+0x72>
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d825      	bhi.n	8002810 <RCCEx_PLLSAI2_Config+0x90>
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d002      	beq.n	80027ce <RCCEx_PLLSAI2_Config+0x4e>
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d009      	beq.n	80027e0 <RCCEx_PLLSAI2_Config+0x60>
 80027cc:	e020      	b.n	8002810 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ce:	4b62      	ldr	r3, [pc, #392]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11d      	bne.n	8002816 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027de:	e01a      	b.n	8002816 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027e0:	4b5d      	ldr	r3, [pc, #372]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d116      	bne.n	800281a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f0:	e013      	b.n	800281a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027f2:	4b59      	ldr	r3, [pc, #356]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10f      	bne.n	800281e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027fe:	4b56      	ldr	r3, [pc, #344]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800280e:	e006      	b.n	800281e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      break;
 8002814:	e004      	b.n	8002820 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002816:	bf00      	nop
 8002818:	e002      	b.n	8002820 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800281a:	bf00      	nop
 800281c:	e000      	b.n	8002820 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800281e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d108      	bne.n	8002838 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002826:	4b4c      	ldr	r3, [pc, #304]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4949      	ldr	r1, [pc, #292]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002834:	4313      	orrs	r3, r2
 8002836:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 8086 	bne.w	800294c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002840:	4b45      	ldr	r3, [pc, #276]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a44      	ldr	r2, [pc, #272]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800284a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800284c:	f7fe f8f4 	bl	8000a38 <HAL_GetTick>
 8002850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002852:	e009      	b.n	8002868 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002854:	f7fe f8f0 	bl	8000a38 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d902      	bls.n	8002868 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	73fb      	strb	r3, [r7, #15]
        break;
 8002866:	e005      	b.n	8002874 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002868:	4b3b      	ldr	r3, [pc, #236]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ef      	bne.n	8002854 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d168      	bne.n	800294c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d113      	bne.n	80028a8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002880:	4b35      	ldr	r3, [pc, #212]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	4b35      	ldr	r3, [pc, #212]	@ (800295c <RCCEx_PLLSAI2_Config+0x1dc>)
 8002886:	4013      	ands	r3, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6892      	ldr	r2, [r2, #8]
 800288c:	0211      	lsls	r1, r2, #8
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68d2      	ldr	r2, [r2, #12]
 8002892:	06d2      	lsls	r2, r2, #27
 8002894:	4311      	orrs	r1, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6852      	ldr	r2, [r2, #4]
 800289a:	3a01      	subs	r2, #1
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	430a      	orrs	r2, r1
 80028a0:	492d      	ldr	r1, [pc, #180]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	614b      	str	r3, [r1, #20]
 80028a6:	e02d      	b.n	8002904 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d115      	bne.n	80028da <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1e0>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6892      	ldr	r2, [r2, #8]
 80028ba:	0211      	lsls	r1, r2, #8
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6912      	ldr	r2, [r2, #16]
 80028c0:	0852      	lsrs	r2, r2, #1
 80028c2:	3a01      	subs	r2, #1
 80028c4:	0552      	lsls	r2, r2, #21
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6852      	ldr	r2, [r2, #4]
 80028cc:	3a01      	subs	r2, #1
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	430a      	orrs	r2, r1
 80028d2:	4921      	ldr	r1, [pc, #132]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	614b      	str	r3, [r1, #20]
 80028d8:	e014      	b.n	8002904 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028da:	4b1f      	ldr	r3, [pc, #124]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	4b21      	ldr	r3, [pc, #132]	@ (8002964 <RCCEx_PLLSAI2_Config+0x1e4>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6892      	ldr	r2, [r2, #8]
 80028e6:	0211      	lsls	r1, r2, #8
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6952      	ldr	r2, [r2, #20]
 80028ec:	0852      	lsrs	r2, r2, #1
 80028ee:	3a01      	subs	r2, #1
 80028f0:	0652      	lsls	r2, r2, #25
 80028f2:	4311      	orrs	r1, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6852      	ldr	r2, [r2, #4]
 80028f8:	3a01      	subs	r2, #1
 80028fa:	0112      	lsls	r2, r2, #4
 80028fc:	430a      	orrs	r2, r1
 80028fe:	4916      	ldr	r1, [pc, #88]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002900:	4313      	orrs	r3, r2
 8002902:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002904:	4b14      	ldr	r3, [pc, #80]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a13      	ldr	r2, [pc, #76]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800290e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe f892 	bl	8000a38 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002916:	e009      	b.n	800292c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002918:	f7fe f88e 	bl	8000a38 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d902      	bls.n	800292c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	73fb      	strb	r3, [r7, #15]
          break;
 800292a:	e005      	b.n	8002938 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800292c:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ef      	beq.n	8002918 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800293e:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	4904      	ldr	r1, [pc, #16]	@ (8002958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002948:	4313      	orrs	r3, r2
 800294a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	07ff800f 	.word	0x07ff800f
 8002960:	ff9f800f 	.word	0xff9f800f
 8002964:	f9ff800f 	.word	0xf9ff800f

08002968 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e042      	b.n	8002a00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7fd feed 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2224      	movs	r2, #36	@ 0x24
 8002996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fc7c 	bl	80032b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f97d 	bl	8002cb8 <UART_SetConfig>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e01b      	b.n	8002a00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fcfb 	bl	80033f4 <UART_CheckIdleState>
 80029fe:	4603      	mov	r3, r0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	@ 0x28
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	d17b      	bne.n	8002b1a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_UART_Transmit+0x26>
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e074      	b.n	8002b1c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2221      	movs	r2, #33	@ 0x21
 8002a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a42:	f7fd fff9 	bl	8000a38 <HAL_GetTick>
 8002a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	88fa      	ldrh	r2, [r7, #6]
 8002a4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	88fa      	ldrh	r2, [r7, #6]
 8002a54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a60:	d108      	bne.n	8002a74 <HAL_UART_Transmit+0x6c>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d104      	bne.n	8002a74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	e003      	b.n	8002a7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a7c:	e030      	b.n	8002ae0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2200      	movs	r2, #0
 8002a86:	2180      	movs	r1, #128	@ 0x80
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fd5d 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e03d      	b.n	8002b1c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10b      	bne.n	8002abe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	881a      	ldrh	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ab2:	b292      	uxth	r2, r2
 8002ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	3302      	adds	r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	e007      	b.n	8002ace <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	3301      	adds	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1c8      	bne.n	8002a7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2200      	movs	r2, #0
 8002af4:	2140      	movs	r1, #64	@ 0x40
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fd26 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e006      	b.n	8002b1c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	@ 0x28
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	f040 80b6 	bne.w	8002cac <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <HAL_UART_Receive+0x28>
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0ae      	b.n	8002cae <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2222      	movs	r2, #34	@ 0x22
 8002b5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b66:	f7fd ff67 	bl	8000a38 <HAL_GetTick>
 8002b6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	88fa      	ldrh	r2, [r7, #6]
 8002b70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	88fa      	ldrh	r2, [r7, #6]
 8002b78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b84:	d10e      	bne.n	8002ba4 <HAL_UART_Receive+0x80>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d105      	bne.n	8002b9a <HAL_UART_Receive+0x76>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002b94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002b98:	e02d      	b.n	8002bf6 <HAL_UART_Receive+0xd2>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	22ff      	movs	r2, #255	@ 0xff
 8002b9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002ba2:	e028      	b.n	8002bf6 <HAL_UART_Receive+0xd2>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10d      	bne.n	8002bc8 <HAL_UART_Receive+0xa4>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <HAL_UART_Receive+0x9a>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	22ff      	movs	r2, #255	@ 0xff
 8002bb8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002bbc:	e01b      	b.n	8002bf6 <HAL_UART_Receive+0xd2>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	227f      	movs	r2, #127	@ 0x7f
 8002bc2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002bc6:	e016      	b.n	8002bf6 <HAL_UART_Receive+0xd2>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bd0:	d10d      	bne.n	8002bee <HAL_UART_Receive+0xca>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d104      	bne.n	8002be4 <HAL_UART_Receive+0xc0>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	227f      	movs	r2, #127	@ 0x7f
 8002bde:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002be2:	e008      	b.n	8002bf6 <HAL_UART_Receive+0xd2>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	223f      	movs	r2, #63	@ 0x3f
 8002be8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002bec:	e003      	b.n	8002bf6 <HAL_UART_Receive+0xd2>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002bfc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c06:	d108      	bne.n	8002c1a <HAL_UART_Receive+0xf6>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d104      	bne.n	8002c1a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	e003      	b.n	8002c22 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002c22:	e037      	b.n	8002c94 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2120      	movs	r1, #32
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fc8a 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e033      	b.n	8002cae <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10c      	bne.n	8002c66 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	8a7b      	ldrh	r3, [r7, #18]
 8002c56:	4013      	ands	r3, r2
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	3302      	adds	r3, #2
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	e00d      	b.n	8002c82 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	8a7b      	ldrh	r3, [r7, #18]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	4013      	ands	r3, r2
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1c1      	bne.n	8002c24 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e000      	b.n	8002cae <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002cac:	2302      	movs	r3, #2
  }
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cbc:	b08c      	sub	sp, #48	@ 0x30
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4baa      	ldr	r3, [pc, #680]	@ (8002f90 <UART_SetConfig+0x2d8>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a9f      	ldr	r2, [pc, #636]	@ (8002f94 <UART_SetConfig+0x2dc>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d004      	beq.n	8002d24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d20:	4313      	orrs	r3, r2
 8002d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002d2e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d42:	f023 010f 	bic.w	r1, r3, #15
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a90      	ldr	r2, [pc, #576]	@ (8002f98 <UART_SetConfig+0x2e0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d125      	bne.n	8002da8 <UART_SetConfig+0xf0>
 8002d5c:	4b8f      	ldr	r3, [pc, #572]	@ (8002f9c <UART_SetConfig+0x2e4>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d81a      	bhi.n	8002da0 <UART_SetConfig+0xe8>
 8002d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d70 <UART_SetConfig+0xb8>)
 8002d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d70:	08002d81 	.word	0x08002d81
 8002d74:	08002d91 	.word	0x08002d91
 8002d78:	08002d89 	.word	0x08002d89
 8002d7c:	08002d99 	.word	0x08002d99
 8002d80:	2301      	movs	r3, #1
 8002d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d86:	e116      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d8e:	e112      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002d90:	2304      	movs	r3, #4
 8002d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d96:	e10e      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002d98:	2308      	movs	r3, #8
 8002d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d9e:	e10a      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002da0:	2310      	movs	r3, #16
 8002da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002da6:	e106      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a7c      	ldr	r2, [pc, #496]	@ (8002fa0 <UART_SetConfig+0x2e8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d138      	bne.n	8002e24 <UART_SetConfig+0x16c>
 8002db2:	4b7a      	ldr	r3, [pc, #488]	@ (8002f9c <UART_SetConfig+0x2e4>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d82d      	bhi.n	8002e1c <UART_SetConfig+0x164>
 8002dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc8 <UART_SetConfig+0x110>)
 8002dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc6:	bf00      	nop
 8002dc8:	08002dfd 	.word	0x08002dfd
 8002dcc:	08002e1d 	.word	0x08002e1d
 8002dd0:	08002e1d 	.word	0x08002e1d
 8002dd4:	08002e1d 	.word	0x08002e1d
 8002dd8:	08002e0d 	.word	0x08002e0d
 8002ddc:	08002e1d 	.word	0x08002e1d
 8002de0:	08002e1d 	.word	0x08002e1d
 8002de4:	08002e1d 	.word	0x08002e1d
 8002de8:	08002e05 	.word	0x08002e05
 8002dec:	08002e1d 	.word	0x08002e1d
 8002df0:	08002e1d 	.word	0x08002e1d
 8002df4:	08002e1d 	.word	0x08002e1d
 8002df8:	08002e15 	.word	0x08002e15
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e02:	e0d8      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002e04:	2302      	movs	r3, #2
 8002e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e0a:	e0d4      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e12:	e0d0      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002e14:	2308      	movs	r3, #8
 8002e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e1a:	e0cc      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e22:	e0c8      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a5e      	ldr	r2, [pc, #376]	@ (8002fa4 <UART_SetConfig+0x2ec>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d125      	bne.n	8002e7a <UART_SetConfig+0x1c2>
 8002e2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f9c <UART_SetConfig+0x2e4>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e38:	2b30      	cmp	r3, #48	@ 0x30
 8002e3a:	d016      	beq.n	8002e6a <UART_SetConfig+0x1b2>
 8002e3c:	2b30      	cmp	r3, #48	@ 0x30
 8002e3e:	d818      	bhi.n	8002e72 <UART_SetConfig+0x1ba>
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d00a      	beq.n	8002e5a <UART_SetConfig+0x1a2>
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d814      	bhi.n	8002e72 <UART_SetConfig+0x1ba>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <UART_SetConfig+0x19a>
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d008      	beq.n	8002e62 <UART_SetConfig+0x1aa>
 8002e50:	e00f      	b.n	8002e72 <UART_SetConfig+0x1ba>
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e58:	e0ad      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e60:	e0a9      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002e62:	2304      	movs	r3, #4
 8002e64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e68:	e0a5      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e70:	e0a1      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002e72:	2310      	movs	r3, #16
 8002e74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e78:	e09d      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa8 <UART_SetConfig+0x2f0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d125      	bne.n	8002ed0 <UART_SetConfig+0x218>
 8002e84:	4b45      	ldr	r3, [pc, #276]	@ (8002f9c <UART_SetConfig+0x2e4>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002e8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e90:	d016      	beq.n	8002ec0 <UART_SetConfig+0x208>
 8002e92:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e94:	d818      	bhi.n	8002ec8 <UART_SetConfig+0x210>
 8002e96:	2b80      	cmp	r3, #128	@ 0x80
 8002e98:	d00a      	beq.n	8002eb0 <UART_SetConfig+0x1f8>
 8002e9a:	2b80      	cmp	r3, #128	@ 0x80
 8002e9c:	d814      	bhi.n	8002ec8 <UART_SetConfig+0x210>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <UART_SetConfig+0x1f0>
 8002ea2:	2b40      	cmp	r3, #64	@ 0x40
 8002ea4:	d008      	beq.n	8002eb8 <UART_SetConfig+0x200>
 8002ea6:	e00f      	b.n	8002ec8 <UART_SetConfig+0x210>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eae:	e082      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eb6:	e07e      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ebe:	e07a      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ec6:	e076      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002ec8:	2310      	movs	r3, #16
 8002eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ece:	e072      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a35      	ldr	r2, [pc, #212]	@ (8002fac <UART_SetConfig+0x2f4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d12a      	bne.n	8002f30 <UART_SetConfig+0x278>
 8002eda:	4b30      	ldr	r3, [pc, #192]	@ (8002f9c <UART_SetConfig+0x2e4>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ee4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ee8:	d01a      	beq.n	8002f20 <UART_SetConfig+0x268>
 8002eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002eee:	d81b      	bhi.n	8002f28 <UART_SetConfig+0x270>
 8002ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ef4:	d00c      	beq.n	8002f10 <UART_SetConfig+0x258>
 8002ef6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002efa:	d815      	bhi.n	8002f28 <UART_SetConfig+0x270>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <UART_SetConfig+0x250>
 8002f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f04:	d008      	beq.n	8002f18 <UART_SetConfig+0x260>
 8002f06:	e00f      	b.n	8002f28 <UART_SetConfig+0x270>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f0e:	e052      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002f10:	2302      	movs	r3, #2
 8002f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f16:	e04e      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002f18:	2304      	movs	r3, #4
 8002f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f1e:	e04a      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002f20:	2308      	movs	r3, #8
 8002f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f26:	e046      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002f28:	2310      	movs	r3, #16
 8002f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f2e:	e042      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a17      	ldr	r2, [pc, #92]	@ (8002f94 <UART_SetConfig+0x2dc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d13a      	bne.n	8002fb0 <UART_SetConfig+0x2f8>
 8002f3a:	4b18      	ldr	r3, [pc, #96]	@ (8002f9c <UART_SetConfig+0x2e4>)
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f48:	d01a      	beq.n	8002f80 <UART_SetConfig+0x2c8>
 8002f4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f4e:	d81b      	bhi.n	8002f88 <UART_SetConfig+0x2d0>
 8002f50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f54:	d00c      	beq.n	8002f70 <UART_SetConfig+0x2b8>
 8002f56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f5a:	d815      	bhi.n	8002f88 <UART_SetConfig+0x2d0>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <UART_SetConfig+0x2b0>
 8002f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f64:	d008      	beq.n	8002f78 <UART_SetConfig+0x2c0>
 8002f66:	e00f      	b.n	8002f88 <UART_SetConfig+0x2d0>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f6e:	e022      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002f70:	2302      	movs	r3, #2
 8002f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f76:	e01e      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f7e:	e01a      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002f80:	2308      	movs	r3, #8
 8002f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f86:	e016      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002f88:	2310      	movs	r3, #16
 8002f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f8e:	e012      	b.n	8002fb6 <UART_SetConfig+0x2fe>
 8002f90:	cfff69f3 	.word	0xcfff69f3
 8002f94:	40008000 	.word	0x40008000
 8002f98:	40013800 	.word	0x40013800
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40004400 	.word	0x40004400
 8002fa4:	40004800 	.word	0x40004800
 8002fa8:	40004c00 	.word	0x40004c00
 8002fac:	40005000 	.word	0x40005000
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4aae      	ldr	r2, [pc, #696]	@ (8003274 <UART_SetConfig+0x5bc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	f040 8097 	bne.w	80030f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d823      	bhi.n	8003012 <UART_SetConfig+0x35a>
 8002fca:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd0 <UART_SetConfig+0x318>)
 8002fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd0:	08002ff5 	.word	0x08002ff5
 8002fd4:	08003013 	.word	0x08003013
 8002fd8:	08002ffd 	.word	0x08002ffd
 8002fdc:	08003013 	.word	0x08003013
 8002fe0:	08003003 	.word	0x08003003
 8002fe4:	08003013 	.word	0x08003013
 8002fe8:	08003013 	.word	0x08003013
 8002fec:	08003013 	.word	0x08003013
 8002ff0:	0800300b 	.word	0x0800300b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f7fe fe54 	bl	8001ca0 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ffa:	e010      	b.n	800301e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ffc:	4b9e      	ldr	r3, [pc, #632]	@ (8003278 <UART_SetConfig+0x5c0>)
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003000:	e00d      	b.n	800301e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003002:	f7fe fdb5 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8003006:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003008:	e009      	b.n	800301e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800300a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003010:	e005      	b.n	800301e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800301c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8130 	beq.w	8003286 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	4a94      	ldr	r2, [pc, #592]	@ (800327c <UART_SetConfig+0x5c4>)
 800302c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003030:	461a      	mov	r2, r3
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	fbb3 f3f2 	udiv	r3, r3, r2
 8003038:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	4413      	add	r3, r2
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	429a      	cmp	r2, r3
 8003048:	d305      	bcc.n	8003056 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	429a      	cmp	r2, r3
 8003054:	d903      	bls.n	800305e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800305c:	e113      	b.n	8003286 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	2200      	movs	r2, #0
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	60fa      	str	r2, [r7, #12]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	4a84      	ldr	r2, [pc, #528]	@ (800327c <UART_SetConfig+0x5c4>)
 800306c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003070:	b29b      	uxth	r3, r3
 8003072:	2200      	movs	r2, #0
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800307c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003080:	f7fd f90e 	bl	80002a0 <__aeabi_uldivmod>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	020b      	lsls	r3, r1, #8
 8003096:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800309a:	0202      	lsls	r2, r0, #8
 800309c:	6979      	ldr	r1, [r7, #20]
 800309e:	6849      	ldr	r1, [r1, #4]
 80030a0:	0849      	lsrs	r1, r1, #1
 80030a2:	2000      	movs	r0, #0
 80030a4:	460c      	mov	r4, r1
 80030a6:	4605      	mov	r5, r0
 80030a8:	eb12 0804 	adds.w	r8, r2, r4
 80030ac:	eb43 0905 	adc.w	r9, r3, r5
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	469a      	mov	sl, r3
 80030b8:	4693      	mov	fp, r2
 80030ba:	4652      	mov	r2, sl
 80030bc:	465b      	mov	r3, fp
 80030be:	4640      	mov	r0, r8
 80030c0:	4649      	mov	r1, r9
 80030c2:	f7fd f8ed 	bl	80002a0 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4613      	mov	r3, r2
 80030cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030d4:	d308      	bcc.n	80030e8 <UART_SetConfig+0x430>
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030dc:	d204      	bcs.n	80030e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a3a      	ldr	r2, [r7, #32]
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	e0ce      	b.n	8003286 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030ee:	e0ca      	b.n	8003286 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030f8:	d166      	bne.n	80031c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80030fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d827      	bhi.n	8003152 <UART_SetConfig+0x49a>
 8003102:	a201      	add	r2, pc, #4	@ (adr r2, 8003108 <UART_SetConfig+0x450>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	0800312d 	.word	0x0800312d
 800310c:	08003135 	.word	0x08003135
 8003110:	0800313d 	.word	0x0800313d
 8003114:	08003153 	.word	0x08003153
 8003118:	08003143 	.word	0x08003143
 800311c:	08003153 	.word	0x08003153
 8003120:	08003153 	.word	0x08003153
 8003124:	08003153 	.word	0x08003153
 8003128:	0800314b 	.word	0x0800314b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800312c:	f7fe fdb8 	bl	8001ca0 <HAL_RCC_GetPCLK1Freq>
 8003130:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003132:	e014      	b.n	800315e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003134:	f7fe fdca 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8003138:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800313a:	e010      	b.n	800315e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800313c:	4b4e      	ldr	r3, [pc, #312]	@ (8003278 <UART_SetConfig+0x5c0>)
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003140:	e00d      	b.n	800315e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003142:	f7fe fd15 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8003146:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003148:	e009      	b.n	800315e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800314e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003150:	e005      	b.n	800315e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800315c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8090 	beq.w	8003286 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	4a44      	ldr	r2, [pc, #272]	@ (800327c <UART_SetConfig+0x5c4>)
 800316c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003170:	461a      	mov	r2, r3
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	fbb3 f3f2 	udiv	r3, r3, r2
 8003178:	005a      	lsls	r2, r3, #1
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	441a      	add	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	fbb2 f3f3 	udiv	r3, r2, r3
 800318a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	2b0f      	cmp	r3, #15
 8003190:	d916      	bls.n	80031c0 <UART_SetConfig+0x508>
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003198:	d212      	bcs.n	80031c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	b29b      	uxth	r3, r3
 800319e:	f023 030f 	bic.w	r3, r3, #15
 80031a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	8bfb      	ldrh	r3, [r7, #30]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	8bfa      	ldrh	r2, [r7, #30]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	e062      	b.n	8003286 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031c6:	e05e      	b.n	8003286 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d828      	bhi.n	8003222 <UART_SetConfig+0x56a>
 80031d0:	a201      	add	r2, pc, #4	@ (adr r2, 80031d8 <UART_SetConfig+0x520>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	080031fd 	.word	0x080031fd
 80031dc:	08003205 	.word	0x08003205
 80031e0:	0800320d 	.word	0x0800320d
 80031e4:	08003223 	.word	0x08003223
 80031e8:	08003213 	.word	0x08003213
 80031ec:	08003223 	.word	0x08003223
 80031f0:	08003223 	.word	0x08003223
 80031f4:	08003223 	.word	0x08003223
 80031f8:	0800321b 	.word	0x0800321b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031fc:	f7fe fd50 	bl	8001ca0 <HAL_RCC_GetPCLK1Freq>
 8003200:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003202:	e014      	b.n	800322e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003204:	f7fe fd62 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8003208:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800320a:	e010      	b.n	800322e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800320c:	4b1a      	ldr	r3, [pc, #104]	@ (8003278 <UART_SetConfig+0x5c0>)
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003210:	e00d      	b.n	800322e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003212:	f7fe fcad 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8003216:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003218:	e009      	b.n	800322e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800321a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800321e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003220:	e005      	b.n	800322e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800322c:	bf00      	nop
    }

    if (pclk != 0U)
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	2b00      	cmp	r3, #0
 8003232:	d028      	beq.n	8003286 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	4a10      	ldr	r2, [pc, #64]	@ (800327c <UART_SetConfig+0x5c4>)
 800323a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800323e:	461a      	mov	r2, r3
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	fbb3 f2f2 	udiv	r2, r3, r2
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	441a      	add	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	fbb2 f3f3 	udiv	r3, r2, r3
 8003256:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	d910      	bls.n	8003280 <UART_SetConfig+0x5c8>
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003264:	d20c      	bcs.n	8003280 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	b29a      	uxth	r2, r3
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60da      	str	r2, [r3, #12]
 8003270:	e009      	b.n	8003286 <UART_SetConfig+0x5ce>
 8003272:	bf00      	nop
 8003274:	40008000 	.word	0x40008000
 8003278:	00f42400 	.word	0x00f42400
 800327c:	0800708c 	.word	0x0800708c
      }
      else
      {
        ret = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2201      	movs	r2, #1
 800328a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2201      	movs	r2, #1
 8003292:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2200      	movs	r2, #0
 800329a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2200      	movs	r2, #0
 80032a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80032a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3730      	adds	r7, #48	@ 0x30
 80032aa:	46bd      	mov	sp, r7
 80032ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01a      	beq.n	80033c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ae:	d10a      	bne.n	80033c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
  }
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b098      	sub	sp, #96	@ 0x60
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003404:	f7fd fb18 	bl	8000a38 <HAL_GetTick>
 8003408:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b08      	cmp	r3, #8
 8003416:	d12f      	bne.n	8003478 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003418:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003420:	2200      	movs	r2, #0
 8003422:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f88e 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d022      	beq.n	8003478 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003446:	653b      	str	r3, [r7, #80]	@ 0x50
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003450:	647b      	str	r3, [r7, #68]	@ 0x44
 8003452:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800345e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e6      	bne.n	8003432 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e063      	b.n	8003540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d149      	bne.n	800351a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003486:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348e:	2200      	movs	r2, #0
 8003490:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f857 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d03c      	beq.n	800351a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	623b      	str	r3, [r7, #32]
   return(result);
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034be:	633b      	str	r3, [r7, #48]	@ 0x30
 80034c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e6      	bne.n	80034a0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3308      	adds	r3, #8
 80034d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3308      	adds	r3, #8
 80034f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034f2:	61fa      	str	r2, [r7, #28]
 80034f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	69b9      	ldr	r1, [r7, #24]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	617b      	str	r3, [r7, #20]
   return(result);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e5      	bne.n	80034d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e012      	b.n	8003540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3758      	adds	r7, #88	@ 0x58
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003558:	e04f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003560:	d04b      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7fd fa69 	bl	8000a38 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <UART_WaitOnFlagUntilTimeout+0x30>
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e04e      	b.n	800361a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d037      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b80      	cmp	r3, #128	@ 0x80
 800358e:	d034      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b40      	cmp	r3, #64	@ 0x40
 8003594:	d031      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d110      	bne.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2208      	movs	r2, #8
 80035aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f838 	bl	8003622 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2208      	movs	r2, #8
 80035b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e029      	b.n	800361a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035d4:	d111      	bne.n	80035fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f81e 	bl	8003622 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e00f      	b.n	800361a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4013      	ands	r3, r2
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	bf0c      	ite	eq
 800360a:	2301      	moveq	r3, #1
 800360c:	2300      	movne	r3, #0
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	429a      	cmp	r2, r3
 8003616:	d0a0      	beq.n	800355a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003622:	b480      	push	{r7}
 8003624:	b095      	sub	sp, #84	@ 0x54
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800363e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003648:	643b      	str	r3, [r7, #64]	@ 0x40
 800364a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800364e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e6      	bne.n	800362a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3308      	adds	r3, #8
 8003662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	61fb      	str	r3, [r7, #28]
   return(result);
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003672:	f023 0301 	bic.w	r3, r3, #1
 8003676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3308      	adds	r3, #8
 800367e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003680:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003682:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e3      	bne.n	800365c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003698:	2b01      	cmp	r3, #1
 800369a:	d118      	bne.n	80036ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f023 0310 	bic.w	r3, r3, #16
 80036b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6979      	ldr	r1, [r7, #20]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	613b      	str	r3, [r7, #16]
   return(result);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e6      	bne.n	800369c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80036e2:	bf00      	nop
 80036e4:	3754      	adds	r7, #84	@ 0x54
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_UARTEx_DisableFifoMode+0x16>
 8003700:	2302      	movs	r3, #2
 8003702:	e027      	b.n	8003754 <HAL_UARTEx_DisableFifoMode+0x66>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2224      	movs	r2, #36	@ 0x24
 8003710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003732:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003774:	2302      	movs	r3, #2
 8003776:	e02d      	b.n	80037d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2224      	movs	r2, #36	@ 0x24
 8003784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f84f 	bl	8003858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e02d      	b.n	8003850 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2224      	movs	r2, #36	@ 0x24
 8003800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f811 	bl	8003858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003864:	2b00      	cmp	r3, #0
 8003866:	d108      	bne.n	800387a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003878:	e031      	b.n	80038de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800387a:	2308      	movs	r3, #8
 800387c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800387e:	2308      	movs	r3, #8
 8003880:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	0e5b      	lsrs	r3, r3, #25
 800388a:	b2db      	uxtb	r3, r3
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	0f5b      	lsrs	r3, r3, #29
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038a2:	7bbb      	ldrb	r3, [r7, #14]
 80038a4:	7b3a      	ldrb	r2, [r7, #12]
 80038a6:	4911      	ldr	r1, [pc, #68]	@ (80038ec <UARTEx_SetNbDataToProcess+0x94>)
 80038a8:	5c8a      	ldrb	r2, [r1, r2]
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038ae:	7b3a      	ldrb	r2, [r7, #12]
 80038b0:	490f      	ldr	r1, [pc, #60]	@ (80038f0 <UARTEx_SetNbDataToProcess+0x98>)
 80038b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	7b7a      	ldrb	r2, [r7, #13]
 80038c4:	4909      	ldr	r1, [pc, #36]	@ (80038ec <UARTEx_SetNbDataToProcess+0x94>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
 80038c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038cc:	7b7a      	ldrb	r2, [r7, #13]
 80038ce:	4908      	ldr	r1, [pc, #32]	@ (80038f0 <UARTEx_SetNbDataToProcess+0x98>)
 80038d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80038de:	bf00      	nop
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	080070a4 	.word	0x080070a4
 80038f0:	080070ac 	.word	0x080070ac

080038f4 <synchronize_UART>:
 #define CLASS_NUMBER 5

  void synchronize_UART(void);
  void synchronize_UART(void)

  {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0

      bool is_synced = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	71fb      	strb	r3, [r7, #7]

      unsigned char rx[2] = {0};
 80038fe:	2300      	movs	r3, #0
 8003900:	80bb      	strh	r3, [r7, #4]

      unsigned char tx[2] = {ACKNOWLEDGE, 0};
 8003902:	23cd      	movs	r3, #205	@ 0xcd
 8003904:	803b      	strh	r3, [r7, #0]

      while (!is_synced)
 8003906:	e012      	b.n	800392e <synchronize_UART+0x3a>

      {

        HAL_UART_Receive(&huart2, (uint8_t *)rx, sizeof(rx), TIMEOUT);
 8003908:	1d39      	adds	r1, r7, #4
 800390a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800390e:	2202      	movs	r2, #2
 8003910:	480c      	ldr	r0, [pc, #48]	@ (8003944 <synchronize_UART+0x50>)
 8003912:	f7ff f907 	bl	8002b24 <HAL_UART_Receive>

        if (rx[0] == SYNCHRONISATION)
 8003916:	793b      	ldrb	r3, [r7, #4]
 8003918:	2bab      	cmp	r3, #171	@ 0xab
 800391a:	d108      	bne.n	800392e <synchronize_UART+0x3a>

        {

          HAL_UART_Transmit(&huart2, (uint8_t *)tx, sizeof(tx), TIMEOUT);
 800391c:	4639      	mov	r1, r7
 800391e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003922:	2202      	movs	r2, #2
 8003924:	4807      	ldr	r0, [pc, #28]	@ (8003944 <synchronize_UART+0x50>)
 8003926:	f7ff f86f 	bl	8002a08 <HAL_UART_Transmit>

          is_synced = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	71fb      	strb	r3, [r7, #7]
      while (!is_synced)
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	f083 0301 	eor.w	r3, r3, #1
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e6      	bne.n	8003908 <synchronize_UART+0x14>

        }

      }

      return;
 800393a:	bf00      	nop

  }
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	2000099c 	.word	0x2000099c

08003948 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d009      	beq.n	800396c <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8003958:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800395a:	461a      	mov	r2, r3
        err.type, err.code);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003962:	6839      	ldr	r1, [r7, #0]
 8003964:	4807      	ldr	r0, [pc, #28]	@ (8003984 <ai_log_err+0x3c>)
 8003966:	f002 faf5 	bl	8005f54 <iprintf>
 800396a:	e009      	b.n	8003980 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800396c:	793b      	ldrb	r3, [r7, #4]
 800396e:	4619      	mov	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8003976:	461a      	mov	r2, r3
 8003978:	4803      	ldr	r0, [pc, #12]	@ (8003988 <ai_log_err+0x40>)
 800397a:	f002 faeb 	bl	8005f54 <iprintf>

  do {} while (1);
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	e7fd      	b.n	8003980 <ai_log_err+0x38>
 8003984:	08006e80 	.word	0x08006e80
 8003988:	08006eb4 	.word	0x08006eb4

0800398c <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_colab_create_and_init(&colab, act_addr, NULL);
 8003994:	2200      	movs	r2, #0
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4828      	ldr	r0, [pc, #160]	@ (8003a3c <ai_boostrap+0xb0>)
 800399a:	f000 fb33 	bl	8004004 <ai_colab_create_and_init>
 800399e:	4603      	mov	r3, r0
 80039a0:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 80039a2:	7b3b      	ldrb	r3, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d006      	beq.n	80039b6 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_colab_create_and_init");
 80039a8:	4925      	ldr	r1, [pc, #148]	@ (8003a40 <ai_boostrap+0xb4>)
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff ffcc 	bl	8003948 <ai_log_err>
    return -1;
 80039b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039b4:	e03e      	b.n	8003a34 <ai_boostrap+0xa8>
  }

  ai_input = ai_colab_inputs_get(colab, NULL);
 80039b6:	4b21      	ldr	r3, [pc, #132]	@ (8003a3c <ai_boostrap+0xb0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2100      	movs	r1, #0
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 fb9f 	bl	8004100 <ai_colab_inputs_get>
 80039c2:	4603      	mov	r3, r0
 80039c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a44 <ai_boostrap+0xb8>)
 80039c6:	6013      	str	r3, [r2, #0]
  ai_output = ai_colab_outputs_get(colab, NULL);
 80039c8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a3c <ai_boostrap+0xb0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fbb0 	bl	8004134 <ai_colab_outputs_get>
 80039d4:	4603      	mov	r3, r0
 80039d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a48 <ai_boostrap+0xbc>)
 80039d8:	6013      	str	r3, [r2, #0]

#if defined(AI_COLAB_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_COLAB_IN_NUM; idx++) {
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	e00f      	b.n	8003a00 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 80039e0:	4b18      	ldr	r3, [pc, #96]	@ (8003a44 <ai_boostrap+0xb8>)
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4613      	mov	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	4916      	ldr	r1, [pc, #88]	@ (8003a4c <ai_boostrap+0xc0>)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_COLAB_IN_NUM; idx++) {
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	3301      	adds	r3, #1
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	ddec      	ble.n	80039e0 <ai_boostrap+0x54>

#if defined(AI_COLAB_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_COLAB_OUT_NUM; idx++) {
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	e00f      	b.n	8003a2c <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a48 <ai_boostrap+0xbc>)
 8003a0e:	6819      	ldr	r1, [r3, #0]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4613      	mov	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	490c      	ldr	r1, [pc, #48]	@ (8003a50 <ai_boostrap+0xc4>)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_COLAB_OUT_NUM; idx++) {
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	ddec      	ble.n	8003a0c <ai_boostrap+0x80>
  for (int idx=0; idx < AI_COLAB_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20000d40 	.word	0x20000d40
 8003a40:	08006ee4 	.word	0x08006ee4
 8003a44:	20000d44 	.word	0x20000d44
 8003a48:	20000d48 	.word	0x20000d48
 8003a4c:	20000a38 	.word	0x20000a38
 8003a50:	20000a3c 	.word	0x20000a3c

08003a54 <ai_run>:

static int ai_run(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_colab_run(colab, ai_input, ai_output);
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a98 <ai_run+0x44>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8003a9c <ai_run+0x48>)
 8003a60:	6811      	ldr	r1, [r2, #0]
 8003a62:	4a0f      	ldr	r2, [pc, #60]	@ (8003aa0 <ai_run+0x4c>)
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fbba 	bl	80041e0 <ai_colab_run>
 8003a6c:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d00c      	beq.n	8003a8e <ai_run+0x3a>
    ai_log_err(ai_colab_get_error(colab),
 8003a74:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <ai_run+0x44>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 faa1 	bl	8003fc0 <ai_colab_get_error>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4908      	ldr	r1, [pc, #32]	@ (8003aa4 <ai_run+0x50>)
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ff60 	bl	8003948 <ai_log_err>
        "ai_colab_run");
    return -1;
 8003a88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a8c:	e000      	b.n	8003a90 <ai_run+0x3c>
  }

  return 0;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20000d40 	.word	0x20000d40
 8003a9c:	20000d44 	.word	0x20000d44
 8003aa0:	20000d48 	.word	0x20000d48
 8003aa4:	08006f00 	.word	0x08006f00

08003aa8 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08e      	sub	sp, #56	@ 0x38
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  for (int idx=0; idx < AI_MNIST_IN_NUM; idx++ )
  {
      data[idx] = ....
  }
  */
	unsigned char tmp[BYTES_IN_FLOATS]={0};
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	f107 0310 	add.w	r3, r7, #16
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
	int num_elements = sizeof(tmp) / sizeof(tmp[0]);
 8003ac2:	2314      	movs	r3, #20
 8003ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
	int num_floats = num_elements / 4;
 8003ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	da00      	bge.n	8003ace <acquire_and_process_data+0x26>
 8003acc:	3303      	adds	r3, #3
 8003ace:	109b      	asrs	r3, r3, #2
 8003ad0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, (uint8_t *)tmp, sizeof(tmp), TIMEOUT);
 8003ad2:	f107 010c 	add.w	r1, r7, #12
 8003ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ada:	2214      	movs	r2, #20
 8003adc:	482c      	ldr	r0, [pc, #176]	@ (8003b90 <acquire_and_process_data+0xe8>)
 8003ade:	f7ff f821 	bl	8002b24 <HAL_UART_Receive>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	if (status != HAL_OK)
 8003ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <acquire_and_process_data+0x58>
	{

	      printf("Failed to receive data from UART. Error code: %d\n", status);
 8003af0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003af4:	4619      	mov	r1, r3
 8003af6:	4827      	ldr	r0, [pc, #156]	@ (8003b94 <acquire_and_process_data+0xec>)
 8003af8:	f002 fa2c 	bl	8005f54 <iprintf>

	      return (1);
 8003afc:	2301      	movs	r3, #1
 8003afe:	e042      	b.n	8003b86 <acquire_and_process_data+0xde>

	    // 3. Reconstruct floats from bytes

	    //

	    if (num_elements % 4 != 0)
 8003b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d004      	beq.n	8003b14 <acquire_and_process_data+0x6c>

	    {

	      printf("The array length is not a multiple of 4 bytes. Cannot reconstruct floats.\n");
 8003b0a:	4823      	ldr	r0, [pc, #140]	@ (8003b98 <acquire_and_process_data+0xf0>)
 8003b0c:	f002 fa8a 	bl	8006024 <puts>

	      return (1);
 8003b10:	2301      	movs	r3, #1
 8003b12:	e038      	b.n	8003b86 <acquire_and_process_data+0xde>

	    }

	    for (size_t i = 0; i < num_floats; i++)
 8003b14:	2300      	movs	r3, #0
 8003b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b18:	e030      	b.n	8003b7c <acquire_and_process_data+0xd4>

	    {

	      unsigned char bytes[4] = {0};
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]

	      // Reconstruction of the bytes

	      for (size_t j = 0; j < 4; j++)
 8003b1e:	2300      	movs	r3, #0
 8003b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b22:	e010      	b.n	8003b46 <acquire_and_process_data+0x9e>

	      {

	        bytes[j] = tmp[i * 4 + j];
 8003b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b26:	009a      	lsls	r2, r3, #2
 8003b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3338      	adds	r3, #56	@ 0x38
 8003b2e:	443b      	add	r3, r7
 8003b30:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
 8003b34:	f107 0208 	add.w	r2, r7, #8
 8003b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3a:	4413      	add	r3, r2
 8003b3c:	460a      	mov	r2, r1
 8003b3e:	701a      	strb	r2, [r3, #0]
	      for (size_t j = 0; j < 4; j++)
 8003b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b42:	3301      	adds	r3, #1
 8003b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d9eb      	bls.n	8003b24 <acquire_and_process_data+0x7c>

	      }

	      // Store the bytes in 'data'

	      for (size_t k = 0; k < 4; k++)
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b50:	e00e      	b.n	8003b70 <acquire_and_process_data+0xc8>

	      {

	        ((uint8_t *)data)[(i * 4 + k)] = bytes[k];
 8003b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b54:	009a      	lsls	r2, r3, #2
 8003b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b58:	4413      	add	r3, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f107 0108 	add.w	r1, r7, #8
 8003b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b64:	440a      	add	r2, r1
 8003b66:	7812      	ldrb	r2, [r2, #0]
 8003b68:	701a      	strb	r2, [r3, #0]
	      for (size_t k = 0; k < 4; k++)
 8003b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d9ed      	bls.n	8003b52 <acquire_and_process_data+0xaa>
	    for (size_t i = 0; i < num_floats; i++)
 8003b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b78:	3301      	adds	r3, #1
 8003b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d3ca      	bcc.n	8003b1a <acquire_and_process_data+0x72>

	      }

	    }
  return 0;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3738      	adds	r7, #56	@ 0x38
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	2000099c 	.word	0x2000099c
 8003b94:	08006f10 	.word	0x08006f10
 8003b98:	08006f44 	.word	0x08006f44

08003b9c <post_process>:


int post_process(ai_i8* data[])
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08e      	sub	sp, #56	@ 0x38
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]

	    // Get the output data

	    //

	    if (data == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d104      	bne.n	8003bb4 <post_process+0x18>

	    {

	      printf("The output data is NULL.\n");
 8003baa:	4838      	ldr	r0, [pc, #224]	@ (8003c8c <post_process+0xf0>)
 8003bac:	f002 fa3a 	bl	8006024 <puts>

	      return (1);
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e066      	b.n	8003c82 <post_process+0xe6>

	    }

	    uint8_t *output = data;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    // An array to store the float outputs

	    float outs[CLASS_NUMBER] = {0.0};
 8003bb8:	f107 0314 	add.w	r3, r7, #20
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	60da      	str	r2, [r3, #12]
 8003bc6:	611a      	str	r2, [r3, #16]

	    uint8_t outs_uint8[CLASS_NUMBER] = {0};
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	743b      	strb	r3, [r7, #16]

	    /* Convert the probability to float */

	    for (size_t i = 0; i < CLASS_NUMBER; i++)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bd4:	e03a      	b.n	8003c4c <post_process+0xb0>

	    {

	      uint8_t temp[4] = {0};
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]

	      // Extract 4 bytes to reconstruct a float

	      for (size_t j = 0; j < 4; j++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bde:	e00f      	b.n	8003c00 <post_process+0x64>

	      {

	        temp[j] = output[i * 4 + j];
 8003be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be2:	009a      	lsls	r2, r3, #2
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	4413      	add	r3, r2
 8003be8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bea:	4413      	add	r3, r2
 8003bec:	7819      	ldrb	r1, [r3, #0]
 8003bee:	f107 0208 	add.w	r2, r7, #8
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf4:	4413      	add	r3, r2
 8003bf6:	460a      	mov	r2, r1
 8003bf8:	701a      	strb	r2, [r3, #0]
	      for (size_t j = 0; j < 4; j++)
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d9ec      	bls.n	8003be0 <post_process+0x44>

	      }

	      // Reconstruct the float from the bytes

	      outs[i] = *(float *)&temp;
 8003c06:	f107 0308 	add.w	r3, r7, #8
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	3338      	adds	r3, #56	@ 0x38
 8003c12:	443b      	add	r3, r7
 8003c14:	3b24      	subs	r3, #36	@ 0x24
 8003c16:	601a      	str	r2, [r3, #0]

	      // Convert the float to uint8_t for UART transmission

	      outs_uint8[i] = (char)(outs[i] * 255);
 8003c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	3338      	adds	r3, #56	@ 0x38
 8003c1e:	443b      	add	r3, r7
 8003c20:	3b24      	subs	r3, #36	@ 0x24
 8003c22:	edd3 7a00 	vldr	s15, [r3]
 8003c26:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003c90 <post_process+0xf4>
 8003c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c32:	edc7 7a00 	vstr	s15, [r7]
 8003c36:	783b      	ldrb	r3, [r7, #0]
 8003c38:	b2d9      	uxtb	r1, r3
 8003c3a:	f107 020c 	add.w	r2, r7, #12
 8003c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c40:	4413      	add	r3, r2
 8003c42:	460a      	mov	r2, r1
 8003c44:	701a      	strb	r2, [r3, #0]
	    for (size_t i = 0; i < CLASS_NUMBER; i++)
 8003c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c48:	3301      	adds	r3, #1
 8003c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d9c1      	bls.n	8003bd6 <post_process+0x3a>

	// Transmit the output data

	//

	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t *)outs_uint8, sizeof(outs_uint8), TIMEOUT);
 8003c52:	f107 010c 	add.w	r1, r7, #12
 8003c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c5a:	2205      	movs	r2, #5
 8003c5c:	480d      	ldr	r0, [pc, #52]	@ (8003c94 <post_process+0xf8>)
 8003c5e:	f7fe fed3 	bl	8002a08 <HAL_UART_Transmit>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	// Check the return status of HAL_UART_Transmit

	if (status != HAL_OK)
 8003c68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <post_process+0xe4>

	{

	printf("Failed to transmit data to UART. Error code: %d\n", status);
 8003c70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c74:	4619      	mov	r1, r3
 8003c76:	4808      	ldr	r0, [pc, #32]	@ (8003c98 <post_process+0xfc>)
 8003c78:	f002 f96c 	bl	8005f54 <iprintf>

	return (1);
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <post_process+0xe6>

	}

	return 0;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3738      	adds	r7, #56	@ 0x38
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	08006f90 	.word	0x08006f90
 8003c90:	437f0000 	.word	0x437f0000
 8003c94:	2000099c 	.word	0x2000099c
 8003c98:	08006fac 	.word	0x08006fac

08003c9c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8003ca0:	4803      	ldr	r0, [pc, #12]	@ (8003cb0 <MX_X_CUBE_AI_Init+0x14>)
 8003ca2:	f002 f9bf 	bl	8006024 <puts>

  ai_boostrap(data_activations0);
 8003ca6:	4803      	ldr	r0, [pc, #12]	@ (8003cb4 <MX_X_CUBE_AI_Init+0x18>)
 8003ca8:	f7ff fe70 	bl	800398c <ai_boostrap>
    /* USER CODE END 5 */
}
 8003cac:	bf00      	nop
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	08006fe0 	.word	0x08006fe0
 8003cb4:	2000000c 	.word	0x2000000c

08003cb8 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */

  int res = -1;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003cc2:	60fb      	str	r3, [r7, #12]

  uint8_t *in_data = ai_input[0].data;
 8003cc4:	4b19      	ldr	r3, [pc, #100]	@ (8003d2c <MX_X_CUBE_AI_Process+0x74>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	60bb      	str	r3, [r7, #8]

  uint8_t *out_data = ai_output[0].data;
 8003ccc:	4b18      	ldr	r3, [pc, #96]	@ (8003d30 <MX_X_CUBE_AI_Process+0x78>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	607b      	str	r3, [r7, #4]

  synchronize_UART();
 8003cd4:	f7ff fe0e 	bl	80038f4 <synchronize_UART>

  if (colab) {
 8003cd8:	4b16      	ldr	r3, [pc, #88]	@ (8003d34 <MX_X_CUBE_AI_Process+0x7c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d013      	beq.n	8003d08 <MX_X_CUBE_AI_Process+0x50>

    do {

      /* 1 - acquire and pre-process input data */

      res = acquire_and_process_data(in_data);
 8003ce0:	68b8      	ldr	r0, [r7, #8]
 8003ce2:	f7ff fee1 	bl	8003aa8 <acquire_and_process_data>
 8003ce6:	60f8      	str	r0, [r7, #12]

      /* 2 - process the data - call inference engine */

      if (res == 0)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d102      	bne.n	8003cf4 <MX_X_CUBE_AI_Process+0x3c>

        res = ai_run();
 8003cee:	f7ff feb1 	bl	8003a54 <ai_run>
 8003cf2:	60f8      	str	r0, [r7, #12]

      /* 3- post-process the predictions */

      if (res == 0)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d103      	bne.n	8003d02 <MX_X_CUBE_AI_Process+0x4a>

        res = post_process(out_data);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff ff4e 	bl	8003b9c <post_process>
 8003d00:	60f8      	str	r0, [r7, #12]

    } while (res==0);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0eb      	beq.n	8003ce0 <MX_X_CUBE_AI_Process+0x28>

  }

  if (res) {
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <MX_X_CUBE_AI_Process+0x6c>

    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8003d0e:	2311      	movs	r3, #17
 8003d10:	703b      	strb	r3, [r7, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2210      	movs	r2, #16
 8003d16:	f362 231f 	bfi	r3, r2, #8, #24
 8003d1a:	603b      	str	r3, [r7, #0]

    ai_log_err(err, "Process has FAILED");
 8003d1c:	4906      	ldr	r1, [pc, #24]	@ (8003d38 <MX_X_CUBE_AI_Process+0x80>)
 8003d1e:	6838      	ldr	r0, [r7, #0]
 8003d20:	f7ff fe12 	bl	8003948 <ai_log_err>

  }

    /* USER CODE END 6 */
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000d44 	.word	0x20000d44
 8003d30:	20000d48 	.word	0x20000d48
 8003d34:	20000d40 	.word	0x20000d40
 8003d38:	08007000 	.word	0x08007000

08003d3c <colab_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool colab_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_colab_activations_map, 1, params)) {
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	2101      	movs	r1, #1
 8003d4a:	4836      	ldr	r0, [pc, #216]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003d4c:	f000 fb22 	bl	8004394 <ai_platform_get_activations_map>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d05b      	beq.n	8003e0e <colab_configure_activations+0xd2>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_colab_activations_map[0] + 236);
 8003d56:	4b33      	ldr	r3, [pc, #204]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	33ec      	adds	r3, #236	@ 0xec
 8003d5c:	4a32      	ldr	r2, [pc, #200]	@ (8003e28 <colab_configure_activations+0xec>)
 8003d5e:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_colab_activations_map[0] + 236);
 8003d60:	4b30      	ldr	r3, [pc, #192]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	33ec      	adds	r3, #236	@ 0xec
 8003d66:	4a30      	ldr	r2, [pc, #192]	@ (8003e28 <colab_configure_activations+0xec>)
 8003d68:	60d3      	str	r3, [r2, #12]
    dense_4_dense_output_array.data = AI_PTR(g_colab_activations_map[0] + 256);
 8003d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003d72:	4a2e      	ldr	r2, [pc, #184]	@ (8003e2c <colab_configure_activations+0xf0>)
 8003d74:	6093      	str	r3, [r2, #8]
    dense_4_dense_output_array.data_start = AI_PTR(g_colab_activations_map[0] + 256);
 8003d76:	4b2b      	ldr	r3, [pc, #172]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003d7e:	4a2b      	ldr	r2, [pc, #172]	@ (8003e2c <colab_configure_activations+0xf0>)
 8003d80:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(g_colab_activations_map[0] + 256);
 8003d82:	4b28      	ldr	r3, [pc, #160]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003d8a:	4a29      	ldr	r2, [pc, #164]	@ (8003e30 <colab_configure_activations+0xf4>)
 8003d8c:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(g_colab_activations_map[0] + 256);
 8003d8e:	4b25      	ldr	r3, [pc, #148]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003d96:	4a26      	ldr	r2, [pc, #152]	@ (8003e30 <colab_configure_activations+0xf4>)
 8003d98:	60d3      	str	r3, [r2, #12]
    dense_5_dense_output_array.data = AI_PTR(g_colab_activations_map[0] + 0);
 8003d9a:	4b22      	ldr	r3, [pc, #136]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a25      	ldr	r2, [pc, #148]	@ (8003e34 <colab_configure_activations+0xf8>)
 8003da0:	6093      	str	r3, [r2, #8]
    dense_5_dense_output_array.data_start = AI_PTR(g_colab_activations_map[0] + 0);
 8003da2:	4b20      	ldr	r3, [pc, #128]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a23      	ldr	r2, [pc, #140]	@ (8003e34 <colab_configure_activations+0xf8>)
 8003da8:	60d3      	str	r3, [r2, #12]
    dense_5_output_array.data = AI_PTR(g_colab_activations_map[0] + 256);
 8003daa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003db2:	4a21      	ldr	r2, [pc, #132]	@ (8003e38 <colab_configure_activations+0xfc>)
 8003db4:	6093      	str	r3, [r2, #8]
    dense_5_output_array.data_start = AI_PTR(g_colab_activations_map[0] + 256);
 8003db6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8003e38 <colab_configure_activations+0xfc>)
 8003dc0:	60d3      	str	r3, [r2, #12]
    dense_6_dense_output_array.data = AI_PTR(g_colab_activations_map[0] + 0);
 8003dc2:	4b18      	ldr	r3, [pc, #96]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e3c <colab_configure_activations+0x100>)
 8003dc8:	6093      	str	r3, [r2, #8]
    dense_6_dense_output_array.data_start = AI_PTR(g_colab_activations_map[0] + 0);
 8003dca:	4b16      	ldr	r3, [pc, #88]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1b      	ldr	r2, [pc, #108]	@ (8003e3c <colab_configure_activations+0x100>)
 8003dd0:	60d3      	str	r3, [r2, #12]
    dense_6_output_array.data = AI_PTR(g_colab_activations_map[0] + 128);
 8003dd2:	4b14      	ldr	r3, [pc, #80]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3380      	adds	r3, #128	@ 0x80
 8003dd8:	4a19      	ldr	r2, [pc, #100]	@ (8003e40 <colab_configure_activations+0x104>)
 8003dda:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(g_colab_activations_map[0] + 128);
 8003ddc:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3380      	adds	r3, #128	@ 0x80
 8003de2:	4a17      	ldr	r2, [pc, #92]	@ (8003e40 <colab_configure_activations+0x104>)
 8003de4:	60d3      	str	r3, [r2, #12]
    dense_7_dense_output_array.data = AI_PTR(g_colab_activations_map[0] + 0);
 8003de6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a16      	ldr	r2, [pc, #88]	@ (8003e44 <colab_configure_activations+0x108>)
 8003dec:	6093      	str	r3, [r2, #8]
    dense_7_dense_output_array.data_start = AI_PTR(g_colab_activations_map[0] + 0);
 8003dee:	4b0d      	ldr	r3, [pc, #52]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a14      	ldr	r2, [pc, #80]	@ (8003e44 <colab_configure_activations+0x108>)
 8003df4:	60d3      	str	r3, [r2, #12]
    dense_7_output_array.data = AI_PTR(g_colab_activations_map[0] + 20);
 8003df6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3314      	adds	r3, #20
 8003dfc:	4a12      	ldr	r2, [pc, #72]	@ (8003e48 <colab_configure_activations+0x10c>)
 8003dfe:	6093      	str	r3, [r2, #8]
    dense_7_output_array.data_start = AI_PTR(g_colab_activations_map[0] + 20);
 8003e00:	4b08      	ldr	r3, [pc, #32]	@ (8003e24 <colab_configure_activations+0xe8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3314      	adds	r3, #20
 8003e06:	4a10      	ldr	r2, [pc, #64]	@ (8003e48 <colab_configure_activations+0x10c>)
 8003e08:	60d3      	str	r3, [r2, #12]
    return true;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e005      	b.n	8003e1a <colab_configure_activations+0xde>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8003e0e:	2213      	movs	r2, #19
 8003e10:	2130      	movs	r1, #48	@ 0x30
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fb40 	bl	8004498 <ai_platform_network_set_error>
  return false;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000d4c 	.word	0x20000d4c
 8003e28:	20000010 	.word	0x20000010
 8003e2c:	20000020 	.word	0x20000020
 8003e30:	20000030 	.word	0x20000030
 8003e34:	20000040 	.word	0x20000040
 8003e38:	20000050 	.word	0x20000050
 8003e3c:	20000060 	.word	0x20000060
 8003e40:	20000070 	.word	0x20000070
 8003e44:	20000080 	.word	0x20000080
 8003e48:	20000090 	.word	0x20000090

08003e4c <colab_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool colab_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_colab_weights_map, 1, params)) {
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4850      	ldr	r0, [pc, #320]	@ (8003f9c <colab_configure_weights+0x150>)
 8003e5c:	f000 fa46 	bl	80042ec <ai_platform_get_weights_map>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 8090 	beq.w	8003f88 <colab_configure_weights+0x13c>
    /* Updating weights (byte) offsets */
    
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003e68:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa0 <colab_configure_weights+0x154>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e70:	4a4b      	ldr	r2, [pc, #300]	@ (8003fa0 <colab_configure_weights+0x154>)
 8003e72:	6013      	str	r3, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(g_colab_weights_map[0] + 0);
 8003e74:	4b49      	ldr	r3, [pc, #292]	@ (8003f9c <colab_configure_weights+0x150>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a49      	ldr	r2, [pc, #292]	@ (8003fa0 <colab_configure_weights+0x154>)
 8003e7a:	6093      	str	r3, [r2, #8]
    dense_4_dense_weights_array.data_start = AI_PTR(g_colab_weights_map[0] + 0);
 8003e7c:	4b47      	ldr	r3, [pc, #284]	@ (8003f9c <colab_configure_weights+0x150>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a47      	ldr	r2, [pc, #284]	@ (8003fa0 <colab_configure_weights+0x154>)
 8003e82:	60d3      	str	r3, [r2, #12]
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003e84:	4b47      	ldr	r3, [pc, #284]	@ (8003fa4 <colab_configure_weights+0x158>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e8c:	4a45      	ldr	r2, [pc, #276]	@ (8003fa4 <colab_configure_weights+0x158>)
 8003e8e:	6013      	str	r3, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(g_colab_weights_map[0] + 2560);
 8003e90:	4b42      	ldr	r3, [pc, #264]	@ (8003f9c <colab_configure_weights+0x150>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f503 6320 	add.w	r3, r3, #2560	@ 0xa00
 8003e98:	4a42      	ldr	r2, [pc, #264]	@ (8003fa4 <colab_configure_weights+0x158>)
 8003e9a:	6093      	str	r3, [r2, #8]
    dense_4_dense_bias_array.data_start = AI_PTR(g_colab_weights_map[0] + 2560);
 8003e9c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f9c <colab_configure_weights+0x150>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f503 6320 	add.w	r3, r3, #2560	@ 0xa00
 8003ea4:	4a3f      	ldr	r2, [pc, #252]	@ (8003fa4 <colab_configure_weights+0x158>)
 8003ea6:	60d3      	str	r3, [r2, #12]
    dense_5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8003fa8 <colab_configure_weights+0x15c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003eb0:	4a3d      	ldr	r2, [pc, #244]	@ (8003fa8 <colab_configure_weights+0x15c>)
 8003eb2:	6013      	str	r3, [r2, #0]
    dense_5_dense_weights_array.data = AI_PTR(g_colab_weights_map[0] + 3072);
 8003eb4:	4b39      	ldr	r3, [pc, #228]	@ (8003f9c <colab_configure_weights+0x150>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8003ebc:	4a3a      	ldr	r2, [pc, #232]	@ (8003fa8 <colab_configure_weights+0x15c>)
 8003ebe:	6093      	str	r3, [r2, #8]
    dense_5_dense_weights_array.data_start = AI_PTR(g_colab_weights_map[0] + 3072);
 8003ec0:	4b36      	ldr	r3, [pc, #216]	@ (8003f9c <colab_configure_weights+0x150>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8003ec8:	4a37      	ldr	r2, [pc, #220]	@ (8003fa8 <colab_configure_weights+0x15c>)
 8003eca:	60d3      	str	r3, [r2, #12]
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003ecc:	4b37      	ldr	r3, [pc, #220]	@ (8003fac <colab_configure_weights+0x160>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ed4:	4a35      	ldr	r2, [pc, #212]	@ (8003fac <colab_configure_weights+0x160>)
 8003ed6:	6013      	str	r3, [r2, #0]
    dense_5_dense_bias_array.data = AI_PTR(g_colab_weights_map[0] + 35840);
 8003ed8:	4b30      	ldr	r3, [pc, #192]	@ (8003f9c <colab_configure_weights+0x150>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f503 430c 	add.w	r3, r3, #35840	@ 0x8c00
 8003ee0:	4a32      	ldr	r2, [pc, #200]	@ (8003fac <colab_configure_weights+0x160>)
 8003ee2:	6093      	str	r3, [r2, #8]
    dense_5_dense_bias_array.data_start = AI_PTR(g_colab_weights_map[0] + 35840);
 8003ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f9c <colab_configure_weights+0x150>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f503 430c 	add.w	r3, r3, #35840	@ 0x8c00
 8003eec:	4a2f      	ldr	r2, [pc, #188]	@ (8003fac <colab_configure_weights+0x160>)
 8003eee:	60d3      	str	r3, [r2, #12]
    dense_6_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb0 <colab_configure_weights+0x164>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb0 <colab_configure_weights+0x164>)
 8003efa:	6013      	str	r3, [r2, #0]
    dense_6_dense_weights_array.data = AI_PTR(g_colab_weights_map[0] + 36096);
 8003efc:	4b27      	ldr	r3, [pc, #156]	@ (8003f9c <colab_configure_weights+0x150>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f503 430d 	add.w	r3, r3, #36096	@ 0x8d00
 8003f04:	4a2a      	ldr	r2, [pc, #168]	@ (8003fb0 <colab_configure_weights+0x164>)
 8003f06:	6093      	str	r3, [r2, #8]
    dense_6_dense_weights_array.data_start = AI_PTR(g_colab_weights_map[0] + 36096);
 8003f08:	4b24      	ldr	r3, [pc, #144]	@ (8003f9c <colab_configure_weights+0x150>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f503 430d 	add.w	r3, r3, #36096	@ 0x8d00
 8003f10:	4a27      	ldr	r2, [pc, #156]	@ (8003fb0 <colab_configure_weights+0x164>)
 8003f12:	60d3      	str	r3, [r2, #12]
    dense_6_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003f14:	4b27      	ldr	r3, [pc, #156]	@ (8003fb4 <colab_configure_weights+0x168>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f1c:	4a25      	ldr	r2, [pc, #148]	@ (8003fb4 <colab_configure_weights+0x168>)
 8003f1e:	6013      	str	r3, [r2, #0]
    dense_6_dense_bias_array.data = AI_PTR(g_colab_weights_map[0] + 44288);
 8003f20:	4b1e      	ldr	r3, [pc, #120]	@ (8003f9c <colab_configure_weights+0x150>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f503 432d 	add.w	r3, r3, #44288	@ 0xad00
 8003f28:	4a22      	ldr	r2, [pc, #136]	@ (8003fb4 <colab_configure_weights+0x168>)
 8003f2a:	6093      	str	r3, [r2, #8]
    dense_6_dense_bias_array.data_start = AI_PTR(g_colab_weights_map[0] + 44288);
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f9c <colab_configure_weights+0x150>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f503 432d 	add.w	r3, r3, #44288	@ 0xad00
 8003f34:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb4 <colab_configure_weights+0x168>)
 8003f36:	60d3      	str	r3, [r2, #12]
    dense_7_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003f38:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb8 <colab_configure_weights+0x16c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f40:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb8 <colab_configure_weights+0x16c>)
 8003f42:	6013      	str	r3, [r2, #0]
    dense_7_dense_weights_array.data = AI_PTR(g_colab_weights_map[0] + 44416);
 8003f44:	4b15      	ldr	r3, [pc, #84]	@ (8003f9c <colab_configure_weights+0x150>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f503 432d 	add.w	r3, r3, #44288	@ 0xad00
 8003f4c:	3380      	adds	r3, #128	@ 0x80
 8003f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fb8 <colab_configure_weights+0x16c>)
 8003f50:	6093      	str	r3, [r2, #8]
    dense_7_dense_weights_array.data_start = AI_PTR(g_colab_weights_map[0] + 44416);
 8003f52:	4b12      	ldr	r3, [pc, #72]	@ (8003f9c <colab_configure_weights+0x150>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f503 432d 	add.w	r3, r3, #44288	@ 0xad00
 8003f5a:	3380      	adds	r3, #128	@ 0x80
 8003f5c:	4a16      	ldr	r2, [pc, #88]	@ (8003fb8 <colab_configure_weights+0x16c>)
 8003f5e:	60d3      	str	r3, [r2, #12]
    dense_7_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003f60:	4b16      	ldr	r3, [pc, #88]	@ (8003fbc <colab_configure_weights+0x170>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f68:	4a14      	ldr	r2, [pc, #80]	@ (8003fbc <colab_configure_weights+0x170>)
 8003f6a:	6013      	str	r3, [r2, #0]
    dense_7_dense_bias_array.data = AI_PTR(g_colab_weights_map[0] + 45056);
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <colab_configure_weights+0x150>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8003f74:	4a11      	ldr	r2, [pc, #68]	@ (8003fbc <colab_configure_weights+0x170>)
 8003f76:	6093      	str	r3, [r2, #8]
    dense_7_dense_bias_array.data_start = AI_PTR(g_colab_weights_map[0] + 45056);
 8003f78:	4b08      	ldr	r3, [pc, #32]	@ (8003f9c <colab_configure_weights+0x150>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8003f80:	4a0e      	ldr	r2, [pc, #56]	@ (8003fbc <colab_configure_weights+0x170>)
 8003f82:	60d3      	str	r3, [r2, #12]
    return true;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e005      	b.n	8003f94 <colab_configure_weights+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8003f88:	2212      	movs	r2, #18
 8003f8a:	2130      	movs	r1, #48	@ 0x30
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fa83 	bl	8004498 <ai_platform_network_set_error>
  return false;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000d50 	.word	0x20000d50
 8003fa0:	200000a0 	.word	0x200000a0
 8003fa4:	200000b0 	.word	0x200000b0
 8003fa8:	200000c0 	.word	0x200000c0
 8003fac:	200000d0 	.word	0x200000d0
 8003fb0:	200000e0 	.word	0x200000e0
 8003fb4:	200000f0 	.word	0x200000f0
 8003fb8:	20000100 	.word	0x20000100
 8003fbc:	20000110 	.word	0x20000110

08003fc0 <ai_colab_get_error>:
}


AI_API_ENTRY
ai_error ai_colab_get_error(ai_handle network)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fa59 	bl	8004480 <ai_platform_network_get_error>
 8003fce:	4603      	mov	r3, r0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <ai_colab_create>:


AI_API_ENTRY
ai_error ai_colab_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	2305      	movs	r3, #5
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	2301      	movs	r3, #1
 8003fec:	4a04      	ldr	r2, [pc, #16]	@ (8004000 <ai_colab_create+0x28>)
 8003fee:	6839      	ldr	r1, [r7, #0]
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fb41 	bl	8004678 <ai_platform_network_create>
 8003ff6:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	2000087c 	.word	0x2000087c

08004004 <ai_colab_create_and_init>:


AI_API_ENTRY
ai_error ai_colab_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b094      	sub	sp, #80	@ 0x50
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_colab_create(network, AI_COLAB_DATA_CONFIG);
 8004010:	2100      	movs	r1, #0
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7ff ffe0 	bl	8003fd8 <ai_colab_create>
 8004018:	4603      	mov	r3, r0
 800401a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 800401c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <ai_colab_create_and_init+0x24>
    return err;
 8004024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004026:	e067      	b.n	80040f8 <ai_colab_create_and_init+0xf4>
  }
  
  if (ai_colab_data_params_get(&params) != true) {
 8004028:	f107 0310 	add.w	r3, r7, #16
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f8e7 	bl	8004200 <ai_colab_data_params_get>
 8004032:	4603      	mov	r3, r0
 8004034:	f083 0301 	eor.w	r3, r3, #1
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <ai_colab_create_and_init+0x4c>
    err = ai_colab_get_error(*network);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ffbc 	bl	8003fc0 <ai_colab_get_error>
 8004048:	4603      	mov	r3, r0
 800404a:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 800404c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800404e:	e053      	b.n	80040f8 <ai_colab_create_and_init+0xf4>
  }
#if defined(AI_COLAB_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8004050:	2300      	movs	r3, #0
 8004052:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004056:	e012      	b.n	800407e <ai_colab_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8004058:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 800405c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	4413      	add	r3, r2
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	f107 0310 	add.w	r3, r7, #16
 800406c:	330c      	adds	r3, #12
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f92c 	bl	80042cc <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8004074:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004078:	3301      	adds	r3, #1
 800407a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d004      	beq.n	800408e <ai_colab_create_and_init+0x8a>
 8004084:	8bfb      	ldrh	r3, [r7, #30]
 8004086:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800408a:	429a      	cmp	r2, r3
 800408c:	d3e4      	bcc.n	8004058 <ai_colab_create_and_init+0x54>
  }
#endif
#if defined(AI_COLAB_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800408e:	2300      	movs	r3, #0
 8004090:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004094:	e012      	b.n	80040bc <ai_colab_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8004096:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800409a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	4413      	add	r3, r2
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	f107 0310 	add.w	r3, r7, #16
 80040aa:	3304      	adds	r3, #4
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 f90d 	bl	80042cc <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80040b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80040b6:	3301      	adds	r3, #1
 80040b8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <ai_colab_create_and_init+0xc8>
 80040c2:	8afb      	ldrh	r3, [r7, #22]
 80040c4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d3e4      	bcc.n	8004096 <ai_colab_create_and_init+0x92>
  }
#endif
  if (ai_colab_init(*network, &params) != true) {
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f107 0210 	add.w	r2, r7, #16
 80040d4:	4611      	mov	r1, r2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f846 	bl	8004168 <ai_colab_init>
 80040dc:	4603      	mov	r3, r0
 80040de:	f083 0301 	eor.w	r3, r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d006      	beq.n	80040f6 <ai_colab_create_and_init+0xf2>
    err = ai_colab_get_error(*network);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff67 	bl	8003fc0 <ai_colab_get_error>
 80040f2:	4603      	mov	r3, r0
 80040f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 80040f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3750      	adds	r7, #80	@ 0x50
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <ai_colab_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_colab_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d104      	bne.n	800411a <ai_colab_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8004110:	4b06      	ldr	r3, [pc, #24]	@ (800412c <ai_colab_inputs_get+0x2c>)
 8004112:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a06      	ldr	r2, [pc, #24]	@ (8004130 <ai_colab_inputs_get+0x30>)
 8004118:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800411a:	6839      	ldr	r1, [r7, #0]
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f9c1 	bl	80044a4 <ai_platform_inputs_get>
 8004122:	4603      	mov	r3, r0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	2000087c 	.word	0x2000087c
 8004130:	a1c00100 	.word	0xa1c00100

08004134 <ai_colab_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_colab_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d104      	bne.n	800414e <ai_colab_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8004144:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <ai_colab_outputs_get+0x2c>)
 8004146:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a06      	ldr	r2, [pc, #24]	@ (8004164 <ai_colab_outputs_get+0x30>)
 800414c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800414e:	6839      	ldr	r1, [r7, #0]
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fa1d 	bl	8004590 <ai_platform_outputs_get>
 8004156:	4603      	mov	r3, r0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	2000087c 	.word	0x2000087c
 8004164:	a1c00100 	.word	0xa1c00100

08004168 <ai_colab_init>:


AI_API_ENTRY
ai_bool ai_colab_init(
  ai_handle network, const ai_network_params* params)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8004172:	6839      	ldr	r1, [r7, #0]
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fac1 	bl	80046fc <ai_platform_network_init>
 800417a:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800417c:	2301      	movs	r3, #1
 800417e:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <ai_colab_init+0x22>
 8004186:	2300      	movs	r3, #0
 8004188:	e026      	b.n	80041d8 <ai_colab_init+0x70>
  ok &= colab_configure_weights(net_ctx, params);
 800418a:	6839      	ldr	r1, [r7, #0]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7ff fe5d 	bl	8003e4c <colab_configure_weights>
 8004192:	4603      	mov	r3, r0
 8004194:	461a      	mov	r2, r3
 8004196:	7afb      	ldrb	r3, [r7, #11]
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf14      	ite	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	2300      	moveq	r3, #0
 80041a2:	72fb      	strb	r3, [r7, #11]
  ok &= colab_configure_activations(net_ctx, params);
 80041a4:	6839      	ldr	r1, [r7, #0]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff fdc8 	bl	8003d3c <colab_configure_activations>
 80041ac:	4603      	mov	r3, r0
 80041ae:	461a      	mov	r2, r3
 80041b0:	7afb      	ldrb	r3, [r7, #11]
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf14      	ite	ne
 80041b8:	2301      	movne	r3, #1
 80041ba:	2300      	moveq	r3, #0
 80041bc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fb6a 	bl	8004898 <ai_platform_network_post_init>
 80041c4:	4603      	mov	r3, r0
 80041c6:	461a      	mov	r2, r3
 80041c8:	7afb      	ldrb	r3, [r7, #11]
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bf14      	ite	ne
 80041d0:	2301      	movne	r3, #1
 80041d2:	2300      	moveq	r3, #0
 80041d4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80041d6:	7afb      	ldrb	r3, [r7, #11]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <ai_colab_run>:


AI_API_ENTRY
ai_i32 ai_colab_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	68b9      	ldr	r1, [r7, #8]
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fb81 	bl	80048f8 <ai_platform_network_process>
 80041f6:	4603      	mov	r3, r0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <ai_colab_data_params_get>:
 * @ingroup colab_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_colab_data_params_get(ai_network_params* params)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <ai_colab_data_params_get+0x12>
 800420e:	2300      	movs	r3, #0
 8004210:	e016      	b.n	8004240 <ai_colab_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8004212:	4a0d      	ldr	r2, [pc, #52]	@ (8004248 <ai_colab_data_params_get+0x48>)
 8004214:	f107 0310 	add.w	r3, r7, #16
 8004218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800421c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_COLAB_DATA_ACTIVATIONS_COUNT, g_colab_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8004220:	4a0a      	ldr	r2, [pc, #40]	@ (800424c <ai_colab_data_params_get+0x4c>)
 8004222:	f107 0308 	add.w	r3, r7, #8
 8004226:	e892 0003 	ldmia.w	r2, {r0, r1}
 800422a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_COLAB_DATA_WEIGHTS_COUNT, g_colab_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800422e:	f107 0210 	add.w	r2, r7, #16
 8004232:	f107 0308 	add.w	r3, r7, #8
 8004236:	4619      	mov	r1, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8ff 	bl	800443c <ai_platform_bind_network_params>
 800423e:	4603      	mov	r3, r0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	08007034 	.word	0x08007034
 800424c:	0800703c 	.word	0x0800703c

08004250 <ai_buffer_get_size>:
 8004250:	b378      	cbz	r0, 80042b2 <ai_buffer_get_size+0x62>
 8004252:	b410      	push	{r4}
 8004254:	6803      	ldr	r3, [r0, #0]
 8004256:	4a17      	ldr	r2, [pc, #92]	@ (80042b4 <ai_buffer_get_size+0x64>)
 8004258:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800425c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004260:	4293      	cmp	r3, r2
 8004262:	d01e      	beq.n	80042a2 <ai_buffer_get_size+0x52>
 8004264:	6984      	ldr	r4, [r0, #24]
 8004266:	6862      	ldr	r2, [r4, #4]
 8004268:	7d03      	ldrb	r3, [r0, #20]
 800426a:	6941      	ldr	r1, [r0, #20]
 800426c:	f1a3 0301 	sub.w	r3, r3, #1
 8004270:	fab3 f383 	clz	r3, r3
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800427a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800427e:	da0b      	bge.n	8004298 <ai_buffer_get_size+0x48>
 8004280:	2b01      	cmp	r3, #1
 8004282:	d102      	bne.n	800428a <ai_buffer_get_size+0x3a>
 8004284:	2802      	cmp	r0, #2
 8004286:	d007      	beq.n	8004298 <ai_buffer_get_size+0x48>
 8004288:	2302      	movs	r3, #2
 800428a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800428e:	3301      	adds	r3, #1
 8004290:	4298      	cmp	r0, r3
 8004292:	fb01 f202 	mul.w	r2, r1, r2
 8004296:	d1f3      	bne.n	8004280 <ai_buffer_get_size+0x30>
 8004298:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800429c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	2900      	cmp	r1, #0
 80042a4:	d0de      	beq.n	8004264 <ai_buffer_get_size+0x14>
 80042a6:	6984      	ldr	r4, [r0, #24]
 80042a8:	6862      	ldr	r2, [r4, #4]
 80042aa:	321f      	adds	r2, #31
 80042ac:	f022 021f 	bic.w	r2, r2, #31
 80042b0:	e7da      	b.n	8004268 <ai_buffer_get_size+0x18>
 80042b2:	4770      	bx	lr
 80042b4:	000400c0 	.word	0x000400c0

080042b8 <ai_buffer_array_sane>:
 80042b8:	b138      	cbz	r0, 80042ca <ai_buffer_array_sane+0x12>
 80042ba:	6843      	ldr	r3, [r0, #4]
 80042bc:	b123      	cbz	r3, 80042c8 <ai_buffer_array_sane+0x10>
 80042be:	8840      	ldrh	r0, [r0, #2]
 80042c0:	3800      	subs	r0, #0
 80042c2:	bf18      	it	ne
 80042c4:	2001      	movne	r0, #1
 80042c6:	4770      	bx	lr
 80042c8:	4618      	mov	r0, r3
 80042ca:	4770      	bx	lr

080042cc <ai_buffer_array_item_set_address>:
 80042cc:	b150      	cbz	r0, 80042e4 <ai_buffer_array_item_set_address+0x18>
 80042ce:	6843      	ldr	r3, [r0, #4]
 80042d0:	b14b      	cbz	r3, 80042e6 <ai_buffer_array_item_set_address+0x1a>
 80042d2:	8840      	ldrh	r0, [r0, #2]
 80042d4:	b900      	cbnz	r0, 80042d8 <ai_buffer_array_item_set_address+0xc>
 80042d6:	4770      	bx	lr
 80042d8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80042dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80042e0:	2001      	movs	r0, #1
 80042e2:	605a      	str	r2, [r3, #4]
 80042e4:	4770      	bx	lr
 80042e6:	4618      	mov	r0, r3
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop

080042ec <ai_platform_get_weights_map>:
 80042ec:	2a00      	cmp	r2, #0
 80042ee:	d037      	beq.n	8004360 <ai_platform_get_weights_map+0x74>
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	4604      	mov	r4, r0
 80042f4:	b1a0      	cbz	r0, 8004320 <ai_platform_get_weights_map+0x34>
 80042f6:	460f      	mov	r7, r1
 80042f8:	b191      	cbz	r1, 8004320 <ai_platform_get_weights_map+0x34>
 80042fa:	4b25      	ldr	r3, [pc, #148]	@ (8004390 <ai_platform_get_weights_map+0xa4>)
 80042fc:	6810      	ldr	r0, [r2, #0]
 80042fe:	4298      	cmp	r0, r3
 8004300:	4615      	mov	r5, r2
 8004302:	d00f      	beq.n	8004324 <ai_platform_get_weights_map+0x38>
 8004304:	6855      	ldr	r5, [r2, #4]
 8004306:	b15d      	cbz	r5, 8004320 <ai_platform_get_weights_map+0x34>
 8004308:	682e      	ldr	r6, [r5, #0]
 800430a:	429e      	cmp	r6, r3
 800430c:	d02a      	beq.n	8004364 <ai_platform_get_weights_map+0x78>
 800430e:	f1a1 0001 	sub.w	r0, r1, #1
 8004312:	6025      	str	r5, [r4, #0]
 8004314:	fab0 f080 	clz	r0, r0
 8004318:	0940      	lsrs	r0, r0, #5
 800431a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800431c:	42a7      	cmp	r7, r4
 800431e:	d034      	beq.n	800438a <ai_platform_get_weights_map+0x9e>
 8004320:	2000      	movs	r0, #0
 8004322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004324:	1d10      	adds	r0, r2, #4
 8004326:	f7ff ffc7 	bl	80042b8 <ai_buffer_array_sane>
 800432a:	2800      	cmp	r0, #0
 800432c:	d0f8      	beq.n	8004320 <ai_platform_get_weights_map+0x34>
 800432e:	88eb      	ldrh	r3, [r5, #6]
 8004330:	429f      	cmp	r7, r3
 8004332:	d1f5      	bne.n	8004320 <ai_platform_get_weights_map+0x34>
 8004334:	f04f 0c00 	mov.w	ip, #0
 8004338:	1f20      	subs	r0, r4, #4
 800433a:	46e6      	mov	lr, ip
 800433c:	68ab      	ldr	r3, [r5, #8]
 800433e:	4463      	add	r3, ip
 8004340:	f10c 0c1c 	add.w	ip, ip, #28
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	b12b      	cbz	r3, 8004354 <ai_platform_get_weights_map+0x68>
 8004348:	f10e 0e01 	add.w	lr, lr, #1
 800434c:	4577      	cmp	r7, lr
 800434e:	f840 3f04 	str.w	r3, [r0, #4]!
 8004352:	d1f3      	bne.n	800433c <ai_platform_get_weights_map+0x50>
 8004354:	eba7 000e 	sub.w	r0, r7, lr
 8004358:	fab0 f080 	clz	r0, r0
 800435c:	0940      	lsrs	r0, r0, #5
 800435e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004360:	2000      	movs	r0, #0
 8004362:	4770      	bx	lr
 8004364:	1f20      	subs	r0, r4, #4
 8004366:	462a      	mov	r2, r5
 8004368:	2400      	movs	r4, #0
 800436a:	e000      	b.n	800436e <ai_platform_get_weights_map+0x82>
 800436c:	461c      	mov	r4, r3
 800436e:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8004372:	42b3      	cmp	r3, r6
 8004374:	d0d2      	beq.n	800431c <ai_platform_get_weights_map+0x30>
 8004376:	f840 3f04 	str.w	r3, [r0, #4]!
 800437a:	1c63      	adds	r3, r4, #1
 800437c:	429f      	cmp	r7, r3
 800437e:	d1f5      	bne.n	800436c <ai_platform_get_weights_map+0x80>
 8004380:	3402      	adds	r4, #2
 8004382:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004386:	42b3      	cmp	r3, r6
 8004388:	d1ca      	bne.n	8004320 <ai_platform_get_weights_map+0x34>
 800438a:	2001      	movs	r0, #1
 800438c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800438e:	bf00      	nop
 8004390:	a1facade 	.word	0xa1facade

08004394 <ai_platform_get_activations_map>:
 8004394:	2a00      	cmp	r2, #0
 8004396:	d038      	beq.n	800440a <ai_platform_get_activations_map+0x76>
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	4604      	mov	r4, r0
 800439c:	b1a0      	cbz	r0, 80043c8 <ai_platform_get_activations_map+0x34>
 800439e:	460f      	mov	r7, r1
 80043a0:	b191      	cbz	r1, 80043c8 <ai_platform_get_activations_map+0x34>
 80043a2:	4b25      	ldr	r3, [pc, #148]	@ (8004438 <ai_platform_get_activations_map+0xa4>)
 80043a4:	6810      	ldr	r0, [r2, #0]
 80043a6:	4298      	cmp	r0, r3
 80043a8:	4615      	mov	r5, r2
 80043aa:	d00f      	beq.n	80043cc <ai_platform_get_activations_map+0x38>
 80043ac:	6a15      	ldr	r5, [r2, #32]
 80043ae:	b15d      	cbz	r5, 80043c8 <ai_platform_get_activations_map+0x34>
 80043b0:	682e      	ldr	r6, [r5, #0]
 80043b2:	429e      	cmp	r6, r3
 80043b4:	d02b      	beq.n	800440e <ai_platform_get_activations_map+0x7a>
 80043b6:	f1a1 0001 	sub.w	r0, r1, #1
 80043ba:	6025      	str	r5, [r4, #0]
 80043bc:	fab0 f080 	clz	r0, r0
 80043c0:	0940      	lsrs	r0, r0, #5
 80043c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043c4:	42a7      	cmp	r7, r4
 80043c6:	d035      	beq.n	8004434 <ai_platform_get_activations_map+0xa0>
 80043c8:	2000      	movs	r0, #0
 80043ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043cc:	f102 000c 	add.w	r0, r2, #12
 80043d0:	f7ff ff72 	bl	80042b8 <ai_buffer_array_sane>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d0f7      	beq.n	80043c8 <ai_platform_get_activations_map+0x34>
 80043d8:	89eb      	ldrh	r3, [r5, #14]
 80043da:	429f      	cmp	r7, r3
 80043dc:	d1f4      	bne.n	80043c8 <ai_platform_get_activations_map+0x34>
 80043de:	f04f 0c00 	mov.w	ip, #0
 80043e2:	1f20      	subs	r0, r4, #4
 80043e4:	46e6      	mov	lr, ip
 80043e6:	692b      	ldr	r3, [r5, #16]
 80043e8:	4463      	add	r3, ip
 80043ea:	f10c 0c1c 	add.w	ip, ip, #28
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	b12b      	cbz	r3, 80043fe <ai_platform_get_activations_map+0x6a>
 80043f2:	f10e 0e01 	add.w	lr, lr, #1
 80043f6:	4577      	cmp	r7, lr
 80043f8:	f840 3f04 	str.w	r3, [r0, #4]!
 80043fc:	d1f3      	bne.n	80043e6 <ai_platform_get_activations_map+0x52>
 80043fe:	eba7 000e 	sub.w	r0, r7, lr
 8004402:	fab0 f080 	clz	r0, r0
 8004406:	0940      	lsrs	r0, r0, #5
 8004408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800440a:	2000      	movs	r0, #0
 800440c:	4770      	bx	lr
 800440e:	1f20      	subs	r0, r4, #4
 8004410:	462a      	mov	r2, r5
 8004412:	2400      	movs	r4, #0
 8004414:	e000      	b.n	8004418 <ai_platform_get_activations_map+0x84>
 8004416:	461c      	mov	r4, r3
 8004418:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800441c:	42b3      	cmp	r3, r6
 800441e:	d0d1      	beq.n	80043c4 <ai_platform_get_activations_map+0x30>
 8004420:	f840 3f04 	str.w	r3, [r0, #4]!
 8004424:	1c63      	adds	r3, r4, #1
 8004426:	429f      	cmp	r7, r3
 8004428:	d1f5      	bne.n	8004416 <ai_platform_get_activations_map+0x82>
 800442a:	3402      	adds	r4, #2
 800442c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004430:	42b3      	cmp	r3, r6
 8004432:	d1c9      	bne.n	80043c8 <ai_platform_get_activations_map+0x34>
 8004434:	2001      	movs	r0, #1
 8004436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004438:	a1facade 	.word	0xa1facade

0800443c <ai_platform_bind_network_params>:
 800443c:	b1a0      	cbz	r0, 8004468 <ai_platform_bind_network_params+0x2c>
 800443e:	b1b1      	cbz	r1, 800446e <ai_platform_bind_network_params+0x32>
 8004440:	b1c2      	cbz	r2, 8004474 <ai_platform_bind_network_params+0x38>
 8004442:	b410      	push	{r4}
 8004444:	4603      	mov	r3, r0
 8004446:	4c0d      	ldr	r4, [pc, #52]	@ (800447c <ai_platform_bind_network_params+0x40>)
 8004448:	f843 4b04 	str.w	r4, [r3], #4
 800444c:	f100 0c0c 	add.w	ip, r0, #12
 8004450:	c903      	ldmia	r1, {r0, r1}
 8004452:	e883 0003 	stmia.w	r3, {r0, r1}
 8004456:	e892 0003 	ldmia.w	r2, {r0, r1}
 800445a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800445e:	2301      	movs	r3, #1
 8004460:	4618      	mov	r0, r3
 8004462:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	4603      	mov	r3, r0
 800446a:	4618      	mov	r0, r3
 800446c:	4770      	bx	lr
 800446e:	460b      	mov	r3, r1
 8004470:	4618      	mov	r0, r3
 8004472:	4770      	bx	lr
 8004474:	4613      	mov	r3, r2
 8004476:	4618      	mov	r0, r3
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	a1facade 	.word	0xa1facade

08004480 <ai_platform_network_get_error>:
 8004480:	4b04      	ldr	r3, [pc, #16]	@ (8004494 <ai_platform_network_get_error+0x14>)
 8004482:	6802      	ldr	r2, [r0, #0]
 8004484:	4393      	bics	r3, r2
 8004486:	d102      	bne.n	800448e <ai_platform_network_get_error+0xe>
 8004488:	300c      	adds	r0, #12
 800448a:	f000 bc77 	b.w	8004d7c <core_get_error>
 800448e:	f241 0010 	movw	r0, #4112	@ 0x1010
 8004492:	4770      	bx	lr
 8004494:	a1c00100 	.word	0xa1c00100

08004498 <ai_platform_network_set_error>:
 8004498:	b110      	cbz	r0, 80044a0 <ai_platform_network_set_error+0x8>
 800449a:	300c      	adds	r0, #12
 800449c:	f000 bc74 	b.w	8004d88 <core_set_error>
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop

080044a4 <ai_platform_inputs_get>:
 80044a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a8:	4b38      	ldr	r3, [pc, #224]	@ (800458c <ai_platform_inputs_get+0xe8>)
 80044aa:	6802      	ldr	r2, [r0, #0]
 80044ac:	b085      	sub	sp, #20
 80044ae:	4393      	bics	r3, r2
 80044b0:	9003      	str	r0, [sp, #12]
 80044b2:	9102      	str	r1, [sp, #8]
 80044b4:	d160      	bne.n	8004578 <ai_platform_inputs_get+0xd4>
 80044b6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d04f      	beq.n	800455c <ai_platform_inputs_get+0xb8>
 80044bc:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80044c0:	f1ba 0f00 	cmp.w	sl, #0
 80044c4:	d04a      	beq.n	800455c <ai_platform_inputs_get+0xb8>
 80044c6:	f04f 0b00 	mov.w	fp, #0
 80044ca:	465d      	mov	r5, fp
 80044cc:	e016      	b.n	80044fc <ai_platform_inputs_get+0x58>
 80044ce:	9901      	ldr	r1, [sp, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	507a      	str	r2, [r7, r1]
 80044d4:	69b1      	ldr	r1, [r6, #24]
 80044d6:	684e      	ldr	r6, [r1, #4]
 80044d8:	60a3      	str	r3, [r4, #8]
 80044da:	f04f 0201 	mov.w	r2, #1
 80044de:	7522      	strb	r2, [r4, #20]
 80044e0:	6961      	ldr	r1, [r4, #20]
 80044e2:	6020      	str	r0, [r4, #0]
 80044e4:	f369 211f 	bfi	r1, r9, #8, #24
 80044e8:	2300      	movs	r3, #0
 80044ea:	e9c4 3603 	strd	r3, r6, [r4, #12]
 80044ee:	e9c4 1805 	strd	r1, r8, [r4, #20]
 80044f2:	f8c4 c004 	str.w	ip, [r4, #4]
 80044f6:	3501      	adds	r5, #1
 80044f8:	f10b 0b1c 	add.w	fp, fp, #28
 80044fc:	f8ba 3000 	ldrh.w	r3, [sl]
 8004500:	42ab      	cmp	r3, r5
 8004502:	b2aa      	uxth	r2, r5
 8004504:	d93c      	bls.n	8004580 <ai_platform_inputs_get+0xdc>
 8004506:	f8da 3004 	ldr.w	r3, [sl, #4]
 800450a:	00e9      	lsls	r1, r5, #3
 800450c:	9101      	str	r1, [sp, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d036      	beq.n	8004580 <ai_platform_inputs_get+0xdc>
 8004512:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004516:	2e00      	cmp	r6, #0
 8004518:	d032      	beq.n	8004580 <ai_platform_inputs_get+0xdc>
 800451a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800451e:	69b2      	ldr	r2, [r6, #24]
 8004520:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004524:	6810      	ldr	r0, [r2, #0]
 8004526:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800452a:	68b3      	ldr	r3, [r6, #8]
 800452c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004530:	f001 fb00 	bl	8005b34 <ai_array_to_buffer_fmt>
 8004534:	69b1      	ldr	r1, [r6, #24]
 8004536:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800453a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800453e:	445c      	add	r4, fp
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0c8      	beq.n	80044d6 <ai_platform_inputs_get+0x32>
 8004544:	2100      	movs	r1, #0
 8004546:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800454a:	6831      	ldr	r1, [r6, #0]
 800454c:	6059      	str	r1, [r3, #4]
 800454e:	b111      	cbz	r1, 8004556 <ai_platform_inputs_get+0xb2>
 8004550:	8849      	ldrh	r1, [r1, #2]
 8004552:	2900      	cmp	r1, #0
 8004554:	d1bb      	bne.n	80044ce <ai_platform_inputs_get+0x2a>
 8004556:	69b1      	ldr	r1, [r6, #24]
 8004558:	2300      	movs	r3, #0
 800455a:	e7bc      	b.n	80044d6 <ai_platform_inputs_get+0x32>
 800455c:	9803      	ldr	r0, [sp, #12]
 800455e:	2218      	movs	r2, #24
 8004560:	2111      	movs	r1, #17
 8004562:	300c      	adds	r0, #12
 8004564:	f000 fc10 	bl	8004d88 <core_set_error>
 8004568:	2200      	movs	r2, #0
 800456a:	4610      	mov	r0, r2
 800456c:	9b02      	ldr	r3, [sp, #8]
 800456e:	b103      	cbz	r3, 8004572 <ai_platform_inputs_get+0xce>
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	b005      	add	sp, #20
 8004574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004578:	2000      	movs	r0, #0
 800457a:	b005      	add	sp, #20
 800457c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004580:	2a00      	cmp	r2, #0
 8004582:	d0eb      	beq.n	800455c <ai_platform_inputs_get+0xb8>
 8004584:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004588:	6858      	ldr	r0, [r3, #4]
 800458a:	e7ef      	b.n	800456c <ai_platform_inputs_get+0xc8>
 800458c:	a1c00100 	.word	0xa1c00100

08004590 <ai_platform_outputs_get>:
 8004590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004594:	4b37      	ldr	r3, [pc, #220]	@ (8004674 <ai_platform_outputs_get+0xe4>)
 8004596:	6802      	ldr	r2, [r0, #0]
 8004598:	b085      	sub	sp, #20
 800459a:	4393      	bics	r3, r2
 800459c:	9003      	str	r0, [sp, #12]
 800459e:	9102      	str	r1, [sp, #8]
 80045a0:	d15d      	bne.n	800465e <ai_platform_outputs_get+0xce>
 80045a2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d94c      	bls.n	8004642 <ai_platform_outputs_get+0xb2>
 80045a8:	f04f 0b00 	mov.w	fp, #0
 80045ac:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80045b0:	465d      	mov	r5, fp
 80045b2:	46d8      	mov	r8, fp
 80045b4:	e016      	b.n	80045e4 <ai_platform_outputs_get+0x54>
 80045b6:	9a01      	ldr	r2, [sp, #4]
 80045b8:	2101      	movs	r1, #1
 80045ba:	50b9      	str	r1, [r7, r2]
 80045bc:	69b2      	ldr	r2, [r6, #24]
 80045be:	6856      	ldr	r6, [r2, #4]
 80045c0:	6020      	str	r0, [r4, #0]
 80045c2:	f04f 0201 	mov.w	r2, #1
 80045c6:	7522      	strb	r2, [r4, #20]
 80045c8:	6960      	ldr	r0, [r4, #20]
 80045ca:	f8c4 c004 	str.w	ip, [r4, #4]
 80045ce:	f369 201f 	bfi	r0, r9, #8, #24
 80045d2:	e9c4 6004 	strd	r6, r0, [r4, #16]
 80045d6:	e9c4 3802 	strd	r3, r8, [r4, #8]
 80045da:	9b00      	ldr	r3, [sp, #0]
 80045dc:	61a3      	str	r3, [r4, #24]
 80045de:	3501      	adds	r5, #1
 80045e0:	f10b 0b1c 	add.w	fp, fp, #28
 80045e4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80045e8:	42ab      	cmp	r3, r5
 80045ea:	b2aa      	uxth	r2, r5
 80045ec:	d93b      	bls.n	8004666 <ai_platform_outputs_get+0xd6>
 80045ee:	f8da 3010 	ldr.w	r3, [sl, #16]
 80045f2:	00e9      	lsls	r1, r5, #3
 80045f4:	9101      	str	r1, [sp, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d035      	beq.n	8004666 <ai_platform_outputs_get+0xd6>
 80045fa:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80045fe:	2e00      	cmp	r6, #0
 8004600:	d031      	beq.n	8004666 <ai_platform_outputs_get+0xd6>
 8004602:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004606:	69b2      	ldr	r2, [r6, #24]
 8004608:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800460c:	68b3      	ldr	r3, [r6, #8]
 800460e:	6810      	ldr	r0, [r2, #0]
 8004610:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004614:	68f3      	ldr	r3, [r6, #12]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	f001 fa8c 	bl	8005b34 <ai_array_to_buffer_fmt>
 800461c:	69b2      	ldr	r2, [r6, #24]
 800461e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8004622:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8004626:	445c      	add	r4, fp
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0c8      	beq.n	80045be <ai_platform_outputs_get+0x2e>
 800462c:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 8004630:	6832      	ldr	r2, [r6, #0]
 8004632:	605a      	str	r2, [r3, #4]
 8004634:	b112      	cbz	r2, 800463c <ai_platform_outputs_get+0xac>
 8004636:	8852      	ldrh	r2, [r2, #2]
 8004638:	2a00      	cmp	r2, #0
 800463a:	d1bc      	bne.n	80045b6 <ai_platform_outputs_get+0x26>
 800463c:	69b2      	ldr	r2, [r6, #24]
 800463e:	2300      	movs	r3, #0
 8004640:	e7bd      	b.n	80045be <ai_platform_outputs_get+0x2e>
 8004642:	9803      	ldr	r0, [sp, #12]
 8004644:	2218      	movs	r2, #24
 8004646:	2111      	movs	r1, #17
 8004648:	300c      	adds	r0, #12
 800464a:	f000 fb9d 	bl	8004d88 <core_set_error>
 800464e:	2200      	movs	r2, #0
 8004650:	4610      	mov	r0, r2
 8004652:	9b02      	ldr	r3, [sp, #8]
 8004654:	b103      	cbz	r3, 8004658 <ai_platform_outputs_get+0xc8>
 8004656:	801a      	strh	r2, [r3, #0]
 8004658:	b005      	add	sp, #20
 800465a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465e:	2000      	movs	r0, #0
 8004660:	b005      	add	sp, #20
 8004662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004666:	2a00      	cmp	r2, #0
 8004668:	d0eb      	beq.n	8004642 <ai_platform_outputs_get+0xb2>
 800466a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800466e:	6858      	ldr	r0, [r3, #4]
 8004670:	e7ef      	b.n	8004652 <ai_platform_outputs_get+0xc2>
 8004672:	bf00      	nop
 8004674:	a1c00100 	.word	0xa1c00100

08004678 <ai_platform_network_create>:
 8004678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800467c:	b083      	sub	sp, #12
 800467e:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 8004682:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8004686:	b320      	cbz	r0, 80046d2 <ai_platform_network_create+0x5a>
 8004688:	6002      	str	r2, [r0, #0]
 800468a:	4616      	mov	r6, r2
 800468c:	461f      	mov	r7, r3
 800468e:	4604      	mov	r4, r0
 8004690:	f000 fb72 	bl	8004d78 <core_init>
 8004694:	b970      	cbnz	r0, 80046b4 <ai_platform_network_create+0x3c>
 8004696:	2530      	movs	r5, #48	@ 0x30
 8004698:	2300      	movs	r3, #0
 800469a:	6023      	str	r3, [r4, #0]
 800469c:	2410      	movs	r4, #16
 800469e:	4642      	mov	r2, r8
 80046a0:	4649      	mov	r1, r9
 80046a2:	4638      	mov	r0, r7
 80046a4:	f001 fac8 	bl	8005c38 <ai_version_get>
 80046a8:	60b0      	str	r0, [r6, #8]
 80046aa:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80046ae:	b003      	add	sp, #12
 80046b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046b4:	2200      	movs	r2, #0
 80046b6:	4649      	mov	r1, r9
 80046b8:	4638      	mov	r0, r7
 80046ba:	f001 fabd 	bl	8005c38 <ai_version_get>
 80046be:	2200      	movs	r2, #0
 80046c0:	4605      	mov	r5, r0
 80046c2:	2105      	movs	r1, #5
 80046c4:	2001      	movs	r0, #1
 80046c6:	f001 fab7 	bl	8005c38 <ai_version_get>
 80046ca:	4285      	cmp	r5, r0
 80046cc:	d008      	beq.n	80046e0 <ai_platform_network_create+0x68>
 80046ce:	2501      	movs	r5, #1
 80046d0:	e7e2      	b.n	8004698 <ai_platform_network_create+0x20>
 80046d2:	2510      	movs	r5, #16
 80046d4:	462c      	mov	r4, r5
 80046d6:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80046da:	b003      	add	sp, #12
 80046dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046e0:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <ai_platform_network_create+0x80>)
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	a801      	add	r0, sp, #4
 80046e6:	f000 fb5b 	bl	8004da0 <ai_check_custom_types>
 80046ea:	b110      	cbz	r0, 80046f2 <ai_platform_network_create+0x7a>
 80046ec:	2400      	movs	r4, #0
 80046ee:	4625      	mov	r5, r4
 80046f0:	e7d5      	b.n	800469e <ai_platform_network_create+0x26>
 80046f2:	2502      	movs	r5, #2
 80046f4:	e7d0      	b.n	8004698 <ai_platform_network_create+0x20>
 80046f6:	bf00      	nop
 80046f8:	84048403 	.word	0x84048403

080046fc <ai_platform_network_init>:
 80046fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004700:	4b63      	ldr	r3, [pc, #396]	@ (8004890 <ai_platform_network_init+0x194>)
 8004702:	6802      	ldr	r2, [r0, #0]
 8004704:	4393      	bics	r3, r2
 8004706:	b083      	sub	sp, #12
 8004708:	d156      	bne.n	80047b8 <ai_platform_network_init+0xbc>
 800470a:	4604      	mov	r4, r0
 800470c:	460f      	mov	r7, r1
 800470e:	2900      	cmp	r1, #0
 8004710:	f000 80a9 	beq.w	8004866 <ai_platform_network_init+0x16a>
 8004714:	680b      	ldr	r3, [r1, #0]
 8004716:	495f      	ldr	r1, [pc, #380]	@ (8004894 <ai_platform_network_init+0x198>)
 8004718:	428b      	cmp	r3, r1
 800471a:	d113      	bne.n	8004744 <ai_platform_network_init+0x48>
 800471c:	495c      	ldr	r1, [pc, #368]	@ (8004890 <ai_platform_network_init+0x194>)
 800471e:	89bd      	ldrh	r5, [r7, #12]
 8004720:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 8004724:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8004728:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 800472c:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8004730:	68be      	ldr	r6, [r7, #8]
 8004732:	428a      	cmp	r2, r1
 8004734:	d02c      	beq.n	8004790 <ai_platform_network_init+0x94>
 8004736:	2303      	movs	r3, #3
 8004738:	6123      	str	r3, [r4, #16]
 800473a:	4627      	mov	r7, r4
 800473c:	4638      	mov	r0, r7
 800473e:	b003      	add	sp, #12
 8004740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004744:	2101      	movs	r1, #1
 8004746:	4638      	mov	r0, r7
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800474e:	f7ff fd7f 	bl	8004250 <ai_buffer_get_size>
 8004752:	f107 081c 	add.w	r8, r7, #28
 8004756:	4605      	mov	r5, r0
 8004758:	2101      	movs	r1, #1
 800475a:	4640      	mov	r0, r8
 800475c:	463e      	mov	r6, r7
 800475e:	6a3f      	ldr	r7, [r7, #32]
 8004760:	f7ff fd76 	bl	8004250 <ai_buffer_get_size>
 8004764:	2d00      	cmp	r5, #0
 8004766:	9b01      	ldr	r3, [sp, #4]
 8004768:	bf0a      	itet	eq
 800476a:	46a9      	moveq	r9, r5
 800476c:	f04f 0901 	movne.w	r9, #1
 8004770:	462e      	moveq	r6, r5
 8004772:	b330      	cbz	r0, 80047c2 <ai_platform_network_init+0xc6>
 8004774:	2f00      	cmp	r7, #0
 8004776:	f000 8084 	beq.w	8004882 <ai_platform_network_init+0x186>
 800477a:	f04f 0a01 	mov.w	sl, #1
 800477e:	f1bb 0f00 	cmp.w	fp, #0
 8004782:	d021      	beq.n	80047c8 <ai_platform_network_init+0xcc>
 8004784:	2500      	movs	r5, #0
 8004786:	6822      	ldr	r2, [r4, #0]
 8004788:	4941      	ldr	r1, [pc, #260]	@ (8004890 <ai_platform_network_init+0x194>)
 800478a:	428a      	cmp	r2, r1
 800478c:	46ab      	mov	fp, r5
 800478e:	d1d2      	bne.n	8004736 <ai_platform_network_init+0x3a>
 8004790:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 8004792:	454a      	cmp	r2, r9
 8004794:	4a3f      	ldr	r2, [pc, #252]	@ (8004894 <ai_platform_network_init+0x198>)
 8004796:	d221      	bcs.n	80047dc <ai_platform_network_init+0xe0>
 8004798:	4293      	cmp	r3, r2
 800479a:	d15c      	bne.n	8004856 <ai_platform_network_init+0x15a>
 800479c:	6266      	str	r6, [r4, #36]	@ 0x24
 800479e:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 80047a2:	f8a4 b020 	strh.w	fp, [r4, #32]
 80047a6:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 80047aa:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 80047ae:	8525      	strh	r5, [r4, #40]	@ 0x28
 80047b0:	4620      	mov	r0, r4
 80047b2:	f000 fb1f 	bl	8004df4 <ai_layers_init_all>
 80047b6:	e7be      	b.n	8004736 <ai_platform_network_init+0x3a>
 80047b8:	2700      	movs	r7, #0
 80047ba:	4638      	mov	r0, r7
 80047bc:	b003      	add	sp, #12
 80047be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c2:	4680      	mov	r8, r0
 80047c4:	4682      	mov	sl, r0
 80047c6:	e7da      	b.n	800477e <ai_platform_network_init+0x82>
 80047c8:	2d00      	cmp	r5, #0
 80047ca:	d0dc      	beq.n	8004786 <ai_platform_network_init+0x8a>
 80047cc:	2212      	movs	r2, #18
 80047ce:	2110      	movs	r1, #16
 80047d0:	f104 000c 	add.w	r0, r4, #12
 80047d4:	f000 fad8 	bl	8004d88 <core_set_error>
 80047d8:	465f      	mov	r7, fp
 80047da:	e7af      	b.n	800473c <ai_platform_network_init+0x40>
 80047dc:	4293      	cmp	r3, r2
 80047de:	d0dd      	beq.n	800479c <ai_platform_network_init+0xa0>
 80047e0:	f1b9 0f00 	cmp.w	r9, #0
 80047e4:	d018      	beq.n	8004818 <ai_platform_network_init+0x11c>
 80047e6:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80047f0:	2700      	movs	r7, #0
 80047f2:	4699      	mov	r9, r3
 80047f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80047f6:	eb06 0e07 	add.w	lr, r6, r7
 80047fa:	eb03 0c07 	add.w	ip, r3, r7
 80047fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004802:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004806:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800480a:	371c      	adds	r7, #28
 800480c:	45b9      	cmp	r9, r7
 800480e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004812:	d1ef      	bne.n	80047f4 <ai_platform_network_init+0xf8>
 8004814:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004818:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800481a:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 800481e:	4553      	cmp	r3, sl
 8004820:	f8a4 b020 	strh.w	fp, [r4, #32]
 8004824:	d325      	bcc.n	8004872 <ai_platform_network_init+0x176>
 8004826:	f1ba 0f00 	cmp.w	sl, #0
 800482a:	d0be      	beq.n	80047aa <ai_platform_network_init+0xae>
 800482c:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8004830:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004834:	f04f 0c00 	mov.w	ip, #0
 8004838:	eb08 070c 	add.w	r7, r8, ip
 800483c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800483e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004840:	4466      	add	r6, ip
 8004842:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004844:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004848:	f10c 0c1c 	add.w	ip, ip, #28
 800484c:	45f4      	cmp	ip, lr
 800484e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004852:	d1f1      	bne.n	8004838 <ai_platform_network_init+0x13c>
 8004854:	e7a9      	b.n	80047aa <ai_platform_network_init+0xae>
 8004856:	2212      	movs	r2, #18
 8004858:	2116      	movs	r1, #22
 800485a:	f104 000c 	add.w	r0, r4, #12
 800485e:	f000 fa93 	bl	8004d88 <core_set_error>
 8004862:	2700      	movs	r7, #0
 8004864:	e76a      	b.n	800473c <ai_platform_network_init+0x40>
 8004866:	2211      	movs	r2, #17
 8004868:	2110      	movs	r1, #16
 800486a:	300c      	adds	r0, #12
 800486c:	f000 fa8c 	bl	8004d88 <core_set_error>
 8004870:	e764      	b.n	800473c <ai_platform_network_init+0x40>
 8004872:	2213      	movs	r2, #19
 8004874:	2116      	movs	r1, #22
 8004876:	f104 000c 	add.w	r0, r4, #12
 800487a:	f000 fa85 	bl	8004d88 <core_set_error>
 800487e:	2700      	movs	r7, #0
 8004880:	e75c      	b.n	800473c <ai_platform_network_init+0x40>
 8004882:	2213      	movs	r2, #19
 8004884:	2110      	movs	r1, #16
 8004886:	f104 000c 	add.w	r0, r4, #12
 800488a:	f000 fa7d 	bl	8004d88 <core_set_error>
 800488e:	e755      	b.n	800473c <ai_platform_network_init+0x40>
 8004890:	a1c00100 	.word	0xa1c00100
 8004894:	a1facade 	.word	0xa1facade

08004898 <ai_platform_network_post_init>:
 8004898:	b538      	push	{r3, r4, r5, lr}
 800489a:	4b16      	ldr	r3, [pc, #88]	@ (80048f4 <ai_platform_network_post_init+0x5c>)
 800489c:	6802      	ldr	r2, [r0, #0]
 800489e:	ea02 0103 	and.w	r1, r2, r3
 80048a2:	4393      	bics	r3, r2
 80048a4:	d108      	bne.n	80048b8 <ai_platform_network_post_init+0x20>
 80048a6:	6903      	ldr	r3, [r0, #16]
 80048a8:	f013 0502 	ands.w	r5, r3, #2
 80048ac:	4604      	mov	r4, r0
 80048ae:	d005      	beq.n	80048bc <ai_platform_network_post_init+0x24>
 80048b0:	428a      	cmp	r2, r1
 80048b2:	d00a      	beq.n	80048ca <ai_platform_network_post_init+0x32>
 80048b4:	2001      	movs	r0, #1
 80048b6:	bd38      	pop	{r3, r4, r5, pc}
 80048b8:	2000      	movs	r0, #0
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	2210      	movs	r2, #16
 80048be:	2111      	movs	r1, #17
 80048c0:	300c      	adds	r0, #12
 80048c2:	f000 fa61 	bl	8004d88 <core_set_error>
 80048c6:	4628      	mov	r0, r5
 80048c8:	bd38      	pop	{r3, r4, r5, pc}
 80048ca:	f000 faa1 	bl	8004e10 <ai_layers_post_init_all>
 80048ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0ef      	beq.n	80048b4 <ai_platform_network_post_init+0x1c>
 80048d4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80048d6:	e008      	b.n	80048ea <ai_platform_network_post_init+0x52>
 80048d8:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 80048dc:	4798      	blx	r3
 80048de:	692b      	ldr	r3, [r5, #16]
 80048e0:	42ab      	cmp	r3, r5
 80048e2:	d0e7      	beq.n	80048b4 <ai_platform_network_post_init+0x1c>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0e5      	beq.n	80048b4 <ai_platform_network_post_init+0x1c>
 80048e8:	461d      	mov	r5, r3
 80048ea:	4629      	mov	r1, r5
 80048ec:	2000      	movs	r0, #0
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	d1f2      	bne.n	80048d8 <ai_platform_network_post_init+0x40>
 80048f2:	e7df      	b.n	80048b4 <ai_platform_network_post_init+0x1c>
 80048f4:	a1c00100 	.word	0xa1c00100

080048f8 <ai_platform_network_process>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	4bb5      	ldr	r3, [pc, #724]	@ (8004bd4 <ai_platform_network_process+0x2dc>)
 80048fe:	4605      	mov	r5, r0
 8004900:	6800      	ldr	r0, [r0, #0]
 8004902:	b085      	sub	sp, #20
 8004904:	4383      	bics	r3, r0
 8004906:	9202      	str	r2, [sp, #8]
 8004908:	f040 8140 	bne.w	8004b8c <ai_platform_network_process+0x294>
 800490c:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 8125 	beq.w	8004b5e <ai_platform_network_process+0x266>
 8004914:	692b      	ldr	r3, [r5, #16]
 8004916:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2700      	movs	r7, #0
 8004920:	2b03      	cmp	r3, #3
 8004922:	61af      	str	r7, [r5, #24]
 8004924:	f040 8137 	bne.w	8004b96 <ai_platform_network_process+0x29e>
 8004928:	2900      	cmp	r1, #0
 800492a:	f000 811e 	beq.w	8004b6a <ai_platform_network_process+0x272>
 800492e:	f1ba 0f00 	cmp.w	sl, #0
 8004932:	f000 811a 	beq.w	8004b6a <ai_platform_network_process+0x272>
 8004936:	f8ba 3000 	ldrh.w	r3, [sl]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8115 	beq.w	8004b6a <ai_platform_network_process+0x272>
 8004940:	698b      	ldr	r3, [r1, #24]
 8004942:	9503      	str	r5, [sp, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	9301      	str	r3, [sp, #4]
 8004948:	460e      	mov	r6, r1
 800494a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d072      	beq.n	8004a38 <ai_platform_network_process+0x140>
 8004952:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8004956:	2c00      	cmp	r4, #0
 8004958:	d06e      	beq.n	8004a38 <ai_platform_network_process+0x140>
 800495a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800495e:	f8d3 9000 	ldr.w	r9, [r3]
 8004962:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8004966:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800496a:	f000 81d3 	beq.w	8004d14 <ai_platform_network_process+0x41c>
 800496e:	69a3      	ldr	r3, [r4, #24]
 8004970:	2101      	movs	r1, #1
 8004972:	4630      	mov	r0, r6
 8004974:	685d      	ldr	r5, [r3, #4]
 8004976:	f7ff fc6b 	bl	8004250 <ai_buffer_get_size>
 800497a:	4285      	cmp	r5, r0
 800497c:	f0c0 8116 	bcc.w	8004bac <ai_platform_network_process+0x2b4>
 8004980:	68e0      	ldr	r0, [r4, #12]
 8004982:	69b1      	ldr	r1, [r6, #24]
 8004984:	68c2      	ldr	r2, [r0, #12]
 8004986:	68cb      	ldr	r3, [r1, #12]
 8004988:	429a      	cmp	r2, r3
 800498a:	f040 810f 	bne.w	8004bac <ai_platform_network_process+0x2b4>
 800498e:	6882      	ldr	r2, [r0, #8]
 8004990:	688b      	ldr	r3, [r1, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	f040 810a 	bne.w	8004bac <ai_platform_network_process+0x2b4>
 8004998:	6842      	ldr	r2, [r0, #4]
 800499a:	684b      	ldr	r3, [r1, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	f040 8105 	bne.w	8004bac <ai_platform_network_process+0x2b4>
 80049a2:	69a3      	ldr	r3, [r4, #24]
 80049a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049a8:	f001 f934 	bl	8005c14 <ai_array_get_data_byte_size>
 80049ac:	4605      	mov	r5, r0
 80049ae:	4620      	mov	r0, r4
 80049b0:	f001 f948 	bl	8005c44 <get_tensor_byte_size>
 80049b4:	4285      	cmp	r5, r0
 80049b6:	f0c0 80f9 	bcc.w	8004bac <ai_platform_network_process+0x2b4>
 80049ba:	69a3      	ldr	r3, [r4, #24]
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	f001 f8b9 	bl	8005b34 <ai_array_to_buffer_fmt>
 80049c2:	6833      	ldr	r3, [r6, #0]
 80049c4:	4058      	eors	r0, r3
 80049c6:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80049ca:	f040 81a5 	bne.w	8004d18 <ai_platform_network_process+0x420>
 80049ce:	6873      	ldr	r3, [r6, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 819f 	beq.w	8004d14 <ai_platform_network_process+0x41c>
 80049d6:	69b3      	ldr	r3, [r6, #24]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 81a5 	beq.w	8004d2a <ai_platform_network_process+0x432>
 80049e0:	9a01      	ldr	r2, [sp, #4]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	bf38      	it	cc
 80049e6:	461a      	movcc	r2, r3
 80049e8:	4620      	mov	r0, r4
 80049ea:	9201      	str	r2, [sp, #4]
 80049ec:	f001 f92a 	bl	8005c44 <get_tensor_byte_size>
 80049f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80049f4:	69b3      	ldr	r3, [r6, #24]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	fb00 f303 	mul.w	r3, r0, r3
 80049fc:	f8c8 300c 	str.w	r3, [r8, #12]
 8004a00:	6871      	ldr	r1, [r6, #4]
 8004a02:	f8c8 1004 	str.w	r1, [r8, #4]
 8004a06:	440b      	add	r3, r1
 8004a08:	f849 300b 	str.w	r3, [r9, fp]
 8004a0c:	69a0      	ldr	r0, [r4, #24]
 8004a0e:	6803      	ldr	r3, [r0, #0]
 8004a10:	009a      	lsls	r2, r3, #2
 8004a12:	f107 0701 	add.w	r7, r7, #1
 8004a16:	f106 061c 	add.w	r6, r6, #28
 8004a1a:	f100 80b1 	bmi.w	8004b80 <ai_platform_network_process+0x288>
 8004a1e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	4419      	add	r1, r3
 8004a26:	6081      	str	r1, [r0, #8]
 8004a28:	69a3      	ldr	r3, [r4, #24]
 8004a2a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004a2e:	60da      	str	r2, [r3, #12]
 8004a30:	f8ba 3000 	ldrh.w	r3, [sl]
 8004a34:	42bb      	cmp	r3, r7
 8004a36:	d888      	bhi.n	800494a <ai_platform_network_process+0x52>
 8004a38:	9d03      	ldr	r5, [sp, #12]
 8004a3a:	9b02      	ldr	r3, [sp, #8]
 8004a3c:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 817c 	beq.w	8004d3c <ai_platform_network_process+0x444>
 8004a44:	2a01      	cmp	r2, #1
 8004a46:	f240 80bd 	bls.w	8004bc4 <ai_platform_network_process+0x2cc>
 8004a4a:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 8004a4e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 80b6 	beq.w	8004bc4 <ai_platform_network_process+0x2cc>
 8004a58:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004a5c:	2700      	movs	r7, #0
 8004a5e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 80bd 	beq.w	8004be2 <ai_platform_network_process+0x2ea>
 8004a68:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8004a6c:	2e00      	cmp	r6, #0
 8004a6e:	f000 80b8 	beq.w	8004be2 <ai_platform_network_process+0x2ea>
 8004a72:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004a76:	681c      	ldr	r4, [r3, #0]
 8004a78:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8004a7c:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8004a80:	f000 8160 	beq.w	8004d44 <ai_platform_network_process+0x44c>
 8004a84:	69b3      	ldr	r3, [r6, #24]
 8004a86:	2101      	movs	r1, #1
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	9302      	str	r3, [sp, #8]
 8004a8c:	4658      	mov	r0, fp
 8004a8e:	f7ff fbdf 	bl	8004250 <ai_buffer_get_size>
 8004a92:	9b02      	ldr	r3, [sp, #8]
 8004a94:	4283      	cmp	r3, r0
 8004a96:	f0c0 8095 	bcc.w	8004bc4 <ai_platform_network_process+0x2cc>
 8004a9a:	68f0      	ldr	r0, [r6, #12]
 8004a9c:	f8db 1018 	ldr.w	r1, [fp, #24]
 8004aa0:	68c2      	ldr	r2, [r0, #12]
 8004aa2:	68cb      	ldr	r3, [r1, #12]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	f040 808d 	bne.w	8004bc4 <ai_platform_network_process+0x2cc>
 8004aaa:	6882      	ldr	r2, [r0, #8]
 8004aac:	688b      	ldr	r3, [r1, #8]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	f040 8088 	bne.w	8004bc4 <ai_platform_network_process+0x2cc>
 8004ab4:	6842      	ldr	r2, [r0, #4]
 8004ab6:	684b      	ldr	r3, [r1, #4]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	f040 8083 	bne.w	8004bc4 <ai_platform_network_process+0x2cc>
 8004abe:	69b3      	ldr	r3, [r6, #24]
 8004ac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ac4:	f001 f8a6 	bl	8005c14 <ai_array_get_data_byte_size>
 8004ac8:	9002      	str	r0, [sp, #8]
 8004aca:	4630      	mov	r0, r6
 8004acc:	f001 f8ba 	bl	8005c44 <get_tensor_byte_size>
 8004ad0:	9b02      	ldr	r3, [sp, #8]
 8004ad2:	4283      	cmp	r3, r0
 8004ad4:	d376      	bcc.n	8004bc4 <ai_platform_network_process+0x2cc>
 8004ad6:	69b3      	ldr	r3, [r6, #24]
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	f001 f82b 	bl	8005b34 <ai_array_to_buffer_fmt>
 8004ade:	f8db 3000 	ldr.w	r3, [fp]
 8004ae2:	4058      	eors	r0, r3
 8004ae4:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8004ae8:	f040 8134 	bne.w	8004d54 <ai_platform_network_process+0x45c>
 8004aec:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 8127 	beq.w	8004d44 <ai_platform_network_process+0x44c>
 8004af6:	f8db 3018 	ldr.w	r3, [fp, #24]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8133 	beq.w	8004d68 <ai_platform_network_process+0x470>
 8004b02:	9a01      	ldr	r2, [sp, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	bf38      	it	cc
 8004b08:	461a      	movcc	r2, r3
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	9201      	str	r2, [sp, #4]
 8004b0e:	f001 f899 	bl	8005c44 <get_tensor_byte_size>
 8004b12:	f8c9 0008 	str.w	r0, [r9, #8]
 8004b16:	f8db 3018 	ldr.w	r3, [fp, #24]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	fb00 f303 	mul.w	r3, r0, r3
 8004b20:	f8c9 300c 	str.w	r3, [r9, #12]
 8004b24:	f8db 1004 	ldr.w	r1, [fp, #4]
 8004b28:	f8c9 1004 	str.w	r1, [r9, #4]
 8004b2c:	440b      	add	r3, r1
 8004b2e:	f844 300a 	str.w	r3, [r4, sl]
 8004b32:	69b0      	ldr	r0, [r6, #24]
 8004b34:	6803      	ldr	r3, [r0, #0]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	f107 0701 	add.w	r7, r7, #1
 8004b3c:	f10b 0b1c 	add.w	fp, fp, #28
 8004b40:	d44a      	bmi.n	8004bd8 <ai_platform_network_process+0x2e0>
 8004b42:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	4419      	add	r1, r3
 8004b4a:	6081      	str	r1, [r0, #8]
 8004b4c:	69b3      	ldr	r3, [r6, #24]
 8004b4e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004b52:	60da      	str	r2, [r3, #12]
 8004b54:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004b58:	42bb      	cmp	r3, r7
 8004b5a:	d880      	bhi.n	8004a5e <ai_platform_network_process+0x166>
 8004b5c:	e041      	b.n	8004be2 <ai_platform_network_process+0x2ea>
 8004b5e:	692a      	ldr	r2, [r5, #16]
 8004b60:	61ab      	str	r3, [r5, #24]
 8004b62:	f002 0203 	and.w	r2, r2, #3
 8004b66:	2a03      	cmp	r2, #3
 8004b68:	d115      	bne.n	8004b96 <ai_platform_network_process+0x29e>
 8004b6a:	2217      	movs	r2, #23
 8004b6c:	2112      	movs	r1, #18
 8004b6e:	f105 000c 	add.w	r0, r5, #12
 8004b72:	f000 f909 	bl	8004d88 <core_set_error>
 8004b76:	2400      	movs	r4, #0
 8004b78:	4620      	mov	r0, r4
 8004b7a:	b005      	add	sp, #20
 8004b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b80:	f8ba 3000 	ldrh.w	r3, [sl]
 8004b84:	429f      	cmp	r7, r3
 8004b86:	f4ff aee0 	bcc.w	800494a <ai_platform_network_process+0x52>
 8004b8a:	e755      	b.n	8004a38 <ai_platform_network_process+0x140>
 8004b8c:	2400      	movs	r4, #0
 8004b8e:	4620      	mov	r0, r4
 8004b90:	b005      	add	sp, #20
 8004b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b96:	2230      	movs	r2, #48	@ 0x30
 8004b98:	2111      	movs	r1, #17
 8004b9a:	f105 000c 	add.w	r0, r5, #12
 8004b9e:	f000 f8f3 	bl	8004d88 <core_set_error>
 8004ba2:	2400      	movs	r4, #0
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	b005      	add	sp, #20
 8004ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bac:	9d03      	ldr	r5, [sp, #12]
 8004bae:	2218      	movs	r2, #24
 8004bb0:	2112      	movs	r1, #18
 8004bb2:	f105 000c 	add.w	r0, r5, #12
 8004bb6:	f000 f8e7 	bl	8004d88 <core_set_error>
 8004bba:	2400      	movs	r4, #0
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	b005      	add	sp, #20
 8004bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc4:	2218      	movs	r2, #24
 8004bc6:	2113      	movs	r1, #19
 8004bc8:	f105 000c 	add.w	r0, r5, #12
 8004bcc:	f000 f8dc 	bl	8004d88 <core_set_error>
 8004bd0:	2400      	movs	r4, #0
 8004bd2:	e7d1      	b.n	8004b78 <ai_platform_network_process+0x280>
 8004bd4:	a1c00100 	.word	0xa1c00100
 8004bd8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004bdc:	429f      	cmp	r7, r3
 8004bde:	f4ff af3e 	bcc.w	8004a5e <ai_platform_network_process+0x166>
 8004be2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004be6:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8004be8:	832b      	strh	r3, [r5, #24]
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	f040 808c 	bne.w	8004d08 <ai_platform_network_process+0x410>
 8004bf0:	4616      	mov	r6, r2
 8004bf2:	4617      	mov	r7, r2
 8004bf4:	8b6c      	ldrh	r4, [r5, #26]
 8004bf6:	429c      	cmp	r4, r3
 8004bf8:	bf38      	it	cc
 8004bfa:	46ab      	movcc	fp, r5
 8004bfc:	d2bc      	bcs.n	8004b78 <ai_platform_network_process+0x280>
 8004bfe:	2e00      	cmp	r6, #0
 8004c00:	d030      	beq.n	8004c64 <ai_platform_network_process+0x36c>
 8004c02:	f04f 0800 	mov.w	r8, #0
 8004c06:	e014      	b.n	8004c32 <ai_platform_network_process+0x33a>
 8004c08:	6882      	ldr	r2, [r0, #8]
 8004c0a:	68c5      	ldr	r5, [r0, #12]
 8004c0c:	6863      	ldr	r3, [r4, #4]
 8004c0e:	1b52      	subs	r2, r2, r5
 8004c10:	4413      	add	r3, r2
 8004c12:	6083      	str	r3, [r0, #8]
 8004c14:	698b      	ldr	r3, [r1, #24]
 8004c16:	6862      	ldr	r2, [r4, #4]
 8004c18:	60da      	str	r2, [r3, #12]
 8004c1a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8004c1e:	f859 200a 	ldr.w	r2, [r9, sl]
 8004c22:	440b      	add	r3, r1
 8004c24:	4293      	cmp	r3, r2
 8004c26:	bf24      	itt	cs
 8004c28:	68e3      	ldrcs	r3, [r4, #12]
 8004c2a:	1ad3      	subcs	r3, r2, r3
 8004c2c:	6063      	str	r3, [r4, #4]
 8004c2e:	f108 0801 	add.w	r8, r8, #1
 8004c32:	8833      	ldrh	r3, [r6, #0]
 8004c34:	4543      	cmp	r3, r8
 8004c36:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8004c3a:	d913      	bls.n	8004c64 <ai_platform_network_process+0x36c>
 8004c3c:	6873      	ldr	r3, [r6, #4]
 8004c3e:	b18b      	cbz	r3, 8004c64 <ai_platform_network_process+0x36c>
 8004c40:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8004c44:	b171      	cbz	r1, 8004c64 <ai_platform_network_process+0x36c>
 8004c46:	6988      	ldr	r0, [r1, #24]
 8004c48:	68b2      	ldr	r2, [r6, #8]
 8004c4a:	6803      	ldr	r3, [r0, #0]
 8004c4c:	f8d2 9000 	ldr.w	r9, [r2]
 8004c50:	009d      	lsls	r5, r3, #2
 8004c52:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8004c56:	d5d7      	bpl.n	8004c08 <ai_platform_network_process+0x310>
 8004c58:	6881      	ldr	r1, [r0, #8]
 8004c5a:	68a2      	ldr	r2, [r4, #8]
 8004c5c:	6860      	ldr	r0, [r4, #4]
 8004c5e:	f000 fec7 	bl	80059f0 <st_int8_copy>
 8004c62:	e7da      	b.n	8004c1a <ai_platform_network_process+0x322>
 8004c64:	4658      	mov	r0, fp
 8004c66:	f000 f8e7 	bl	8004e38 <ai_layers_forward_all>
 8004c6a:	2f00      	cmp	r7, #0
 8004c6c:	d03d      	beq.n	8004cea <ai_platform_network_process+0x3f2>
 8004c6e:	2400      	movs	r4, #0
 8004c70:	e016      	b.n	8004ca0 <ai_platform_network_process+0x3a8>
 8004c72:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8004c76:	f859 100a 	ldr.w	r1, [r9, sl]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	428b      	cmp	r3, r1
 8004c7e:	bf24      	itt	cs
 8004c80:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8004c84:	1acb      	subcs	r3, r1, r3
 8004c86:	f8c8 3004 	str.w	r3, [r8, #4]
 8004c8a:	6981      	ldr	r1, [r0, #24]
 8004c8c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8004c90:	1b52      	subs	r2, r2, r5
 8004c92:	4413      	add	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
 8004c96:	6983      	ldr	r3, [r0, #24]
 8004c98:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	3401      	adds	r4, #1
 8004ca0:	883b      	ldrh	r3, [r7, #0]
 8004ca2:	42a3      	cmp	r3, r4
 8004ca4:	d921      	bls.n	8004cea <ai_platform_network_process+0x3f2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	b1fb      	cbz	r3, 8004cea <ai_platform_network_process+0x3f2>
 8004caa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004cae:	b1e0      	cbz	r0, 8004cea <ai_platform_network_process+0x3f2>
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	6983      	ldr	r3, [r0, #24]
 8004cb4:	f8d2 9000 	ldr.w	r9, [r2]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	0092      	lsls	r2, r2, #2
 8004cbc:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8004cc0:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8004cc4:	d5d5      	bpl.n	8004c72 <ai_platform_network_process+0x37a>
 8004cc6:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8004cca:	6898      	ldr	r0, [r3, #8]
 8004ccc:	f000 fe90 	bl	80059f0 <st_int8_copy>
 8004cd0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8004cd4:	f859 200a 	ldr.w	r2, [r9, sl]
 8004cd8:	440b      	add	r3, r1
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	bf24      	itt	cs
 8004cde:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8004ce2:	1ad3      	subcs	r3, r2, r3
 8004ce4:	f8c8 3004 	str.w	r3, [r8, #4]
 8004ce8:	e7d9      	b.n	8004c9e <ai_platform_network_process+0x3a6>
 8004cea:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8004cee:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8004cf2:	3401      	adds	r4, #1
 8004cf4:	b2a4      	uxth	r4, r4
 8004cf6:	42a3      	cmp	r3, r4
 8004cf8:	f8ab 401a 	strh.w	r4, [fp, #26]
 8004cfc:	f63f af7f 	bhi.w	8004bfe <ai_platform_network_process+0x306>
 8004d00:	4620      	mov	r0, r4
 8004d02:	b005      	add	sp, #20
 8004d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d08:	2a01      	cmp	r2, #1
 8004d0a:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8004d0c:	d02a      	beq.n	8004d64 <ai_platform_network_process+0x46c>
 8004d0e:	f106 070c 	add.w	r7, r6, #12
 8004d12:	e76f      	b.n	8004bf4 <ai_platform_network_process+0x2fc>
 8004d14:	9d03      	ldr	r5, [sp, #12]
 8004d16:	e728      	b.n	8004b6a <ai_platform_network_process+0x272>
 8004d18:	9d03      	ldr	r5, [sp, #12]
 8004d1a:	2219      	movs	r2, #25
 8004d1c:	2112      	movs	r1, #18
 8004d1e:	f105 000c 	add.w	r0, r5, #12
 8004d22:	f000 f831 	bl	8004d88 <core_set_error>
 8004d26:	2400      	movs	r4, #0
 8004d28:	e726      	b.n	8004b78 <ai_platform_network_process+0x280>
 8004d2a:	9d03      	ldr	r5, [sp, #12]
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	2221      	movs	r2, #33	@ 0x21
 8004d30:	2112      	movs	r1, #18
 8004d32:	f105 000c 	add.w	r0, r5, #12
 8004d36:	f000 f827 	bl	8004d88 <core_set_error>
 8004d3a:	e71d      	b.n	8004b78 <ai_platform_network_process+0x280>
 8004d3c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004d40:	832b      	strh	r3, [r5, #24]
 8004d42:	e752      	b.n	8004bea <ai_platform_network_process+0x2f2>
 8004d44:	2217      	movs	r2, #23
 8004d46:	2113      	movs	r1, #19
 8004d48:	f105 000c 	add.w	r0, r5, #12
 8004d4c:	f000 f81c 	bl	8004d88 <core_set_error>
 8004d50:	2400      	movs	r4, #0
 8004d52:	e711      	b.n	8004b78 <ai_platform_network_process+0x280>
 8004d54:	2219      	movs	r2, #25
 8004d56:	2113      	movs	r1, #19
 8004d58:	f105 000c 	add.w	r0, r5, #12
 8004d5c:	f000 f814 	bl	8004d88 <core_set_error>
 8004d60:	2400      	movs	r4, #0
 8004d62:	e709      	b.n	8004b78 <ai_platform_network_process+0x280>
 8004d64:	2700      	movs	r7, #0
 8004d66:	e745      	b.n	8004bf4 <ai_platform_network_process+0x2fc>
 8004d68:	4604      	mov	r4, r0
 8004d6a:	2221      	movs	r2, #33	@ 0x21
 8004d6c:	2113      	movs	r1, #19
 8004d6e:	f105 000c 	add.w	r0, r5, #12
 8004d72:	f000 f809 	bl	8004d88 <core_set_error>
 8004d76:	e6ff      	b.n	8004b78 <ai_platform_network_process+0x280>

08004d78 <core_init>:
 8004d78:	2001      	movs	r0, #1
 8004d7a:	4770      	bx	lr

08004d7c <core_get_error>:
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2200      	movs	r2, #0
 8004d80:	6800      	ldr	r0, [r0, #0]
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop

08004d88 <core_set_error>:
 8004d88:	4603      	mov	r3, r0
 8004d8a:	7800      	ldrb	r0, [r0, #0]
 8004d8c:	b108      	cbz	r0, 8004d92 <core_set_error+0xa>
 8004d8e:	2000      	movs	r0, #0
 8004d90:	4770      	bx	lr
 8004d92:	7019      	strb	r1, [r3, #0]
 8004d94:	6819      	ldr	r1, [r3, #0]
 8004d96:	f362 211f 	bfi	r1, r2, #8, #24
 8004d9a:	2001      	movs	r0, #1
 8004d9c:	6019      	str	r1, [r3, #0]
 8004d9e:	4770      	bx	lr

08004da0 <ai_check_custom_types>:
 8004da0:	b082      	sub	sp, #8
 8004da2:	4b13      	ldr	r3, [pc, #76]	@ (8004df0 <ai_check_custom_types+0x50>)
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	b118      	cbz	r0, 8004db0 <ai_check_custom_types+0x10>
 8004da8:	7803      	ldrb	r3, [r0, #0]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d002      	beq.n	8004db4 <ai_check_custom_types+0x14>
 8004dae:	2000      	movs	r0, #0
 8004db0:	b002      	add	sp, #8
 8004db2:	4770      	bx	lr
 8004db4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <ai_check_custom_types+0x26>
 8004dbc:	2001      	movs	r0, #1
 8004dbe:	f080 0001 	eor.w	r0, r0, #1
 8004dc2:	b002      	add	sp, #8
 8004dc4:	4770      	bx	lr
 8004dc6:	7842      	ldrb	r2, [r0, #1]
 8004dc8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	f100 0001 	add.w	r0, r0, #1
 8004dd2:	d1f3      	bne.n	8004dbc <ai_check_custom_types+0x1c>
 8004dd4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004dd8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d1ed      	bne.n	8004dbc <ai_check_custom_types+0x1c>
 8004de0:	7842      	ldrb	r2, [r0, #1]
 8004de2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d1e8      	bne.n	8004dbc <ai_check_custom_types+0x1c>
 8004dea:	2000      	movs	r0, #0
 8004dec:	e7e7      	b.n	8004dbe <ai_check_custom_types+0x1e>
 8004dee:	bf00      	nop
 8004df0:	84048403 	.word	0x84048403

08004df4 <ai_layers_init_all>:
 8004df4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004df6:	2100      	movs	r1, #0
 8004df8:	b143      	cbz	r3, 8004e0c <ai_layers_init_all+0x18>
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	60d8      	str	r0, [r3, #12]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	f101 0101 	add.w	r1, r1, #1
 8004e04:	d002      	beq.n	8004e0c <ai_layers_init_all+0x18>
 8004e06:	b10a      	cbz	r2, 8004e0c <ai_layers_init_all+0x18>
 8004e08:	4613      	mov	r3, r2
 8004e0a:	e7f5      	b.n	8004df8 <ai_layers_init_all+0x4>
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	4770      	bx	lr

08004e10 <ai_layers_post_init_all>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8004e14:	2500      	movs	r5, #0
 8004e16:	b16c      	cbz	r4, 8004e34 <ai_layers_post_init_all+0x24>
 8004e18:	6863      	ldr	r3, [r4, #4]
 8004e1a:	07db      	lsls	r3, r3, #31
 8004e1c:	d504      	bpl.n	8004e28 <ai_layers_post_init_all+0x18>
 8004e1e:	6a23      	ldr	r3, [r4, #32]
 8004e20:	4620      	mov	r0, r4
 8004e22:	b10b      	cbz	r3, 8004e28 <ai_layers_post_init_all+0x18>
 8004e24:	4798      	blx	r3
 8004e26:	3501      	adds	r5, #1
 8004e28:	6923      	ldr	r3, [r4, #16]
 8004e2a:	42a3      	cmp	r3, r4
 8004e2c:	d002      	beq.n	8004e34 <ai_layers_post_init_all+0x24>
 8004e2e:	b10b      	cbz	r3, 8004e34 <ai_layers_post_init_all+0x24>
 8004e30:	461c      	mov	r4, r3
 8004e32:	e7f0      	b.n	8004e16 <ai_layers_post_init_all+0x6>
 8004e34:	4628      	mov	r0, r5
 8004e36:	bd38      	pop	{r3, r4, r5, pc}

08004e38 <ai_layers_forward_all>:
 8004e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3c:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8004e40:	4604      	mov	r4, r0
 8004e42:	f1b8 0f00 	cmp.w	r8, #0
 8004e46:	d02b      	beq.n	8004ea0 <ai_layers_forward_all+0x68>
 8004e48:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8004e4a:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8004e4c:	b321      	cbz	r1, 8004e98 <ai_layers_forward_all+0x60>
 8004e4e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004e50:	2001      	movs	r0, #1
 8004e52:	47c0      	blx	r8
 8004e54:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8004e56:	b1fe      	cbz	r6, 8004e98 <ai_layers_forward_all+0x60>
 8004e58:	2700      	movs	r7, #0
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004e5e:	2002      	movs	r0, #2
 8004e60:	47c0      	blx	r8
 8004e62:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8004e64:	4628      	mov	r0, r5
 8004e66:	696b      	ldr	r3, [r5, #20]
 8004e68:	4798      	blx	r3
 8004e6a:	692e      	ldr	r6, [r5, #16]
 8004e6c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004e6e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8004e70:	42b5      	cmp	r5, r6
 8004e72:	f04f 0003 	mov.w	r0, #3
 8004e76:	d007      	beq.n	8004e88 <ai_layers_forward_all+0x50>
 8004e78:	47c0      	blx	r8
 8004e7a:	3701      	adds	r7, #1
 8004e7c:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8004e7e:	2e00      	cmp	r6, #0
 8004e80:	d1eb      	bne.n	8004e5a <ai_layers_forward_all+0x22>
 8004e82:	4638      	mov	r0, r7
 8004e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e88:	2003      	movs	r0, #3
 8004e8a:	47c0      	blx	r8
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	3701      	adds	r7, #1
 8004e90:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8004e92:	4638      	mov	r0, r7
 8004e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e98:	2700      	movs	r7, #0
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea0:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8004ea2:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8004ea4:	2d00      	cmp	r5, #0
 8004ea6:	d0f7      	beq.n	8004e98 <ai_layers_forward_all+0x60>
 8004ea8:	4647      	mov	r7, r8
 8004eaa:	696b      	ldr	r3, [r5, #20]
 8004eac:	4628      	mov	r0, r5
 8004eae:	4798      	blx	r3
 8004eb0:	462b      	mov	r3, r5
 8004eb2:	692d      	ldr	r5, [r5, #16]
 8004eb4:	429d      	cmp	r5, r3
 8004eb6:	d004      	beq.n	8004ec2 <ai_layers_forward_all+0x8a>
 8004eb8:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8004eba:	3701      	adds	r7, #1
 8004ebc:	2d00      	cmp	r5, #0
 8004ebe:	d1f4      	bne.n	8004eaa <ai_layers_forward_all+0x72>
 8004ec0:	e7df      	b.n	8004e82 <ai_layers_forward_all+0x4a>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8004ec6:	3701      	adds	r7, #1
 8004ec8:	e7db      	b.n	8004e82 <ai_layers_forward_all+0x4a>
 8004eca:	bf00      	nop

08004ecc <forward_dense>:
 8004ecc:	6982      	ldr	r2, [r0, #24]
 8004ece:	8813      	ldrh	r3, [r2, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d043      	beq.n	8004f5c <forward_dense+0x90>
 8004ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed8:	6855      	ldr	r5, [r2, #4]
 8004eda:	6869      	ldr	r1, [r5, #4]
 8004edc:	b08e      	sub	sp, #56	@ 0x38
 8004ede:	b101      	cbz	r1, 8004ee2 <forward_dense+0x16>
 8004ee0:	6809      	ldr	r1, [r1, #0]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d069      	beq.n	8004fba <forward_dense+0xee>
 8004ee6:	692a      	ldr	r2, [r5, #16]
 8004ee8:	b102      	cbz	r2, 8004eec <forward_dense+0x20>
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d061      	beq.n	8004fb4 <forward_dense+0xe8>
 8004ef0:	69ec      	ldr	r4, [r5, #28]
 8004ef2:	2c00      	cmp	r4, #0
 8004ef4:	d057      	beq.n	8004fa6 <forward_dense+0xda>
 8004ef6:	8b2e      	ldrh	r6, [r5, #24]
 8004ef8:	6820      	ldr	r0, [r4, #0]
 8004efa:	2e01      	cmp	r6, #1
 8004efc:	d955      	bls.n	8004faa <forward_dense+0xde>
 8004efe:	6864      	ldr	r4, [r4, #4]
 8004f00:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8004f04:	68cf      	ldr	r7, [r1, #12]
 8004f06:	68d0      	ldr	r0, [r2, #12]
 8004f08:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8004f0c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8004f10:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8004f14:	f8d9 0000 	ldr.w	r0, [r9]
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	fb06 f807 	mul.w	r8, r6, r7
 8004f1e:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 8004f22:	d044      	beq.n	8004fae <forward_dense+0xe2>
 8004f24:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8004f26:	b11d      	cbz	r5, 8004f30 <forward_dense+0x64>
 8004f28:	682d      	ldr	r5, [r5, #0]
 8004f2a:	b10d      	cbz	r5, 8004f30 <forward_dense+0x64>
 8004f2c:	69ab      	ldr	r3, [r5, #24]
 8004f2e:	689d      	ldr	r5, [r3, #8]
 8004f30:	6992      	ldr	r2, [r2, #24]
 8004f32:	698b      	ldr	r3, [r1, #24]
 8004f34:	6890      	ldr	r0, [r2, #8]
 8004f36:	6899      	ldr	r1, [r3, #8]
 8004f38:	b10c      	cbz	r4, 8004f3e <forward_dense+0x72>
 8004f3a:	69a3      	ldr	r3, [r4, #24]
 8004f3c:	689c      	ldr	r4, [r3, #8]
 8004f3e:	4b20      	ldr	r3, [pc, #128]	@ (8004fc0 <forward_dense+0xf4>)
 8004f40:	459c      	cmp	ip, r3
 8004f42:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8004f46:	d023      	beq.n	8004f90 <forward_dense+0xc4>
 8004f48:	4e1e      	ldr	r6, [pc, #120]	@ (8004fc4 <forward_dense+0xf8>)
 8004f4a:	45b4      	cmp	ip, r6
 8004f4c:	d015      	beq.n	8004f7a <forward_dense+0xae>
 8004f4e:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 8004f52:	459c      	cmp	ip, r3
 8004f54:	d004      	beq.n	8004f60 <forward_dense+0x94>
 8004f56:	b00e      	add	sp, #56	@ 0x38
 8004f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	deff      	udf	#255	@ 0xff
 8004f60:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8004f64:	a807      	add	r0, sp, #28
 8004f66:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8004f6a:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8004f6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f70:	f000 f98e 	bl	8005290 <forward_lite_dense_if32of32wf32>
 8004f74:	b00e      	add	sp, #56	@ 0x38
 8004f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7a:	e9cd e803 	strd	lr, r8, [sp, #12]
 8004f7e:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8004f82:	9500      	str	r5, [sp, #0]
 8004f84:	464b      	mov	r3, r9
 8004f86:	f000 fadd 	bl	8005544 <forward_lite_dense_if32of32wf32_lut4>
 8004f8a:	b00e      	add	sp, #56	@ 0x38
 8004f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f90:	e9cd e803 	strd	lr, r8, [sp, #12]
 8004f94:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8004f98:	9500      	str	r5, [sp, #0]
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	f000 fbfa 	bl	8005794 <forward_lite_dense_if32of32wf32_lut8>
 8004fa0:	b00e      	add	sp, #56	@ 0x38
 8004fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	e7aa      	b.n	8004f00 <forward_dense+0x34>
 8004faa:	2400      	movs	r4, #0
 8004fac:	e7a8      	b.n	8004f00 <forward_dense+0x34>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	deff      	udf	#255	@ 0xff
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	deff      	udf	#255	@ 0xff
 8004fba:	2300      	movs	r3, #0
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	deff      	udf	#255	@ 0xff
 8004fc0:	00d01040 	.word	0x00d01040
 8004fc4:	00f01040 	.word	0x00f01040

08004fc8 <forward_sigmoid>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	ed2d 8b02 	vpush	{d8}
 8004fce:	6982      	ldr	r2, [r0, #24]
 8004fd0:	8813      	ldrh	r3, [r2, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d03b      	beq.n	800504e <forward_sigmoid+0x86>
 8004fd6:	6852      	ldr	r2, [r2, #4]
 8004fd8:	6854      	ldr	r4, [r2, #4]
 8004fda:	b104      	cbz	r4, 8004fde <forward_sigmoid+0x16>
 8004fdc:	6824      	ldr	r4, [r4, #0]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d034      	beq.n	800504c <forward_sigmoid+0x84>
 8004fe2:	6915      	ldr	r5, [r2, #16]
 8004fe4:	b105      	cbz	r5, 8004fe8 <forward_sigmoid+0x20>
 8004fe6:	682d      	ldr	r5, [r5, #0]
 8004fe8:	68a3      	ldr	r3, [r4, #8]
 8004fea:	0a1b      	lsrs	r3, r3, #8
 8004fec:	d031      	beq.n	8005052 <forward_sigmoid+0x8a>
 8004fee:	68e0      	ldr	r0, [r4, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004ff6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004ffa:	4298      	cmp	r0, r3
 8004ffc:	fb01 f202 	mul.w	r2, r1, r2
 8005000:	d1f9      	bne.n	8004ff6 <forward_sigmoid+0x2e>
 8005002:	69a7      	ldr	r7, [r4, #24]
 8005004:	69a9      	ldr	r1, [r5, #24]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	688e      	ldr	r6, [r1, #8]
 800500a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800500e:	3a01      	subs	r2, #1
 8005010:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8005014:	42ab      	cmp	r3, r5
 8005016:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800501a:	d814      	bhi.n	8005046 <forward_sigmoid+0x7e>
 800501c:	3504      	adds	r5, #4
 800501e:	3604      	adds	r6, #4
 8005020:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8005024:	462c      	mov	r4, r5
 8005026:	ed35 0a01 	vldmdb	r5!, {s0}
 800502a:	eeb1 0a40 	vneg.f32	s0, s0
 800502e:	f001 fdaf 	bl	8006b90 <expf>
 8005032:	ee30 0a08 	vadd.f32	s0, s0, s16
 8005036:	3c08      	subs	r4, #8
 8005038:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800503c:	ed66 7a01 	vstmdb	r6!, {s15}
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	42a3      	cmp	r3, r4
 8005044:	d9ee      	bls.n	8005024 <forward_sigmoid+0x5c>
 8005046:	ecbd 8b02 	vpop	{d8}
 800504a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800504c:	2300      	movs	r3, #0
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	deff      	udf	#255	@ 0xff
 8005052:	69ab      	ldr	r3, [r5, #24]
 8005054:	69a7      	ldr	r7, [r4, #24]
 8005056:	689e      	ldr	r6, [r3, #8]
 8005058:	68bd      	ldr	r5, [r7, #8]
 800505a:	e7df      	b.n	800501c <forward_sigmoid+0x54>

0800505c <forward_relu>:
 800505c:	6982      	ldr	r2, [r0, #24]
 800505e:	8813      	ldrh	r3, [r2, #0]
 8005060:	b323      	cbz	r3, 80050ac <forward_relu+0x50>
 8005062:	6851      	ldr	r1, [r2, #4]
 8005064:	684a      	ldr	r2, [r1, #4]
 8005066:	b102      	cbz	r2, 800506a <forward_relu+0xe>
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	2b01      	cmp	r3, #1
 800506c:	f000 808d 	beq.w	800518a <forward_relu+0x12e>
 8005070:	b470      	push	{r4, r5, r6}
 8005072:	6909      	ldr	r1, [r1, #16]
 8005074:	b101      	cbz	r1, 8005078 <forward_relu+0x1c>
 8005076:	6809      	ldr	r1, [r1, #0]
 8005078:	69c6      	ldr	r6, [r0, #28]
 800507a:	b1ce      	cbz	r6, 80050b0 <forward_relu+0x54>
 800507c:	6873      	ldr	r3, [r6, #4]
 800507e:	6988      	ldr	r0, [r1, #24]
 8005080:	6991      	ldr	r1, [r2, #24]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d044      	beq.n	8005110 <forward_relu+0xb4>
 8005086:	6893      	ldr	r3, [r2, #8]
 8005088:	6880      	ldr	r0, [r0, #8]
 800508a:	6889      	ldr	r1, [r1, #8]
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	d073      	beq.n	8005178 <forward_relu+0x11c>
 8005090:	68d5      	ldr	r5, [r2, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005098:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800509c:	429d      	cmp	r5, r3
 800509e:	fb04 f202 	mul.w	r2, r4, r2
 80050a2:	d1f9      	bne.n	8005098 <forward_relu+0x3c>
 80050a4:	68b3      	ldr	r3, [r6, #8]
 80050a6:	bc70      	pop	{r4, r5, r6}
 80050a8:	f000 b874 	b.w	8005194 <forward_lite_nl_relu_generic_if32of32_kernel>
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	deff      	udf	#255	@ 0xff
 80050b0:	6893      	ldr	r3, [r2, #8]
 80050b2:	6989      	ldr	r1, [r1, #24]
 80050b4:	6990      	ldr	r0, [r2, #24]
 80050b6:	6889      	ldr	r1, [r1, #8]
 80050b8:	6884      	ldr	r4, [r0, #8]
 80050ba:	0a1b      	lsrs	r3, r3, #8
 80050bc:	d05e      	beq.n	800517c <forward_relu+0x120>
 80050be:	68d5      	ldr	r5, [r2, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80050c6:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80050ca:	429d      	cmp	r5, r3
 80050cc:	fb00 f202 	mul.w	r2, r0, r2
 80050d0:	d1f9      	bne.n	80050c6 <forward_relu+0x6a>
 80050d2:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 80050d6:	3b01      	subs	r3, #1
 80050d8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80050dc:	4294      	cmp	r4, r2
 80050de:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80050e2:	d813      	bhi.n	800510c <forward_relu+0xb0>
 80050e4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8005190 <forward_relu+0x134>
 80050e8:	3204      	adds	r2, #4
 80050ea:	3104      	adds	r1, #4
 80050ec:	4613      	mov	r3, r2
 80050ee:	ed72 7a01 	vldmdb	r2!, {s15}
 80050f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fa:	f1a3 0308 	sub.w	r3, r3, #8
 80050fe:	bfb8      	it	lt
 8005100:	eef0 7a47 	vmovlt.f32	s15, s14
 8005104:	429c      	cmp	r4, r3
 8005106:	ed61 7a01 	vstmdb	r1!, {s15}
 800510a:	d9ef      	bls.n	80050ec <forward_relu+0x90>
 800510c:	bc70      	pop	{r4, r5, r6}
 800510e:	4770      	bx	lr
 8005110:	688c      	ldr	r4, [r1, #8]
 8005112:	6891      	ldr	r1, [r2, #8]
 8005114:	6880      	ldr	r0, [r0, #8]
 8005116:	0a09      	lsrs	r1, r1, #8
 8005118:	d032      	beq.n	8005180 <forward_relu+0x124>
 800511a:	68d5      	ldr	r5, [r2, #12]
 800511c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8005120:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005124:	4295      	cmp	r5, r2
 8005126:	fb01 f303 	mul.w	r3, r1, r3
 800512a:	d1f9      	bne.n	8005120 <forward_relu+0xc4>
 800512c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005130:	3a01      	subs	r2, #1
 8005132:	68b1      	ldr	r1, [r6, #8]
 8005134:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005138:	429c      	cmp	r4, r3
 800513a:	ed91 7a00 	vldr	s14, [r1]
 800513e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005142:	d8e3      	bhi.n	800510c <forward_relu+0xb0>
 8005144:	2500      	movs	r5, #0
 8005146:	3304      	adds	r3, #4
 8005148:	1d02      	adds	r2, r0, #4
 800514a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800514e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005156:	f1a3 0104 	sub.w	r1, r3, #4
 800515a:	f1a3 0308 	sub.w	r3, r3, #8
 800515e:	d405      	bmi.n	800516c <forward_relu+0x110>
 8005160:	429c      	cmp	r4, r3
 8005162:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005166:	d8d1      	bhi.n	800510c <forward_relu+0xb0>
 8005168:	460b      	mov	r3, r1
 800516a:	e7ee      	b.n	800514a <forward_relu+0xee>
 800516c:	429c      	cmp	r4, r3
 800516e:	ed62 7a01 	vstmdb	r2!, {s15}
 8005172:	d8cb      	bhi.n	800510c <forward_relu+0xb0>
 8005174:	460b      	mov	r3, r1
 8005176:	e7e8      	b.n	800514a <forward_relu+0xee>
 8005178:	2201      	movs	r2, #1
 800517a:	e793      	b.n	80050a4 <forward_relu+0x48>
 800517c:	4622      	mov	r2, r4
 800517e:	e7b1      	b.n	80050e4 <forward_relu+0x88>
 8005180:	68b2      	ldr	r2, [r6, #8]
 8005182:	4623      	mov	r3, r4
 8005184:	ed92 7a00 	vldr	s14, [r2]
 8005188:	e7dc      	b.n	8005144 <forward_relu+0xe8>
 800518a:	2300      	movs	r3, #0
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	deff      	udf	#255	@ 0xff
 8005190:	00000000 	.word	0x00000000

08005194 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8005194:	edd3 6a02 	vldr	s13, [r3, #8]
 8005198:	ed93 7a00 	vldr	s14, [r3]
 800519c:	ed93 6a01 	vldr	s12, [r3, #4]
 80051a0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80051a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a8:	d42a      	bmi.n	8005200 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80051aa:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80051ae:	3a01      	subs	r2, #1
 80051b0:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80051b4:	4561      	cmp	r1, ip
 80051b6:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80051ba:	d85d      	bhi.n	8005278 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80051bc:	1d11      	adds	r1, r2, #4
 80051be:	f10c 0304 	add.w	r3, ip, #4
 80051c2:	4408      	add	r0, r1
 80051c4:	ebac 0202 	sub.w	r2, ip, r2
 80051c8:	e00c      	b.n	80051e4 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80051ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d2:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80051d6:	db01      	blt.n	80051dc <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 80051d8:	ee65 7a86 	vmul.f32	s15, s11, s12
 80051dc:	4293      	cmp	r3, r2
 80051de:	ed60 7a01 	vstmdb	r0!, {s15}
 80051e2:	d00c      	beq.n	80051fe <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 80051e4:	ed73 7a01 	vldmdb	r3!, {s15}
 80051e8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80051ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f0:	daeb      	bge.n	80051ca <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 80051f2:	eef0 7a66 	vmov.f32	s15, s13
 80051f6:	4293      	cmp	r3, r2
 80051f8:	ed60 7a01 	vstmdb	r0!, {s15}
 80051fc:	d1f2      	bne.n	80051e4 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80051fe:	4770      	bx	lr
 8005200:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005204:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005208:	3a01      	subs	r2, #1
 800520a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8005212:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8005216:	d017      	beq.n	8005248 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 8005218:	4561      	cmp	r1, ip
 800521a:	d82d      	bhi.n	8005278 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800521c:	1d11      	adds	r1, r2, #4
 800521e:	f10c 0304 	add.w	r3, ip, #4
 8005222:	4401      	add	r1, r0
 8005224:	ebac 0202 	sub.w	r2, ip, r2
 8005228:	ed73 7a01 	vldmdb	r3!, {s15}
 800522c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005238:	ee66 6a86 	vmul.f32	s13, s13, s12
 800523c:	d81d      	bhi.n	800527a <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 800523e:	4293      	cmp	r3, r2
 8005240:	ed61 6a01 	vstmdb	r1!, {s13}
 8005244:	d1f0      	bne.n	8005228 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8005246:	4770      	bx	lr
 8005248:	4561      	cmp	r1, ip
 800524a:	d815      	bhi.n	8005278 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800524c:	1d11      	adds	r1, r2, #4
 800524e:	b500      	push	{lr}
 8005250:	f10c 0304 	add.w	r3, ip, #4
 8005254:	f04f 0e00 	mov.w	lr, #0
 8005258:	4401      	add	r1, r0
 800525a:	ebac 0202 	sub.w	r2, ip, r2
 800525e:	ed73 7a01 	vldmdb	r3!, {s15}
 8005262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526a:	d40b      	bmi.n	8005284 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 800526c:	4293      	cmp	r3, r2
 800526e:	f841 ed04 	str.w	lr, [r1, #-4]!
 8005272:	d1f4      	bne.n	800525e <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8005274:	f85d fb04 	ldr.w	pc, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	4293      	cmp	r3, r2
 800527c:	ed61 7a01 	vstmdb	r1!, {s15}
 8005280:	d1d2      	bne.n	8005228 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8005282:	4770      	bx	lr
 8005284:	4293      	cmp	r3, r2
 8005286:	ed61 7a01 	vstmdb	r1!, {s15}
 800528a:	d1e8      	bne.n	800525e <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800528c:	e7f2      	b.n	8005274 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800528e:	bf00      	nop

08005290 <forward_lite_dense_if32of32wf32>:
 8005290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005294:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8005298:	6801      	ldr	r1, [r0, #0]
 800529a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	b083      	sub	sp, #12
 80052a4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80052a8:	4299      	cmp	r1, r3
 80052aa:	9100      	str	r1, [sp, #0]
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	f080 811e 	bcs.w	80054ee <forward_lite_dense_if32of32wf32+0x25e>
 80052b2:	6904      	ldr	r4, [r0, #16]
 80052b4:	4607      	mov	r7, r0
 80052b6:	0096      	lsls	r6, r2, #2
 80052b8:	9b00      	ldr	r3, [sp, #0]
 80052ba:	68bd      	ldr	r5, [r7, #8]
 80052bc:	eb03 0e06 	add.w	lr, r3, r6
 80052c0:	459e      	cmp	lr, r3
 80052c2:	461e      	mov	r6, r3
 80052c4:	f240 8104 	bls.w	80054d0 <forward_lite_dense_if32of32wf32+0x240>
 80052c8:	f1a4 0c10 	sub.w	ip, r4, #16
 80052cc:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 80052d0:	f10c 0c01 	add.w	ip, ip, #1
 80052d4:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 80052d8:	ea4f 0984 	mov.w	r9, r4, lsl #2
 80052dc:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 80052e0:	2c0f      	cmp	r4, #15
 80052e2:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8005540 <forward_lite_dense_if32of32wf32+0x2b0>
 80052e6:	f240 8105 	bls.w	80054f4 <forward_lite_dense_if32of32wf32+0x264>
 80052ea:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 80052ee:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 80052f2:	4621      	mov	r1, r4
 80052f4:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 80052f8:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 80052fc:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 8005300:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8005304:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8005308:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 800530c:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 8005310:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8005314:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 8005318:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 800531c:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8005320:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8005324:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8005328:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800532c:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8005330:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005334:	3910      	subs	r1, #16
 8005336:	290f      	cmp	r1, #15
 8005338:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 800533c:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8005340:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005344:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8005348:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800534c:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8005350:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8005354:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005358:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800535c:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8005360:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005364:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8005368:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800536c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005370:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8005374:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8005378:	eee3 7a23 	vfma.f32	s15, s6, s7
 800537c:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8005380:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8005384:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005388:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 800538c:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8005390:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005394:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8005398:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800539c:	eee6 7a26 	vfma.f32	s15, s12, s13
 80053a0:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 80053a4:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 80053a8:	eee1 7a21 	vfma.f32	s15, s2, s3
 80053ac:	eee2 7a22 	vfma.f32	s15, s4, s5
 80053b0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80053b4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80053b8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80053bc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80053c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053c4:	d896      	bhi.n	80052f4 <forward_lite_dense_if32of32wf32+0x64>
 80053c6:	eb05 020b 	add.w	r2, r5, fp
 80053ca:	f004 010f 	and.w	r1, r4, #15
 80053ce:	4663      	mov	r3, ip
 80053d0:	2903      	cmp	r1, #3
 80053d2:	d95f      	bls.n	8005494 <forward_lite_dense_if32of32wf32+0x204>
 80053d4:	edd2 6a01 	vldr	s13, [r2, #4]
 80053d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80053dc:	ed93 6a00 	vldr	s12, [r3]
 80053e0:	ed93 5a02 	vldr	s10, [r3, #8]
 80053e4:	edd2 5a02 	vldr	s11, [r2, #8]
 80053e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80053ec:	edd2 6a00 	vldr	s13, [r2]
 80053f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80053f4:	1f08      	subs	r0, r1, #4
 80053f6:	2803      	cmp	r0, #3
 80053f8:	ed93 6a03 	vldr	s12, [r3, #12]
 80053fc:	edd2 6a03 	vldr	s13, [r2, #12]
 8005400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005404:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005408:	eee6 7a26 	vfma.f32	s15, s12, s13
 800540c:	eeb0 7a67 	vmov.f32	s14, s15
 8005410:	d938      	bls.n	8005484 <forward_lite_dense_if32of32wf32+0x1f4>
 8005412:	edd2 6a05 	vldr	s13, [r2, #20]
 8005416:	edd3 7a05 	vldr	s15, [r3, #20]
 800541a:	ed93 6a04 	vldr	s12, [r3, #16]
 800541e:	ed93 5a06 	vldr	s10, [r3, #24]
 8005422:	edd2 5a06 	vldr	s11, [r2, #24]
 8005426:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800542a:	edd2 6a04 	vldr	s13, [r2, #16]
 800542e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005432:	f1a1 0a08 	sub.w	sl, r1, #8
 8005436:	f1ba 0f03 	cmp.w	sl, #3
 800543a:	ed93 6a07 	vldr	s12, [r3, #28]
 800543e:	edd2 6a07 	vldr	s13, [r2, #28]
 8005442:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005446:	eee6 7a26 	vfma.f32	s15, s12, s13
 800544a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800544e:	d919      	bls.n	8005484 <forward_lite_dense_if32of32wf32+0x1f4>
 8005450:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8005454:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8005458:	ed92 6a08 	vldr	s12, [r2, #32]
 800545c:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8005460:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8005464:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005468:	edd3 6a08 	vldr	s13, [r3, #32]
 800546c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005470:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8005474:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8005478:	eee5 7a25 	vfma.f32	s15, s10, s11
 800547c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005484:	0880      	lsrs	r0, r0, #2
 8005486:	3001      	adds	r0, #1
 8005488:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800548c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8005490:	f001 0103 	and.w	r1, r1, #3
 8005494:	b1a9      	cbz	r1, 80054c2 <forward_lite_dense_if32of32wf32+0x232>
 8005496:	edd3 6a00 	vldr	s13, [r3]
 800549a:	edd2 7a00 	vldr	s15, [r2]
 800549e:	3901      	subs	r1, #1
 80054a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054a4:	d00d      	beq.n	80054c2 <forward_lite_dense_if32of32wf32+0x232>
 80054a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80054aa:	edd2 7a01 	vldr	s15, [r2, #4]
 80054ae:	2901      	cmp	r1, #1
 80054b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054b4:	d005      	beq.n	80054c2 <forward_lite_dense_if32of32wf32+0x232>
 80054b6:	edd2 6a02 	vldr	s13, [r2, #8]
 80054ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80054be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054c2:	444d      	add	r5, r9
 80054c4:	eca6 7a01 	vstmia	r6!, {s14}
 80054c8:	45b6      	cmp	lr, r6
 80054ca:	f63f af09 	bhi.w	80052e0 <forward_lite_dense_if32of32wf32+0x50>
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	b99b      	cbnz	r3, 80054fc <forward_lite_dense_if32of32wf32+0x26c>
 80054d4:	9b00      	ldr	r3, [sp, #0]
 80054d6:	9901      	ldr	r1, [sp, #4]
 80054d8:	693c      	ldr	r4, [r7, #16]
 80054da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80054de:	4299      	cmp	r1, r3
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80054e6:	ea4f 0682 	mov.w	r6, r2, lsl #2
 80054ea:	f63f aee5 	bhi.w	80052b8 <forward_lite_dense_if32of32wf32+0x28>
 80054ee:	b003      	add	sp, #12
 80054f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f4:	4621      	mov	r1, r4
 80054f6:	462a      	mov	r2, r5
 80054f8:	4643      	mov	r3, r8
 80054fa:	e769      	b.n	80053d0 <forward_lite_dense_if32of32wf32+0x140>
 80054fc:	2a00      	cmp	r2, #0
 80054fe:	d0e9      	beq.n	80054d4 <forward_lite_dense_if32of32wf32+0x244>
 8005500:	9a00      	ldr	r2, [sp, #0]
 8005502:	ed93 7a00 	vldr	s14, [r3]
 8005506:	edd2 7a00 	vldr	s15, [r2]
 800550a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800550e:	4613      	mov	r3, r2
 8005510:	edc2 7a00 	vstr	s15, [r2]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	2a01      	cmp	r2, #1
 8005518:	d9dc      	bls.n	80054d4 <forward_lite_dense_if32of32wf32+0x244>
 800551a:	1d19      	adds	r1, r3, #4
 800551c:	2301      	movs	r3, #1
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	ed91 7a00 	vldr	s14, [r1]
 8005524:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005528:	edd2 7a00 	vldr	s15, [r2]
 800552c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005530:	3301      	adds	r3, #1
 8005532:	ece1 7a01 	vstmia	r1!, {s15}
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	429a      	cmp	r2, r3
 800553a:	d8f0      	bhi.n	800551e <forward_lite_dense_if32of32wf32+0x28e>
 800553c:	e7ca      	b.n	80054d4 <forward_lite_dense_if32of32wf32+0x244>
 800553e:	bf00      	nop
 8005540:	00000000 	.word	0x00000000

08005544 <forward_lite_dense_if32of32wf32_lut4>:
 8005544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005548:	b08d      	sub	sp, #52	@ 0x34
 800554a:	4605      	mov	r5, r0
 800554c:	9005      	str	r0, [sp, #20]
 800554e:	920a      	str	r2, [sp, #40]	@ 0x28
 8005550:	4618      	mov	r0, r3
 8005552:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8005556:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8005558:	fb02 f303 	mul.w	r3, r2, r3
 800555c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005560:	460c      	mov	r4, r1
 8005562:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8005564:	9308      	str	r3, [sp, #32]
 8005566:	b126      	cbz	r6, 8005572 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8005568:	2240      	movs	r2, #64	@ 0x40
 800556a:	4631      	mov	r1, r6
 800556c:	f000 fa40 	bl	80059f0 <st_int8_copy>
 8005570:	4630      	mov	r0, r6
 8005572:	9b05      	ldr	r3, [sp, #20]
 8005574:	9a08      	ldr	r2, [sp, #32]
 8005576:	4293      	cmp	r3, r2
 8005578:	f080 80f5 	bcs.w	8005766 <forward_lite_dense_if32of32wf32_lut4+0x222>
 800557c:	08eb      	lsrs	r3, r5, #3
 800557e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	f005 0101 	and.w	r1, r5, #1
 8005586:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	0092      	lsls	r2, r2, #2
 800558e:	f025 0801 	bic.w	r8, r5, #1
 8005592:	9102      	str	r1, [sp, #8]
 8005594:	9304      	str	r3, [sp, #16]
 8005596:	00a9      	lsls	r1, r5, #2
 8005598:	9b05      	ldr	r3, [sp, #20]
 800559a:	9207      	str	r2, [sp, #28]
 800559c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80055a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80055a2:	f104 0b20 	add.w	fp, r4, #32
 80055a6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80055a8:	9a07      	ldr	r2, [sp, #28]
 80055aa:	eb03 0902 	add.w	r9, r3, r2
 80055ae:	4599      	cmp	r9, r3
 80055b0:	f1ab 0220 	sub.w	r2, fp, #32
 80055b4:	9206      	str	r2, [sp, #24]
 80055b6:	f240 80d9 	bls.w	800576c <forward_lite_dense_if32of32wf32_lut4+0x228>
 80055ba:	469e      	mov	lr, r3
 80055bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80055be:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80055c2:	9303      	str	r3, [sp, #12]
 80055c4:	9b01      	ldr	r3, [sp, #4]
 80055c6:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8005790 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 80b2 	beq.w	8005734 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 80055d0:	9b04      	ldr	r3, [sp, #16]
 80055d2:	18d5      	adds	r5, r2, r3
 80055d4:	465b      	mov	r3, fp
 80055d6:	7814      	ldrb	r4, [r2, #0]
 80055d8:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 80055dc:	7851      	ldrb	r1, [r2, #1]
 80055de:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 80055e2:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 80055e6:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 80055ea:	ed13 5a04 	vldr	s10, [r3, #-16]
 80055ee:	ed53 5a03 	vldr	s11, [r3, #-12]
 80055f2:	ed13 6a02 	vldr	s12, [r3, #-8]
 80055f6:	ed53 6a01 	vldr	s13, [r3, #-4]
 80055fa:	f004 060f 	and.w	r6, r4, #15
 80055fe:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005602:	edd6 7a00 	vldr	s15, [r6]
 8005606:	0924      	lsrs	r4, r4, #4
 8005608:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800560c:	ed94 3a00 	vldr	s6, [r4]
 8005610:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8005614:	090c      	lsrs	r4, r1, #4
 8005616:	eee3 7a23 	vfma.f32	s15, s6, s7
 800561a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800561e:	f001 010f 	and.w	r1, r1, #15
 8005622:	edd4 3a00 	vldr	s7, [r4]
 8005626:	7894      	ldrb	r4, [r2, #2]
 8005628:	eee3 7a84 	vfma.f32	s15, s7, s8
 800562c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005630:	0926      	lsrs	r6, r4, #4
 8005632:	ed91 4a00 	vldr	s8, [r1]
 8005636:	78d1      	ldrb	r1, [r2, #3]
 8005638:	eee4 7a24 	vfma.f32	s15, s8, s9
 800563c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005640:	f004 040f 	and.w	r4, r4, #15
 8005644:	edd6 4a00 	vldr	s9, [r6]
 8005648:	eee4 7a85 	vfma.f32	s15, s9, s10
 800564c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005650:	3204      	adds	r2, #4
 8005652:	ed94 5a00 	vldr	s10, [r4]
 8005656:	090c      	lsrs	r4, r1, #4
 8005658:	eee5 7a25 	vfma.f32	s15, s10, s11
 800565c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005660:	f001 010f 	and.w	r1, r1, #15
 8005664:	edd4 5a00 	vldr	s11, [r4]
 8005668:	eee5 7a86 	vfma.f32	s15, s11, s12
 800566c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005670:	42aa      	cmp	r2, r5
 8005672:	ed91 6a00 	vldr	s12, [r1]
 8005676:	eee6 7a26 	vfma.f32	s15, s12, s13
 800567a:	f103 0320 	add.w	r3, r3, #32
 800567e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005682:	d1a8      	bne.n	80055d6 <forward_lite_dense_if32of32wf32_lut4+0x92>
 8005684:	4656      	mov	r6, sl
 8005686:	4546      	cmp	r6, r8
 8005688:	d258      	bcs.n	800573c <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 800568a:	9b03      	ldr	r3, [sp, #12]
 800568c:	1b9c      	subs	r4, r3, r6
 800568e:	08e7      	lsrs	r7, r4, #3
 8005690:	f106 0208 	add.w	r2, r6, #8
 8005694:	1e69      	subs	r1, r5, #1
 8005696:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 800569a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800569e:	ed52 5a01 	vldr	s11, [r2, #-4]
 80056a2:	ed52 6a02 	vldr	s13, [r2, #-8]
 80056a6:	f003 0c0f 	and.w	ip, r3, #15
 80056aa:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80056ae:	eddc 7a00 	vldr	s15, [ip]
 80056b2:	091b      	lsrs	r3, r3, #4
 80056b4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80056b8:	ed93 6a00 	vldr	s12, [r3]
 80056bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80056c0:	42a1      	cmp	r1, r4
 80056c2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80056c6:	f102 0208 	add.w	r2, r2, #8
 80056ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056ce:	d1e4      	bne.n	800569a <forward_lite_dense_if32of32wf32_lut4+0x156>
 80056d0:	3701      	adds	r7, #1
 80056d2:	19ea      	adds	r2, r5, r7
 80056d4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 80056d8:	9b02      	ldr	r3, [sp, #8]
 80056da:	b30b      	cbz	r3, 8005720 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 80056dc:	f812 3b01 	ldrb.w	r3, [r2], #1
 80056e0:	edd6 7a00 	vldr	s15, [r6]
 80056e4:	091b      	lsrs	r3, r3, #4
 80056e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80056ea:	edd3 6a00 	vldr	s13, [r3]
 80056ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80056f2:	ecae 7a01 	vstmia	lr!, {s14}
 80056f6:	45f1      	cmp	r9, lr
 80056f8:	f63f af64 	bhi.w	80055c4 <forward_lite_dense_if32of32wf32_lut4+0x80>
 80056fc:	9b05      	ldr	r3, [sp, #20]
 80056fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005700:	1899      	adds	r1, r3, r2
 8005702:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005704:	b9e3      	cbnz	r3, 8005740 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8005706:	9b08      	ldr	r3, [sp, #32]
 8005708:	428b      	cmp	r3, r1
 800570a:	d92c      	bls.n	8005766 <forward_lite_dense_if32of32wf32_lut4+0x222>
 800570c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800570e:	4498      	add	r8, r3
 8005710:	449a      	add	sl, r3
 8005712:	449b      	add	fp, r3
 8005714:	9b05      	ldr	r3, [sp, #20]
 8005716:	4599      	cmp	r9, r3
 8005718:	d92a      	bls.n	8005770 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800571a:	9105      	str	r1, [sp, #20]
 800571c:	460b      	mov	r3, r1
 800571e:	e743      	b.n	80055a8 <forward_lite_dense_if32of32wf32_lut4+0x64>
 8005720:	ecae 7a01 	vstmia	lr!, {s14}
 8005724:	45f1      	cmp	r9, lr
 8005726:	d9e9      	bls.n	80056fc <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 8005728:	9b01      	ldr	r3, [sp, #4]
 800572a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005790 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800572e:	2b00      	cmp	r3, #0
 8005730:	f47f af4e 	bne.w	80055d0 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 8005734:	9e06      	ldr	r6, [sp, #24]
 8005736:	4546      	cmp	r6, r8
 8005738:	4615      	mov	r5, r2
 800573a:	d3a6      	bcc.n	800568a <forward_lite_dense_if32of32wf32_lut4+0x146>
 800573c:	462a      	mov	r2, r5
 800573e:	e7cb      	b.n	80056d8 <forward_lite_dense_if32of32wf32_lut4+0x194>
 8005740:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0df      	beq.n	8005706 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8005746:	9b07      	ldr	r3, [sp, #28]
 8005748:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800574a:	1acb      	subs	r3, r1, r3
 800574c:	edd3 7a00 	vldr	s15, [r3]
 8005750:	ecb2 7a01 	vldmia	r2!, {s14}
 8005754:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005758:	ece3 7a01 	vstmia	r3!, {s15}
 800575c:	428b      	cmp	r3, r1
 800575e:	d1f5      	bne.n	800574c <forward_lite_dense_if32of32wf32_lut4+0x208>
 8005760:	9b08      	ldr	r3, [sp, #32]
 8005762:	428b      	cmp	r3, r1
 8005764:	d8d2      	bhi.n	800570c <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 8005766:	b00d      	add	sp, #52	@ 0x34
 8005768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800576c:	4619      	mov	r1, r3
 800576e:	e7c8      	b.n	8005702 <forward_lite_dense_if32of32wf32_lut4+0x1be>
 8005770:	9b07      	ldr	r3, [sp, #28]
 8005772:	1acb      	subs	r3, r1, r3
 8005774:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005776:	461a      	mov	r2, r3
 8005778:	ed92 7a00 	vldr	s14, [r2]
 800577c:	ecf0 7a01 	vldmia	r0!, {s15}
 8005780:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005784:	ece2 7a01 	vstmia	r2!, {s15}
 8005788:	428a      	cmp	r2, r1
 800578a:	d1f5      	bne.n	8005778 <forward_lite_dense_if32of32wf32_lut4+0x234>
 800578c:	e7f2      	b.n	8005774 <forward_lite_dense_if32of32wf32_lut4+0x230>
 800578e:	bf00      	nop
 8005790:	00000000 	.word	0x00000000

08005794 <forward_lite_dense_if32of32wf32_lut8>:
 8005794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005798:	b087      	sub	sp, #28
 800579a:	460f      	mov	r7, r1
 800579c:	9204      	str	r2, [sp, #16]
 800579e:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 80057a2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80057a4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80057a6:	fb01 f202 	mul.w	r2, r1, r2
 80057aa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80057ae:	4605      	mov	r5, r0
 80057b0:	9202      	str	r2, [sp, #8]
 80057b2:	b136      	cbz	r6, 80057c2 <forward_lite_dense_if32of32wf32_lut8+0x2e>
 80057b4:	4618      	mov	r0, r3
 80057b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80057ba:	4631      	mov	r1, r6
 80057bc:	f000 f918 	bl	80059f0 <st_int8_copy>
 80057c0:	4633      	mov	r3, r6
 80057c2:	9a02      	ldr	r2, [sp, #8]
 80057c4:	4295      	cmp	r5, r2
 80057c6:	f080 80f9 	bcs.w	80059bc <forward_lite_dense_if32of32wf32_lut8+0x228>
 80057ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80057cc:	0092      	lsls	r2, r2, #2
 80057ce:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 80057d2:	9201      	str	r2, [sp, #4]
 80057d4:	9205      	str	r2, [sp, #20]
 80057d6:	462a      	mov	r2, r5
 80057d8:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 80057dc:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 80057e0:	464d      	mov	r5, r9
 80057e2:	4691      	mov	r9, r2
 80057e4:	9a01      	ldr	r2, [sp, #4]
 80057e6:	eb09 0e02 	add.w	lr, r9, r2
 80057ea:	00a1      	lsls	r1, r4, #2
 80057ec:	3720      	adds	r7, #32
 80057ee:	45ce      	cmp	lr, r9
 80057f0:	f004 0007 	and.w	r0, r4, #7
 80057f4:	9103      	str	r1, [sp, #12]
 80057f6:	f1a7 0b20 	sub.w	fp, r7, #32
 80057fa:	f240 80c8 	bls.w	800598e <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 80057fe:	9a04      	ldr	r2, [sp, #16]
 8005800:	46cc      	mov	ip, r9
 8005802:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80059ec <forward_lite_dense_if32of32wf32_lut8+0x258>
 8005806:	2d00      	cmp	r5, #0
 8005808:	f000 80dd 	beq.w	80059c6 <forward_lite_dense_if32of32wf32_lut8+0x232>
 800580c:	eb02 060a 	add.w	r6, r2, sl
 8005810:	4639      	mov	r1, r7
 8005812:	7854      	ldrb	r4, [r2, #1]
 8005814:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 8005818:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 800581c:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 8005820:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 8005824:	ed11 5a04 	vldr	s10, [r1, #-16]
 8005828:	ed51 5a03 	vldr	s11, [r1, #-12]
 800582c:	ed11 6a02 	vldr	s12, [r1, #-8]
 8005830:	ed51 6a01 	vldr	s13, [r1, #-4]
 8005834:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005838:	edd4 7a00 	vldr	s15, [r4]
 800583c:	7814      	ldrb	r4, [r2, #0]
 800583e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005842:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005846:	ed94 3a00 	vldr	s6, [r4]
 800584a:	7894      	ldrb	r4, [r2, #2]
 800584c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005850:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005854:	3208      	adds	r2, #8
 8005856:	edd4 3a00 	vldr	s7, [r4]
 800585a:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 800585e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005862:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005866:	3120      	adds	r1, #32
 8005868:	ed94 4a00 	vldr	s8, [r4]
 800586c:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 8005870:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005874:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005878:	edd4 4a00 	vldr	s9, [r4]
 800587c:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 8005880:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005884:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005888:	ed94 5a00 	vldr	s10, [r4]
 800588c:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8005890:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005894:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005898:	edd4 5a00 	vldr	s11, [r4]
 800589c:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 80058a0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80058a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80058a8:	42b2      	cmp	r2, r6
 80058aa:	ed94 6a00 	vldr	s12, [r4]
 80058ae:	eee6 7a26 	vfma.f32	s15, s12, s13
 80058b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058b6:	d1ac      	bne.n	8005812 <forward_lite_dense_if32of32wf32_lut8+0x7e>
 80058b8:	4642      	mov	r2, r8
 80058ba:	2800      	cmp	r0, #0
 80058bc:	f000 8081 	beq.w	80059c2 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 80058c0:	7831      	ldrb	r1, [r6, #0]
 80058c2:	edd2 7a00 	vldr	s15, [r2]
 80058c6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80058ca:	edd1 6a00 	vldr	s13, [r1]
 80058ce:	2801      	cmp	r0, #1
 80058d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80058d4:	d03f      	beq.n	8005956 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80058d6:	7871      	ldrb	r1, [r6, #1]
 80058d8:	edd2 7a01 	vldr	s15, [r2, #4]
 80058dc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80058e0:	edd1 6a00 	vldr	s13, [r1]
 80058e4:	2802      	cmp	r0, #2
 80058e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80058ea:	d034      	beq.n	8005956 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80058ec:	78b1      	ldrb	r1, [r6, #2]
 80058ee:	edd2 7a02 	vldr	s15, [r2, #8]
 80058f2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80058f6:	edd1 6a00 	vldr	s13, [r1]
 80058fa:	2803      	cmp	r0, #3
 80058fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005900:	d029      	beq.n	8005956 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8005902:	78f1      	ldrb	r1, [r6, #3]
 8005904:	edd2 6a03 	vldr	s13, [r2, #12]
 8005908:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800590c:	edd1 7a00 	vldr	s15, [r1]
 8005910:	2804      	cmp	r0, #4
 8005912:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005916:	d01e      	beq.n	8005956 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8005918:	7931      	ldrb	r1, [r6, #4]
 800591a:	edd2 6a04 	vldr	s13, [r2, #16]
 800591e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005922:	edd1 7a00 	vldr	s15, [r1]
 8005926:	2805      	cmp	r0, #5
 8005928:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800592c:	d013      	beq.n	8005956 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800592e:	7971      	ldrb	r1, [r6, #5]
 8005930:	edd2 6a05 	vldr	s13, [r2, #20]
 8005934:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005938:	edd1 7a00 	vldr	s15, [r1]
 800593c:	2806      	cmp	r0, #6
 800593e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005942:	d008      	beq.n	8005956 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8005944:	edd2 7a06 	vldr	s15, [r2, #24]
 8005948:	79b2      	ldrb	r2, [r6, #6]
 800594a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800594e:	edd2 6a00 	vldr	s13, [r2]
 8005952:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005956:	1832      	adds	r2, r6, r0
 8005958:	ecac 7a01 	vstmia	ip!, {s14}
 800595c:	45e6      	cmp	lr, ip
 800595e:	f63f af50 	bhi.w	8005802 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8005962:	9a05      	ldr	r2, [sp, #20]
 8005964:	eb09 0402 	add.w	r4, r9, r2
 8005968:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800596a:	b9a2      	cbnz	r2, 8005996 <forward_lite_dense_if32of32wf32_lut8+0x202>
 800596c:	9a02      	ldr	r2, [sp, #8]
 800596e:	42a2      	cmp	r2, r4
 8005970:	d924      	bls.n	80059bc <forward_lite_dense_if32of32wf32_lut8+0x228>
 8005972:	9a03      	ldr	r2, [sp, #12]
 8005974:	45ce      	cmp	lr, r9
 8005976:	4490      	add	r8, r2
 8005978:	4417      	add	r7, r2
 800597a:	d927      	bls.n	80059cc <forward_lite_dense_if32of32wf32_lut8+0x238>
 800597c:	9a01      	ldr	r2, [sp, #4]
 800597e:	46a1      	mov	r9, r4
 8005980:	eb09 0e02 	add.w	lr, r9, r2
 8005984:	45ce      	cmp	lr, r9
 8005986:	f1a7 0b20 	sub.w	fp, r7, #32
 800598a:	f63f af38 	bhi.w	80057fe <forward_lite_dense_if32of32wf32_lut8+0x6a>
 800598e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005990:	464c      	mov	r4, r9
 8005992:	2a00      	cmp	r2, #0
 8005994:	d0ea      	beq.n	800596c <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8005996:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005998:	2a00      	cmp	r2, #0
 800599a:	d0e7      	beq.n	800596c <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800599c:	9a01      	ldr	r2, [sp, #4]
 800599e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80059a0:	1aa2      	subs	r2, r4, r2
 80059a2:	edd2 7a00 	vldr	s15, [r2]
 80059a6:	ecb1 7a01 	vldmia	r1!, {s14}
 80059aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059ae:	ece2 7a01 	vstmia	r2!, {s15}
 80059b2:	4294      	cmp	r4, r2
 80059b4:	d1f5      	bne.n	80059a2 <forward_lite_dense_if32of32wf32_lut8+0x20e>
 80059b6:	9a02      	ldr	r2, [sp, #8]
 80059b8:	42a2      	cmp	r2, r4
 80059ba:	d8da      	bhi.n	8005972 <forward_lite_dense_if32of32wf32_lut8+0x1de>
 80059bc:	b007      	add	sp, #28
 80059be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c2:	4632      	mov	r2, r6
 80059c4:	e7c8      	b.n	8005958 <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 80059c6:	4616      	mov	r6, r2
 80059c8:	465a      	mov	r2, fp
 80059ca:	e776      	b.n	80058ba <forward_lite_dense_if32of32wf32_lut8+0x126>
 80059cc:	9b01      	ldr	r3, [sp, #4]
 80059ce:	1ae3      	subs	r3, r4, r3
 80059d0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80059d2:	461a      	mov	r2, r3
 80059d4:	ed92 7a00 	vldr	s14, [r2]
 80059d8:	ecf1 7a01 	vldmia	r1!, {s15}
 80059dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059e0:	ece2 7a01 	vstmia	r2!, {s15}
 80059e4:	42a2      	cmp	r2, r4
 80059e6:	d1f5      	bne.n	80059d4 <forward_lite_dense_if32of32wf32_lut8+0x240>
 80059e8:	e7f2      	b.n	80059d0 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 80059ea:	bf00      	nop
 80059ec:	00000000 	.word	0x00000000

080059f0 <st_int8_copy>:
 80059f0:	4288      	cmp	r0, r1
 80059f2:	d022      	beq.n	8005a3a <st_int8_copy+0x4a>
 80059f4:	b30a      	cbz	r2, 8005a3a <st_int8_copy+0x4a>
 80059f6:	4288      	cmp	r0, r1
 80059f8:	d312      	bcc.n	8005a20 <st_int8_copy+0x30>
 80059fa:	2a03      	cmp	r2, #3
 80059fc:	d81e      	bhi.n	8005a3c <st_int8_copy+0x4c>
 80059fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005a02:	f801 3b01 	strb.w	r3, [r1], #1
 8005a06:	2a01      	cmp	r2, #1
 8005a08:	d017      	beq.n	8005a3a <st_int8_copy+0x4a>
 8005a0a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005a0e:	f801 3b01 	strb.w	r3, [r1], #1
 8005a12:	2a02      	cmp	r2, #2
 8005a14:	d011      	beq.n	8005a3a <st_int8_copy+0x4a>
 8005a16:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005a1a:	f801 3b01 	strb.w	r3, [r1], #1
 8005a1e:	4770      	bx	lr
 8005a20:	1883      	adds	r3, r0, r2
 8005a22:	4299      	cmp	r1, r3
 8005a24:	d2e9      	bcs.n	80059fa <st_int8_copy+0xa>
 8005a26:	4298      	cmp	r0, r3
 8005a28:	440a      	add	r2, r1
 8005a2a:	d206      	bcs.n	8005a3a <st_int8_copy+0x4a>
 8005a2c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8005a30:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8005a34:	4298      	cmp	r0, r3
 8005a36:	d1f9      	bne.n	8005a2c <st_int8_copy+0x3c>
 8005a38:	4770      	bx	lr
 8005a3a:	4770      	bx	lr
 8005a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a40:	f001 0403 	and.w	r4, r1, #3
 8005a44:	f1c4 0304 	rsb	r3, r4, #4
 8005a48:	f000 0e03 	and.w	lr, r0, #3
 8005a4c:	eba2 0c03 	sub.w	ip, r2, r3
 8005a50:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005a54:	f801 3b01 	strb.w	r3, [r1], #1
 8005a58:	2c03      	cmp	r4, #3
 8005a5a:	f1c4 0202 	rsb	r2, r4, #2
 8005a5e:	d00e      	beq.n	8005a7e <st_int8_copy+0x8e>
 8005a60:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005a64:	f801 3b01 	strb.w	r3, [r1], #1
 8005a68:	2a00      	cmp	r2, #0
 8005a6a:	dd08      	ble.n	8005a7e <st_int8_copy+0x8e>
 8005a6c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005a70:	f801 3b01 	strb.w	r3, [r1], #1
 8005a74:	b91c      	cbnz	r4, 8005a7e <st_int8_copy+0x8e>
 8005a76:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005a7a:	f801 3b01 	strb.w	r3, [r1], #1
 8005a7e:	4574      	cmp	r4, lr
 8005a80:	d02b      	beq.n	8005ada <st_int8_copy+0xea>
 8005a82:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8005a86:	1e5a      	subs	r2, r3, #1
 8005a88:	b153      	cbz	r3, 8005aa0 <st_int8_copy+0xb0>
 8005a8a:	f850 3b04 	ldr.w	r3, [r0], #4
 8005a8e:	f850 4b04 	ldr.w	r4, [r0], #4
 8005a92:	f850 5b04 	ldr.w	r5, [r0], #4
 8005a96:	f850 6b04 	ldr.w	r6, [r0], #4
 8005a9a:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8005a9c:	3a01      	subs	r2, #1
 8005a9e:	d2f4      	bcs.n	8005a8a <st_int8_copy+0x9a>
 8005aa0:	f01c 0f08 	tst.w	ip, #8
 8005aa4:	d004      	beq.n	8005ab0 <st_int8_copy+0xc0>
 8005aa6:	f850 3b04 	ldr.w	r3, [r0], #4
 8005aaa:	f850 4b04 	ldr.w	r4, [r0], #4
 8005aae:	c118      	stmia	r1!, {r3, r4}
 8005ab0:	f01c 0f04 	tst.w	ip, #4
 8005ab4:	d003      	beq.n	8005abe <st_int8_copy+0xce>
 8005ab6:	f850 3b04 	ldr.w	r3, [r0], #4
 8005aba:	f841 3b04 	str.w	r3, [r1], #4
 8005abe:	f01c 0f02 	tst.w	ip, #2
 8005ac2:	d003      	beq.n	8005acc <st_int8_copy+0xdc>
 8005ac4:	f830 3b02 	ldrh.w	r3, [r0], #2
 8005ac8:	f821 3b02 	strh.w	r3, [r1], #2
 8005acc:	f01c 0f01 	tst.w	ip, #1
 8005ad0:	d001      	beq.n	8005ad6 <st_int8_copy+0xe6>
 8005ad2:	7803      	ldrb	r3, [r0, #0]
 8005ad4:	700b      	strb	r3, [r1, #0]
 8005ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ada:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8005ade:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
 8005ae2:	b183      	cbz	r3, 8005b06 <st_int8_copy+0x116>
 8005ae4:	4688      	mov	r8, r1
 8005ae6:	4686      	mov	lr, r0
 8005ae8:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8005aec:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8005af0:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8005af4:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8005af8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8005afc:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8005b00:	4641      	mov	r1, r8
 8005b02:	4670      	mov	r0, lr
 8005b04:	d1ee      	bne.n	8005ae4 <st_int8_copy+0xf4>
 8005b06:	f01c 0f20 	tst.w	ip, #32
 8005b0a:	d007      	beq.n	8005b1c <st_int8_copy+0x12c>
 8005b0c:	4688      	mov	r8, r1
 8005b0e:	4686      	mov	lr, r0
 8005b10:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8005b14:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8005b18:	4641      	mov	r1, r8
 8005b1a:	4670      	mov	r0, lr
 8005b1c:	f01c 0f10 	tst.w	ip, #16
 8005b20:	d001      	beq.n	8005b26 <st_int8_copy+0x136>
 8005b22:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8005b24:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8005b26:	f01c 0f08 	tst.w	ip, #8
 8005b2a:	d0c1      	beq.n	8005ab0 <st_int8_copy+0xc0>
 8005b2c:	c818      	ldmia	r0!, {r3, r4}
 8005b2e:	c118      	stmia	r1!, {r3, r4}
 8005b30:	e7be      	b.n	8005ab0 <st_int8_copy+0xc0>
 8005b32:	bf00      	nop

08005b34 <ai_array_to_buffer_fmt>:
 8005b34:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d055      	beq.n	8005be8 <ai_array_to_buffer_fmt+0xb4>
 8005b3c:	4a2d      	ldr	r2, [pc, #180]	@ (8005bf4 <ai_array_to_buffer_fmt+0xc0>)
 8005b3e:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d010      	beq.n	8005b68 <ai_array_to_buffer_fmt+0x34>
 8005b46:	dc21      	bgt.n	8005b8c <ai_array_to_buffer_fmt+0x58>
 8005b48:	4a2b      	ldr	r2, [pc, #172]	@ (8005bf8 <ai_array_to_buffer_fmt+0xc4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00c      	beq.n	8005b68 <ai_array_to_buffer_fmt+0x34>
 8005b4e:	dd0f      	ble.n	8005b70 <ai_array_to_buffer_fmt+0x3c>
 8005b50:	4a2a      	ldr	r2, [pc, #168]	@ (8005bfc <ai_array_to_buffer_fmt+0xc8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d008      	beq.n	8005b68 <ai_array_to_buffer_fmt+0x34>
 8005b56:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <ai_array_to_buffer_fmt+0x34>
 8005b5e:	4a28      	ldr	r2, [pc, #160]	@ (8005c00 <ai_array_to_buffer_fmt+0xcc>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	bf0c      	ite	eq
 8005b64:	4613      	moveq	r3, r2
 8005b66:	2340      	movne	r3, #64	@ 0x40
 8005b68:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8005b6c:	4318      	orrs	r0, r3
 8005b6e:	4770      	bx	lr
 8005b70:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d0f7      	beq.n	8005b68 <ai_array_to_buffer_fmt+0x34>
 8005b78:	dd2c      	ble.n	8005bd4 <ai_array_to_buffer_fmt+0xa0>
 8005b7a:	4a22      	ldr	r2, [pc, #136]	@ (8005c04 <ai_array_to_buffer_fmt+0xd0>)
 8005b7c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8005b80:	4293      	cmp	r3, r2
 8005b82:	bf0c      	ite	eq
 8005b84:	4613      	moveq	r3, r2
 8005b86:	2340      	movne	r3, #64	@ 0x40
 8005b88:	4318      	orrs	r0, r3
 8005b8a:	4770      	bx	lr
 8005b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8005c08 <ai_array_to_buffer_fmt+0xd4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d0ea      	beq.n	8005b68 <ai_array_to_buffer_fmt+0x34>
 8005b92:	dd10      	ble.n	8005bb6 <ai_array_to_buffer_fmt+0x82>
 8005b94:	4a1d      	ldr	r2, [pc, #116]	@ (8005c0c <ai_array_to_buffer_fmt+0xd8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d0e6      	beq.n	8005b68 <ai_array_to_buffer_fmt+0x34>
 8005b9a:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d0e2      	beq.n	8005b68 <ai_array_to_buffer_fmt+0x34>
 8005ba2:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	bf0c      	ite	eq
 8005baa:	4613      	moveq	r3, r2
 8005bac:	2340      	movne	r3, #64	@ 0x40
 8005bae:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8005bb2:	4318      	orrs	r0, r3
 8005bb4:	4770      	bx	lr
 8005bb6:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d0d4      	beq.n	8005b68 <ai_array_to_buffer_fmt+0x34>
 8005bbe:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d0d0      	beq.n	8005b68 <ai_array_to_buffer_fmt+0x34>
 8005bc6:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	bf0c      	ite	eq
 8005bce:	4613      	moveq	r3, r2
 8005bd0:	2340      	movne	r3, #64	@ 0x40
 8005bd2:	e7c9      	b.n	8005b68 <ai_array_to_buffer_fmt+0x34>
 8005bd4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d0c5      	beq.n	8005b68 <ai_array_to_buffer_fmt+0x34>
 8005bdc:	3280      	adds	r2, #128	@ 0x80
 8005bde:	4293      	cmp	r3, r2
 8005be0:	bf0c      	ite	eq
 8005be2:	4613      	moveq	r3, r2
 8005be4:	2340      	movne	r3, #64	@ 0x40
 8005be6:	e7bf      	b.n	8005b68 <ai_array_to_buffer_fmt+0x34>
 8005be8:	4b09      	ldr	r3, [pc, #36]	@ (8005c10 <ai_array_to_buffer_fmt+0xdc>)
 8005bea:	4003      	ands	r3, r0
 8005bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bf0:	e7ba      	b.n	8005b68 <ai_array_to_buffer_fmt+0x34>
 8005bf2:	bf00      	nop
 8005bf4:	00821040 	.word	0x00821040
 8005bf8:	00040840 	.word	0x00040840
 8005bfc:	00041040 	.word	0x00041040
 8005c00:	0004084f 	.word	0x0004084f
 8005c04:	00040447 	.word	0x00040447
 8005c08:	00840447 	.word	0x00840447
 8005c0c:	0084084f 	.word	0x0084084f
 8005c10:	00803fff 	.word	0x00803fff

08005c14 <ai_array_get_data_byte_size>:
 8005c14:	b169      	cbz	r1, 8005c32 <ai_array_get_data_byte_size+0x1e>
 8005c16:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005c1a:	fb03 f101 	mul.w	r1, r3, r1
 8005c1e:	1dcb      	adds	r3, r1, #7
 8005c20:	f023 0307 	bic.w	r3, r3, #7
 8005c24:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8005c28:	fa23 f000 	lsr.w	r0, r3, r0
 8005c2c:	3007      	adds	r0, #7
 8005c2e:	08c0      	lsrs	r0, r0, #3
 8005c30:	4770      	bx	lr
 8005c32:	4608      	mov	r0, r1
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop

08005c38 <ai_version_get>:
 8005c38:	0212      	lsls	r2, r2, #8
 8005c3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005c3e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8005c42:	4770      	bx	lr

08005c44 <get_tensor_byte_size>:
 8005c44:	b410      	push	{r4}
 8005c46:	6983      	ldr	r3, [r0, #24]
 8005c48:	68c4      	ldr	r4, [r0, #12]
 8005c4a:	6941      	ldr	r1, [r0, #20]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68e0      	ldr	r0, [r4, #12]
 8005c50:	4a07      	ldr	r2, [pc, #28]	@ (8005c70 <get_tensor_byte_size+0x2c>)
 8005c52:	68c9      	ldr	r1, [r1, #12]
 8005c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c58:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8005c5c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005c60:	fb01 f000 	mul.w	r0, r1, r0
 8005c64:	4293      	cmp	r3, r2
 8005c66:	bf04      	itt	eq
 8005c68:	3007      	addeq	r0, #7
 8005c6a:	08c0      	lsreq	r0, r0, #3
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	000400c0 	.word	0x000400c0

08005c74 <sbrk_aligned>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	4e0f      	ldr	r6, [pc, #60]	@ (8005cb4 <sbrk_aligned+0x40>)
 8005c78:	460c      	mov	r4, r1
 8005c7a:	6831      	ldr	r1, [r6, #0]
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	b911      	cbnz	r1, 8005c86 <sbrk_aligned+0x12>
 8005c80:	f000 f9e0 	bl	8006044 <_sbrk_r>
 8005c84:	6030      	str	r0, [r6, #0]
 8005c86:	4621      	mov	r1, r4
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 f9db 	bl	8006044 <_sbrk_r>
 8005c8e:	1c43      	adds	r3, r0, #1
 8005c90:	d103      	bne.n	8005c9a <sbrk_aligned+0x26>
 8005c92:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005c96:	4620      	mov	r0, r4
 8005c98:	bd70      	pop	{r4, r5, r6, pc}
 8005c9a:	1cc4      	adds	r4, r0, #3
 8005c9c:	f024 0403 	bic.w	r4, r4, #3
 8005ca0:	42a0      	cmp	r0, r4
 8005ca2:	d0f8      	beq.n	8005c96 <sbrk_aligned+0x22>
 8005ca4:	1a21      	subs	r1, r4, r0
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 f9cc 	bl	8006044 <_sbrk_r>
 8005cac:	3001      	adds	r0, #1
 8005cae:	d1f2      	bne.n	8005c96 <sbrk_aligned+0x22>
 8005cb0:	e7ef      	b.n	8005c92 <sbrk_aligned+0x1e>
 8005cb2:	bf00      	nop
 8005cb4:	20000dec 	.word	0x20000dec

08005cb8 <_malloc_r>:
 8005cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cbc:	1ccd      	adds	r5, r1, #3
 8005cbe:	f025 0503 	bic.w	r5, r5, #3
 8005cc2:	3508      	adds	r5, #8
 8005cc4:	2d0c      	cmp	r5, #12
 8005cc6:	bf38      	it	cc
 8005cc8:	250c      	movcc	r5, #12
 8005cca:	2d00      	cmp	r5, #0
 8005ccc:	4606      	mov	r6, r0
 8005cce:	db01      	blt.n	8005cd4 <_malloc_r+0x1c>
 8005cd0:	42a9      	cmp	r1, r5
 8005cd2:	d904      	bls.n	8005cde <_malloc_r+0x26>
 8005cd4:	230c      	movs	r3, #12
 8005cd6:	6033      	str	r3, [r6, #0]
 8005cd8:	2000      	movs	r0, #0
 8005cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005db4 <_malloc_r+0xfc>
 8005ce2:	f000 f869 	bl	8005db8 <__malloc_lock>
 8005ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cea:	461c      	mov	r4, r3
 8005cec:	bb44      	cbnz	r4, 8005d40 <_malloc_r+0x88>
 8005cee:	4629      	mov	r1, r5
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	f7ff ffbf 	bl	8005c74 <sbrk_aligned>
 8005cf6:	1c43      	adds	r3, r0, #1
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	d158      	bne.n	8005dae <_malloc_r+0xf6>
 8005cfc:	f8d8 4000 	ldr.w	r4, [r8]
 8005d00:	4627      	mov	r7, r4
 8005d02:	2f00      	cmp	r7, #0
 8005d04:	d143      	bne.n	8005d8e <_malloc_r+0xd6>
 8005d06:	2c00      	cmp	r4, #0
 8005d08:	d04b      	beq.n	8005da2 <_malloc_r+0xea>
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	4639      	mov	r1, r7
 8005d0e:	4630      	mov	r0, r6
 8005d10:	eb04 0903 	add.w	r9, r4, r3
 8005d14:	f000 f996 	bl	8006044 <_sbrk_r>
 8005d18:	4581      	cmp	r9, r0
 8005d1a:	d142      	bne.n	8005da2 <_malloc_r+0xea>
 8005d1c:	6821      	ldr	r1, [r4, #0]
 8005d1e:	1a6d      	subs	r5, r5, r1
 8005d20:	4629      	mov	r1, r5
 8005d22:	4630      	mov	r0, r6
 8005d24:	f7ff ffa6 	bl	8005c74 <sbrk_aligned>
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d03a      	beq.n	8005da2 <_malloc_r+0xea>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	442b      	add	r3, r5
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	f8d8 3000 	ldr.w	r3, [r8]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	bb62      	cbnz	r2, 8005d94 <_malloc_r+0xdc>
 8005d3a:	f8c8 7000 	str.w	r7, [r8]
 8005d3e:	e00f      	b.n	8005d60 <_malloc_r+0xa8>
 8005d40:	6822      	ldr	r2, [r4, #0]
 8005d42:	1b52      	subs	r2, r2, r5
 8005d44:	d420      	bmi.n	8005d88 <_malloc_r+0xd0>
 8005d46:	2a0b      	cmp	r2, #11
 8005d48:	d917      	bls.n	8005d7a <_malloc_r+0xc2>
 8005d4a:	1961      	adds	r1, r4, r5
 8005d4c:	42a3      	cmp	r3, r4
 8005d4e:	6025      	str	r5, [r4, #0]
 8005d50:	bf18      	it	ne
 8005d52:	6059      	strne	r1, [r3, #4]
 8005d54:	6863      	ldr	r3, [r4, #4]
 8005d56:	bf08      	it	eq
 8005d58:	f8c8 1000 	streq.w	r1, [r8]
 8005d5c:	5162      	str	r2, [r4, r5]
 8005d5e:	604b      	str	r3, [r1, #4]
 8005d60:	4630      	mov	r0, r6
 8005d62:	f000 f82f 	bl	8005dc4 <__malloc_unlock>
 8005d66:	f104 000b 	add.w	r0, r4, #11
 8005d6a:	1d23      	adds	r3, r4, #4
 8005d6c:	f020 0007 	bic.w	r0, r0, #7
 8005d70:	1ac2      	subs	r2, r0, r3
 8005d72:	bf1c      	itt	ne
 8005d74:	1a1b      	subne	r3, r3, r0
 8005d76:	50a3      	strne	r3, [r4, r2]
 8005d78:	e7af      	b.n	8005cda <_malloc_r+0x22>
 8005d7a:	6862      	ldr	r2, [r4, #4]
 8005d7c:	42a3      	cmp	r3, r4
 8005d7e:	bf0c      	ite	eq
 8005d80:	f8c8 2000 	streq.w	r2, [r8]
 8005d84:	605a      	strne	r2, [r3, #4]
 8005d86:	e7eb      	b.n	8005d60 <_malloc_r+0xa8>
 8005d88:	4623      	mov	r3, r4
 8005d8a:	6864      	ldr	r4, [r4, #4]
 8005d8c:	e7ae      	b.n	8005cec <_malloc_r+0x34>
 8005d8e:	463c      	mov	r4, r7
 8005d90:	687f      	ldr	r7, [r7, #4]
 8005d92:	e7b6      	b.n	8005d02 <_malloc_r+0x4a>
 8005d94:	461a      	mov	r2, r3
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	42a3      	cmp	r3, r4
 8005d9a:	d1fb      	bne.n	8005d94 <_malloc_r+0xdc>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	6053      	str	r3, [r2, #4]
 8005da0:	e7de      	b.n	8005d60 <_malloc_r+0xa8>
 8005da2:	230c      	movs	r3, #12
 8005da4:	6033      	str	r3, [r6, #0]
 8005da6:	4630      	mov	r0, r6
 8005da8:	f000 f80c 	bl	8005dc4 <__malloc_unlock>
 8005dac:	e794      	b.n	8005cd8 <_malloc_r+0x20>
 8005dae:	6005      	str	r5, [r0, #0]
 8005db0:	e7d6      	b.n	8005d60 <_malloc_r+0xa8>
 8005db2:	bf00      	nop
 8005db4:	20000df0 	.word	0x20000df0

08005db8 <__malloc_lock>:
 8005db8:	4801      	ldr	r0, [pc, #4]	@ (8005dc0 <__malloc_lock+0x8>)
 8005dba:	f000 b97e 	b.w	80060ba <__retarget_lock_acquire_recursive>
 8005dbe:	bf00      	nop
 8005dc0:	20000f30 	.word	0x20000f30

08005dc4 <__malloc_unlock>:
 8005dc4:	4801      	ldr	r0, [pc, #4]	@ (8005dcc <__malloc_unlock+0x8>)
 8005dc6:	f000 b979 	b.w	80060bc <__retarget_lock_release_recursive>
 8005dca:	bf00      	nop
 8005dcc:	20000f30 	.word	0x20000f30

08005dd0 <std>:
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	b510      	push	{r4, lr}
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8005dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dde:	6083      	str	r3, [r0, #8]
 8005de0:	8181      	strh	r1, [r0, #12]
 8005de2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005de4:	81c2      	strh	r2, [r0, #14]
 8005de6:	6183      	str	r3, [r0, #24]
 8005de8:	4619      	mov	r1, r3
 8005dea:	2208      	movs	r2, #8
 8005dec:	305c      	adds	r0, #92	@ 0x5c
 8005dee:	f000 f921 	bl	8006034 <memset>
 8005df2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e28 <std+0x58>)
 8005df4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005df6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e2c <std+0x5c>)
 8005df8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005e30 <std+0x60>)
 8005dfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005e34 <std+0x64>)
 8005e00:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e02:	4b0d      	ldr	r3, [pc, #52]	@ (8005e38 <std+0x68>)
 8005e04:	6224      	str	r4, [r4, #32]
 8005e06:	429c      	cmp	r4, r3
 8005e08:	d006      	beq.n	8005e18 <std+0x48>
 8005e0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005e0e:	4294      	cmp	r4, r2
 8005e10:	d002      	beq.n	8005e18 <std+0x48>
 8005e12:	33d0      	adds	r3, #208	@ 0xd0
 8005e14:	429c      	cmp	r4, r3
 8005e16:	d105      	bne.n	8005e24 <std+0x54>
 8005e18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e20:	f000 b94a 	b.w	80060b8 <__retarget_lock_init_recursive>
 8005e24:	bd10      	pop	{r4, pc}
 8005e26:	bf00      	nop
 8005e28:	0800684d 	.word	0x0800684d
 8005e2c:	0800686f 	.word	0x0800686f
 8005e30:	080068a7 	.word	0x080068a7
 8005e34:	080068cb 	.word	0x080068cb
 8005e38:	20000df4 	.word	0x20000df4

08005e3c <stdio_exit_handler>:
 8005e3c:	4a02      	ldr	r2, [pc, #8]	@ (8005e48 <stdio_exit_handler+0xc>)
 8005e3e:	4903      	ldr	r1, [pc, #12]	@ (8005e4c <stdio_exit_handler+0x10>)
 8005e40:	4803      	ldr	r0, [pc, #12]	@ (8005e50 <stdio_exit_handler+0x14>)
 8005e42:	f000 b869 	b.w	8005f18 <_fwalk_sglue>
 8005e46:	bf00      	nop
 8005e48:	20000920 	.word	0x20000920
 8005e4c:	080067fd 	.word	0x080067fd
 8005e50:	20000930 	.word	0x20000930

08005e54 <cleanup_stdio>:
 8005e54:	6841      	ldr	r1, [r0, #4]
 8005e56:	4b0c      	ldr	r3, [pc, #48]	@ (8005e88 <cleanup_stdio+0x34>)
 8005e58:	4299      	cmp	r1, r3
 8005e5a:	b510      	push	{r4, lr}
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	d001      	beq.n	8005e64 <cleanup_stdio+0x10>
 8005e60:	f000 fccc 	bl	80067fc <_fflush_r>
 8005e64:	68a1      	ldr	r1, [r4, #8]
 8005e66:	4b09      	ldr	r3, [pc, #36]	@ (8005e8c <cleanup_stdio+0x38>)
 8005e68:	4299      	cmp	r1, r3
 8005e6a:	d002      	beq.n	8005e72 <cleanup_stdio+0x1e>
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f000 fcc5 	bl	80067fc <_fflush_r>
 8005e72:	68e1      	ldr	r1, [r4, #12]
 8005e74:	4b06      	ldr	r3, [pc, #24]	@ (8005e90 <cleanup_stdio+0x3c>)
 8005e76:	4299      	cmp	r1, r3
 8005e78:	d004      	beq.n	8005e84 <cleanup_stdio+0x30>
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e80:	f000 bcbc 	b.w	80067fc <_fflush_r>
 8005e84:	bd10      	pop	{r4, pc}
 8005e86:	bf00      	nop
 8005e88:	20000df4 	.word	0x20000df4
 8005e8c:	20000e5c 	.word	0x20000e5c
 8005e90:	20000ec4 	.word	0x20000ec4

08005e94 <global_stdio_init.part.0>:
 8005e94:	b510      	push	{r4, lr}
 8005e96:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec4 <global_stdio_init.part.0+0x30>)
 8005e98:	4c0b      	ldr	r4, [pc, #44]	@ (8005ec8 <global_stdio_init.part.0+0x34>)
 8005e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8005ecc <global_stdio_init.part.0+0x38>)
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2104      	movs	r1, #4
 8005ea4:	f7ff ff94 	bl	8005dd0 <std>
 8005ea8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005eac:	2201      	movs	r2, #1
 8005eae:	2109      	movs	r1, #9
 8005eb0:	f7ff ff8e 	bl	8005dd0 <std>
 8005eb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005eb8:	2202      	movs	r2, #2
 8005eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ebe:	2112      	movs	r1, #18
 8005ec0:	f7ff bf86 	b.w	8005dd0 <std>
 8005ec4:	20000f2c 	.word	0x20000f2c
 8005ec8:	20000df4 	.word	0x20000df4
 8005ecc:	08005e3d 	.word	0x08005e3d

08005ed0 <__sfp_lock_acquire>:
 8005ed0:	4801      	ldr	r0, [pc, #4]	@ (8005ed8 <__sfp_lock_acquire+0x8>)
 8005ed2:	f000 b8f2 	b.w	80060ba <__retarget_lock_acquire_recursive>
 8005ed6:	bf00      	nop
 8005ed8:	20000f31 	.word	0x20000f31

08005edc <__sfp_lock_release>:
 8005edc:	4801      	ldr	r0, [pc, #4]	@ (8005ee4 <__sfp_lock_release+0x8>)
 8005ede:	f000 b8ed 	b.w	80060bc <__retarget_lock_release_recursive>
 8005ee2:	bf00      	nop
 8005ee4:	20000f31 	.word	0x20000f31

08005ee8 <__sinit>:
 8005ee8:	b510      	push	{r4, lr}
 8005eea:	4604      	mov	r4, r0
 8005eec:	f7ff fff0 	bl	8005ed0 <__sfp_lock_acquire>
 8005ef0:	6a23      	ldr	r3, [r4, #32]
 8005ef2:	b11b      	cbz	r3, 8005efc <__sinit+0x14>
 8005ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ef8:	f7ff bff0 	b.w	8005edc <__sfp_lock_release>
 8005efc:	4b04      	ldr	r3, [pc, #16]	@ (8005f10 <__sinit+0x28>)
 8005efe:	6223      	str	r3, [r4, #32]
 8005f00:	4b04      	ldr	r3, [pc, #16]	@ (8005f14 <__sinit+0x2c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f5      	bne.n	8005ef4 <__sinit+0xc>
 8005f08:	f7ff ffc4 	bl	8005e94 <global_stdio_init.part.0>
 8005f0c:	e7f2      	b.n	8005ef4 <__sinit+0xc>
 8005f0e:	bf00      	nop
 8005f10:	08005e55 	.word	0x08005e55
 8005f14:	20000f2c 	.word	0x20000f2c

08005f18 <_fwalk_sglue>:
 8005f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	4688      	mov	r8, r1
 8005f20:	4614      	mov	r4, r2
 8005f22:	2600      	movs	r6, #0
 8005f24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f28:	f1b9 0901 	subs.w	r9, r9, #1
 8005f2c:	d505      	bpl.n	8005f3a <_fwalk_sglue+0x22>
 8005f2e:	6824      	ldr	r4, [r4, #0]
 8005f30:	2c00      	cmp	r4, #0
 8005f32:	d1f7      	bne.n	8005f24 <_fwalk_sglue+0xc>
 8005f34:	4630      	mov	r0, r6
 8005f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f3a:	89ab      	ldrh	r3, [r5, #12]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d907      	bls.n	8005f50 <_fwalk_sglue+0x38>
 8005f40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f44:	3301      	adds	r3, #1
 8005f46:	d003      	beq.n	8005f50 <_fwalk_sglue+0x38>
 8005f48:	4629      	mov	r1, r5
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	47c0      	blx	r8
 8005f4e:	4306      	orrs	r6, r0
 8005f50:	3568      	adds	r5, #104	@ 0x68
 8005f52:	e7e9      	b.n	8005f28 <_fwalk_sglue+0x10>

08005f54 <iprintf>:
 8005f54:	b40f      	push	{r0, r1, r2, r3}
 8005f56:	b507      	push	{r0, r1, r2, lr}
 8005f58:	4906      	ldr	r1, [pc, #24]	@ (8005f74 <iprintf+0x20>)
 8005f5a:	ab04      	add	r3, sp, #16
 8005f5c:	6808      	ldr	r0, [r1, #0]
 8005f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f62:	6881      	ldr	r1, [r0, #8]
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	f000 f91f 	bl	80061a8 <_vfiprintf_r>
 8005f6a:	b003      	add	sp, #12
 8005f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f70:	b004      	add	sp, #16
 8005f72:	4770      	bx	lr
 8005f74:	2000092c 	.word	0x2000092c

08005f78 <_puts_r>:
 8005f78:	6a03      	ldr	r3, [r0, #32]
 8005f7a:	b570      	push	{r4, r5, r6, lr}
 8005f7c:	6884      	ldr	r4, [r0, #8]
 8005f7e:	4605      	mov	r5, r0
 8005f80:	460e      	mov	r6, r1
 8005f82:	b90b      	cbnz	r3, 8005f88 <_puts_r+0x10>
 8005f84:	f7ff ffb0 	bl	8005ee8 <__sinit>
 8005f88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f8a:	07db      	lsls	r3, r3, #31
 8005f8c:	d405      	bmi.n	8005f9a <_puts_r+0x22>
 8005f8e:	89a3      	ldrh	r3, [r4, #12]
 8005f90:	0598      	lsls	r0, r3, #22
 8005f92:	d402      	bmi.n	8005f9a <_puts_r+0x22>
 8005f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f96:	f000 f890 	bl	80060ba <__retarget_lock_acquire_recursive>
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	0719      	lsls	r1, r3, #28
 8005f9e:	d502      	bpl.n	8005fa6 <_puts_r+0x2e>
 8005fa0:	6923      	ldr	r3, [r4, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d135      	bne.n	8006012 <_puts_r+0x9a>
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f000 fcd1 	bl	8006950 <__swsetup_r>
 8005fae:	b380      	cbz	r0, 8006012 <_puts_r+0x9a>
 8005fb0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005fb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fb6:	07da      	lsls	r2, r3, #31
 8005fb8:	d405      	bmi.n	8005fc6 <_puts_r+0x4e>
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	059b      	lsls	r3, r3, #22
 8005fbe:	d402      	bmi.n	8005fc6 <_puts_r+0x4e>
 8005fc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fc2:	f000 f87b 	bl	80060bc <__retarget_lock_release_recursive>
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	da04      	bge.n	8005fd8 <_puts_r+0x60>
 8005fce:	69a2      	ldr	r2, [r4, #24]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	dc17      	bgt.n	8006004 <_puts_r+0x8c>
 8005fd4:	290a      	cmp	r1, #10
 8005fd6:	d015      	beq.n	8006004 <_puts_r+0x8c>
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	6022      	str	r2, [r4, #0]
 8005fde:	7019      	strb	r1, [r3, #0]
 8005fe0:	68a3      	ldr	r3, [r4, #8]
 8005fe2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	60a3      	str	r3, [r4, #8]
 8005fea:	2900      	cmp	r1, #0
 8005fec:	d1ed      	bne.n	8005fca <_puts_r+0x52>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	da11      	bge.n	8006016 <_puts_r+0x9e>
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	210a      	movs	r1, #10
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f000 fc6b 	bl	80068d2 <__swbuf_r>
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d0d7      	beq.n	8005fb0 <_puts_r+0x38>
 8006000:	250a      	movs	r5, #10
 8006002:	e7d7      	b.n	8005fb4 <_puts_r+0x3c>
 8006004:	4622      	mov	r2, r4
 8006006:	4628      	mov	r0, r5
 8006008:	f000 fc63 	bl	80068d2 <__swbuf_r>
 800600c:	3001      	adds	r0, #1
 800600e:	d1e7      	bne.n	8005fe0 <_puts_r+0x68>
 8006010:	e7ce      	b.n	8005fb0 <_puts_r+0x38>
 8006012:	3e01      	subs	r6, #1
 8006014:	e7e4      	b.n	8005fe0 <_puts_r+0x68>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	6022      	str	r2, [r4, #0]
 800601c:	220a      	movs	r2, #10
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	e7ee      	b.n	8006000 <_puts_r+0x88>
	...

08006024 <puts>:
 8006024:	4b02      	ldr	r3, [pc, #8]	@ (8006030 <puts+0xc>)
 8006026:	4601      	mov	r1, r0
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	f7ff bfa5 	b.w	8005f78 <_puts_r>
 800602e:	bf00      	nop
 8006030:	2000092c 	.word	0x2000092c

08006034 <memset>:
 8006034:	4402      	add	r2, r0
 8006036:	4603      	mov	r3, r0
 8006038:	4293      	cmp	r3, r2
 800603a:	d100      	bne.n	800603e <memset+0xa>
 800603c:	4770      	bx	lr
 800603e:	f803 1b01 	strb.w	r1, [r3], #1
 8006042:	e7f9      	b.n	8006038 <memset+0x4>

08006044 <_sbrk_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4d06      	ldr	r5, [pc, #24]	@ (8006060 <_sbrk_r+0x1c>)
 8006048:	2300      	movs	r3, #0
 800604a:	4604      	mov	r4, r0
 800604c:	4608      	mov	r0, r1
 800604e:	602b      	str	r3, [r5, #0]
 8006050:	f7fa fc18 	bl	8000884 <_sbrk>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_sbrk_r+0x1a>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	b103      	cbz	r3, 800605e <_sbrk_r+0x1a>
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	20000f34 	.word	0x20000f34

08006064 <__errno>:
 8006064:	4b01      	ldr	r3, [pc, #4]	@ (800606c <__errno+0x8>)
 8006066:	6818      	ldr	r0, [r3, #0]
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	2000092c 	.word	0x2000092c

08006070 <__libc_init_array>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	4d0d      	ldr	r5, [pc, #52]	@ (80060a8 <__libc_init_array+0x38>)
 8006074:	4c0d      	ldr	r4, [pc, #52]	@ (80060ac <__libc_init_array+0x3c>)
 8006076:	1b64      	subs	r4, r4, r5
 8006078:	10a4      	asrs	r4, r4, #2
 800607a:	2600      	movs	r6, #0
 800607c:	42a6      	cmp	r6, r4
 800607e:	d109      	bne.n	8006094 <__libc_init_array+0x24>
 8006080:	4d0b      	ldr	r5, [pc, #44]	@ (80060b0 <__libc_init_array+0x40>)
 8006082:	4c0c      	ldr	r4, [pc, #48]	@ (80060b4 <__libc_init_array+0x44>)
 8006084:	f000 fee8 	bl	8006e58 <_init>
 8006088:	1b64      	subs	r4, r4, r5
 800608a:	10a4      	asrs	r4, r4, #2
 800608c:	2600      	movs	r6, #0
 800608e:	42a6      	cmp	r6, r4
 8006090:	d105      	bne.n	800609e <__libc_init_array+0x2e>
 8006092:	bd70      	pop	{r4, r5, r6, pc}
 8006094:	f855 3b04 	ldr.w	r3, [r5], #4
 8006098:	4798      	blx	r3
 800609a:	3601      	adds	r6, #1
 800609c:	e7ee      	b.n	800607c <__libc_init_array+0xc>
 800609e:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a2:	4798      	blx	r3
 80060a4:	3601      	adds	r6, #1
 80060a6:	e7f2      	b.n	800608e <__libc_init_array+0x1e>
 80060a8:	0801216c 	.word	0x0801216c
 80060ac:	0801216c 	.word	0x0801216c
 80060b0:	0801216c 	.word	0x0801216c
 80060b4:	08012170 	.word	0x08012170

080060b8 <__retarget_lock_init_recursive>:
 80060b8:	4770      	bx	lr

080060ba <__retarget_lock_acquire_recursive>:
 80060ba:	4770      	bx	lr

080060bc <__retarget_lock_release_recursive>:
 80060bc:	4770      	bx	lr
	...

080060c0 <_free_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	4605      	mov	r5, r0
 80060c4:	2900      	cmp	r1, #0
 80060c6:	d041      	beq.n	800614c <_free_r+0x8c>
 80060c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060cc:	1f0c      	subs	r4, r1, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bfb8      	it	lt
 80060d2:	18e4      	addlt	r4, r4, r3
 80060d4:	f7ff fe70 	bl	8005db8 <__malloc_lock>
 80060d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006150 <_free_r+0x90>)
 80060da:	6813      	ldr	r3, [r2, #0]
 80060dc:	b933      	cbnz	r3, 80060ec <_free_r+0x2c>
 80060de:	6063      	str	r3, [r4, #4]
 80060e0:	6014      	str	r4, [r2, #0]
 80060e2:	4628      	mov	r0, r5
 80060e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060e8:	f7ff be6c 	b.w	8005dc4 <__malloc_unlock>
 80060ec:	42a3      	cmp	r3, r4
 80060ee:	d908      	bls.n	8006102 <_free_r+0x42>
 80060f0:	6820      	ldr	r0, [r4, #0]
 80060f2:	1821      	adds	r1, r4, r0
 80060f4:	428b      	cmp	r3, r1
 80060f6:	bf01      	itttt	eq
 80060f8:	6819      	ldreq	r1, [r3, #0]
 80060fa:	685b      	ldreq	r3, [r3, #4]
 80060fc:	1809      	addeq	r1, r1, r0
 80060fe:	6021      	streq	r1, [r4, #0]
 8006100:	e7ed      	b.n	80060de <_free_r+0x1e>
 8006102:	461a      	mov	r2, r3
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	b10b      	cbz	r3, 800610c <_free_r+0x4c>
 8006108:	42a3      	cmp	r3, r4
 800610a:	d9fa      	bls.n	8006102 <_free_r+0x42>
 800610c:	6811      	ldr	r1, [r2, #0]
 800610e:	1850      	adds	r0, r2, r1
 8006110:	42a0      	cmp	r0, r4
 8006112:	d10b      	bne.n	800612c <_free_r+0x6c>
 8006114:	6820      	ldr	r0, [r4, #0]
 8006116:	4401      	add	r1, r0
 8006118:	1850      	adds	r0, r2, r1
 800611a:	4283      	cmp	r3, r0
 800611c:	6011      	str	r1, [r2, #0]
 800611e:	d1e0      	bne.n	80060e2 <_free_r+0x22>
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	6053      	str	r3, [r2, #4]
 8006126:	4408      	add	r0, r1
 8006128:	6010      	str	r0, [r2, #0]
 800612a:	e7da      	b.n	80060e2 <_free_r+0x22>
 800612c:	d902      	bls.n	8006134 <_free_r+0x74>
 800612e:	230c      	movs	r3, #12
 8006130:	602b      	str	r3, [r5, #0]
 8006132:	e7d6      	b.n	80060e2 <_free_r+0x22>
 8006134:	6820      	ldr	r0, [r4, #0]
 8006136:	1821      	adds	r1, r4, r0
 8006138:	428b      	cmp	r3, r1
 800613a:	bf04      	itt	eq
 800613c:	6819      	ldreq	r1, [r3, #0]
 800613e:	685b      	ldreq	r3, [r3, #4]
 8006140:	6063      	str	r3, [r4, #4]
 8006142:	bf04      	itt	eq
 8006144:	1809      	addeq	r1, r1, r0
 8006146:	6021      	streq	r1, [r4, #0]
 8006148:	6054      	str	r4, [r2, #4]
 800614a:	e7ca      	b.n	80060e2 <_free_r+0x22>
 800614c:	bd38      	pop	{r3, r4, r5, pc}
 800614e:	bf00      	nop
 8006150:	20000df0 	.word	0x20000df0

08006154 <__sfputc_r>:
 8006154:	6893      	ldr	r3, [r2, #8]
 8006156:	3b01      	subs	r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	b410      	push	{r4}
 800615c:	6093      	str	r3, [r2, #8]
 800615e:	da08      	bge.n	8006172 <__sfputc_r+0x1e>
 8006160:	6994      	ldr	r4, [r2, #24]
 8006162:	42a3      	cmp	r3, r4
 8006164:	db01      	blt.n	800616a <__sfputc_r+0x16>
 8006166:	290a      	cmp	r1, #10
 8006168:	d103      	bne.n	8006172 <__sfputc_r+0x1e>
 800616a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800616e:	f000 bbb0 	b.w	80068d2 <__swbuf_r>
 8006172:	6813      	ldr	r3, [r2, #0]
 8006174:	1c58      	adds	r0, r3, #1
 8006176:	6010      	str	r0, [r2, #0]
 8006178:	7019      	strb	r1, [r3, #0]
 800617a:	4608      	mov	r0, r1
 800617c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006180:	4770      	bx	lr

08006182 <__sfputs_r>:
 8006182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006184:	4606      	mov	r6, r0
 8006186:	460f      	mov	r7, r1
 8006188:	4614      	mov	r4, r2
 800618a:	18d5      	adds	r5, r2, r3
 800618c:	42ac      	cmp	r4, r5
 800618e:	d101      	bne.n	8006194 <__sfputs_r+0x12>
 8006190:	2000      	movs	r0, #0
 8006192:	e007      	b.n	80061a4 <__sfputs_r+0x22>
 8006194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006198:	463a      	mov	r2, r7
 800619a:	4630      	mov	r0, r6
 800619c:	f7ff ffda 	bl	8006154 <__sfputc_r>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d1f3      	bne.n	800618c <__sfputs_r+0xa>
 80061a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061a8 <_vfiprintf_r>:
 80061a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ac:	460d      	mov	r5, r1
 80061ae:	b09d      	sub	sp, #116	@ 0x74
 80061b0:	4614      	mov	r4, r2
 80061b2:	4698      	mov	r8, r3
 80061b4:	4606      	mov	r6, r0
 80061b6:	b118      	cbz	r0, 80061c0 <_vfiprintf_r+0x18>
 80061b8:	6a03      	ldr	r3, [r0, #32]
 80061ba:	b90b      	cbnz	r3, 80061c0 <_vfiprintf_r+0x18>
 80061bc:	f7ff fe94 	bl	8005ee8 <__sinit>
 80061c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061c2:	07d9      	lsls	r1, r3, #31
 80061c4:	d405      	bmi.n	80061d2 <_vfiprintf_r+0x2a>
 80061c6:	89ab      	ldrh	r3, [r5, #12]
 80061c8:	059a      	lsls	r2, r3, #22
 80061ca:	d402      	bmi.n	80061d2 <_vfiprintf_r+0x2a>
 80061cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061ce:	f7ff ff74 	bl	80060ba <__retarget_lock_acquire_recursive>
 80061d2:	89ab      	ldrh	r3, [r5, #12]
 80061d4:	071b      	lsls	r3, r3, #28
 80061d6:	d501      	bpl.n	80061dc <_vfiprintf_r+0x34>
 80061d8:	692b      	ldr	r3, [r5, #16]
 80061da:	b99b      	cbnz	r3, 8006204 <_vfiprintf_r+0x5c>
 80061dc:	4629      	mov	r1, r5
 80061de:	4630      	mov	r0, r6
 80061e0:	f000 fbb6 	bl	8006950 <__swsetup_r>
 80061e4:	b170      	cbz	r0, 8006204 <_vfiprintf_r+0x5c>
 80061e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061e8:	07dc      	lsls	r4, r3, #31
 80061ea:	d504      	bpl.n	80061f6 <_vfiprintf_r+0x4e>
 80061ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061f0:	b01d      	add	sp, #116	@ 0x74
 80061f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f6:	89ab      	ldrh	r3, [r5, #12]
 80061f8:	0598      	lsls	r0, r3, #22
 80061fa:	d4f7      	bmi.n	80061ec <_vfiprintf_r+0x44>
 80061fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061fe:	f7ff ff5d 	bl	80060bc <__retarget_lock_release_recursive>
 8006202:	e7f3      	b.n	80061ec <_vfiprintf_r+0x44>
 8006204:	2300      	movs	r3, #0
 8006206:	9309      	str	r3, [sp, #36]	@ 0x24
 8006208:	2320      	movs	r3, #32
 800620a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800620e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006212:	2330      	movs	r3, #48	@ 0x30
 8006214:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80063c4 <_vfiprintf_r+0x21c>
 8006218:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800621c:	f04f 0901 	mov.w	r9, #1
 8006220:	4623      	mov	r3, r4
 8006222:	469a      	mov	sl, r3
 8006224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006228:	b10a      	cbz	r2, 800622e <_vfiprintf_r+0x86>
 800622a:	2a25      	cmp	r2, #37	@ 0x25
 800622c:	d1f9      	bne.n	8006222 <_vfiprintf_r+0x7a>
 800622e:	ebba 0b04 	subs.w	fp, sl, r4
 8006232:	d00b      	beq.n	800624c <_vfiprintf_r+0xa4>
 8006234:	465b      	mov	r3, fp
 8006236:	4622      	mov	r2, r4
 8006238:	4629      	mov	r1, r5
 800623a:	4630      	mov	r0, r6
 800623c:	f7ff ffa1 	bl	8006182 <__sfputs_r>
 8006240:	3001      	adds	r0, #1
 8006242:	f000 80a7 	beq.w	8006394 <_vfiprintf_r+0x1ec>
 8006246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006248:	445a      	add	r2, fp
 800624a:	9209      	str	r2, [sp, #36]	@ 0x24
 800624c:	f89a 3000 	ldrb.w	r3, [sl]
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 809f 	beq.w	8006394 <_vfiprintf_r+0x1ec>
 8006256:	2300      	movs	r3, #0
 8006258:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800625c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006260:	f10a 0a01 	add.w	sl, sl, #1
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	9307      	str	r3, [sp, #28]
 8006268:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800626c:	931a      	str	r3, [sp, #104]	@ 0x68
 800626e:	4654      	mov	r4, sl
 8006270:	2205      	movs	r2, #5
 8006272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006276:	4853      	ldr	r0, [pc, #332]	@ (80063c4 <_vfiprintf_r+0x21c>)
 8006278:	f7f9 ffc2 	bl	8000200 <memchr>
 800627c:	9a04      	ldr	r2, [sp, #16]
 800627e:	b9d8      	cbnz	r0, 80062b8 <_vfiprintf_r+0x110>
 8006280:	06d1      	lsls	r1, r2, #27
 8006282:	bf44      	itt	mi
 8006284:	2320      	movmi	r3, #32
 8006286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800628a:	0713      	lsls	r3, r2, #28
 800628c:	bf44      	itt	mi
 800628e:	232b      	movmi	r3, #43	@ 0x2b
 8006290:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006294:	f89a 3000 	ldrb.w	r3, [sl]
 8006298:	2b2a      	cmp	r3, #42	@ 0x2a
 800629a:	d015      	beq.n	80062c8 <_vfiprintf_r+0x120>
 800629c:	9a07      	ldr	r2, [sp, #28]
 800629e:	4654      	mov	r4, sl
 80062a0:	2000      	movs	r0, #0
 80062a2:	f04f 0c0a 	mov.w	ip, #10
 80062a6:	4621      	mov	r1, r4
 80062a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062ac:	3b30      	subs	r3, #48	@ 0x30
 80062ae:	2b09      	cmp	r3, #9
 80062b0:	d94b      	bls.n	800634a <_vfiprintf_r+0x1a2>
 80062b2:	b1b0      	cbz	r0, 80062e2 <_vfiprintf_r+0x13a>
 80062b4:	9207      	str	r2, [sp, #28]
 80062b6:	e014      	b.n	80062e2 <_vfiprintf_r+0x13a>
 80062b8:	eba0 0308 	sub.w	r3, r0, r8
 80062bc:	fa09 f303 	lsl.w	r3, r9, r3
 80062c0:	4313      	orrs	r3, r2
 80062c2:	9304      	str	r3, [sp, #16]
 80062c4:	46a2      	mov	sl, r4
 80062c6:	e7d2      	b.n	800626e <_vfiprintf_r+0xc6>
 80062c8:	9b03      	ldr	r3, [sp, #12]
 80062ca:	1d19      	adds	r1, r3, #4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	9103      	str	r1, [sp, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	bfbb      	ittet	lt
 80062d4:	425b      	neglt	r3, r3
 80062d6:	f042 0202 	orrlt.w	r2, r2, #2
 80062da:	9307      	strge	r3, [sp, #28]
 80062dc:	9307      	strlt	r3, [sp, #28]
 80062de:	bfb8      	it	lt
 80062e0:	9204      	strlt	r2, [sp, #16]
 80062e2:	7823      	ldrb	r3, [r4, #0]
 80062e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80062e6:	d10a      	bne.n	80062fe <_vfiprintf_r+0x156>
 80062e8:	7863      	ldrb	r3, [r4, #1]
 80062ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80062ec:	d132      	bne.n	8006354 <_vfiprintf_r+0x1ac>
 80062ee:	9b03      	ldr	r3, [sp, #12]
 80062f0:	1d1a      	adds	r2, r3, #4
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	9203      	str	r2, [sp, #12]
 80062f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062fa:	3402      	adds	r4, #2
 80062fc:	9305      	str	r3, [sp, #20]
 80062fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80063d4 <_vfiprintf_r+0x22c>
 8006302:	7821      	ldrb	r1, [r4, #0]
 8006304:	2203      	movs	r2, #3
 8006306:	4650      	mov	r0, sl
 8006308:	f7f9 ff7a 	bl	8000200 <memchr>
 800630c:	b138      	cbz	r0, 800631e <_vfiprintf_r+0x176>
 800630e:	9b04      	ldr	r3, [sp, #16]
 8006310:	eba0 000a 	sub.w	r0, r0, sl
 8006314:	2240      	movs	r2, #64	@ 0x40
 8006316:	4082      	lsls	r2, r0
 8006318:	4313      	orrs	r3, r2
 800631a:	3401      	adds	r4, #1
 800631c:	9304      	str	r3, [sp, #16]
 800631e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006322:	4829      	ldr	r0, [pc, #164]	@ (80063c8 <_vfiprintf_r+0x220>)
 8006324:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006328:	2206      	movs	r2, #6
 800632a:	f7f9 ff69 	bl	8000200 <memchr>
 800632e:	2800      	cmp	r0, #0
 8006330:	d03f      	beq.n	80063b2 <_vfiprintf_r+0x20a>
 8006332:	4b26      	ldr	r3, [pc, #152]	@ (80063cc <_vfiprintf_r+0x224>)
 8006334:	bb1b      	cbnz	r3, 800637e <_vfiprintf_r+0x1d6>
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	3307      	adds	r3, #7
 800633a:	f023 0307 	bic.w	r3, r3, #7
 800633e:	3308      	adds	r3, #8
 8006340:	9303      	str	r3, [sp, #12]
 8006342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006344:	443b      	add	r3, r7
 8006346:	9309      	str	r3, [sp, #36]	@ 0x24
 8006348:	e76a      	b.n	8006220 <_vfiprintf_r+0x78>
 800634a:	fb0c 3202 	mla	r2, ip, r2, r3
 800634e:	460c      	mov	r4, r1
 8006350:	2001      	movs	r0, #1
 8006352:	e7a8      	b.n	80062a6 <_vfiprintf_r+0xfe>
 8006354:	2300      	movs	r3, #0
 8006356:	3401      	adds	r4, #1
 8006358:	9305      	str	r3, [sp, #20]
 800635a:	4619      	mov	r1, r3
 800635c:	f04f 0c0a 	mov.w	ip, #10
 8006360:	4620      	mov	r0, r4
 8006362:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006366:	3a30      	subs	r2, #48	@ 0x30
 8006368:	2a09      	cmp	r2, #9
 800636a:	d903      	bls.n	8006374 <_vfiprintf_r+0x1cc>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0c6      	beq.n	80062fe <_vfiprintf_r+0x156>
 8006370:	9105      	str	r1, [sp, #20]
 8006372:	e7c4      	b.n	80062fe <_vfiprintf_r+0x156>
 8006374:	fb0c 2101 	mla	r1, ip, r1, r2
 8006378:	4604      	mov	r4, r0
 800637a:	2301      	movs	r3, #1
 800637c:	e7f0      	b.n	8006360 <_vfiprintf_r+0x1b8>
 800637e:	ab03      	add	r3, sp, #12
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	462a      	mov	r2, r5
 8006384:	4b12      	ldr	r3, [pc, #72]	@ (80063d0 <_vfiprintf_r+0x228>)
 8006386:	a904      	add	r1, sp, #16
 8006388:	4630      	mov	r0, r6
 800638a:	f3af 8000 	nop.w
 800638e:	4607      	mov	r7, r0
 8006390:	1c78      	adds	r0, r7, #1
 8006392:	d1d6      	bne.n	8006342 <_vfiprintf_r+0x19a>
 8006394:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006396:	07d9      	lsls	r1, r3, #31
 8006398:	d405      	bmi.n	80063a6 <_vfiprintf_r+0x1fe>
 800639a:	89ab      	ldrh	r3, [r5, #12]
 800639c:	059a      	lsls	r2, r3, #22
 800639e:	d402      	bmi.n	80063a6 <_vfiprintf_r+0x1fe>
 80063a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063a2:	f7ff fe8b 	bl	80060bc <__retarget_lock_release_recursive>
 80063a6:	89ab      	ldrh	r3, [r5, #12]
 80063a8:	065b      	lsls	r3, r3, #25
 80063aa:	f53f af1f 	bmi.w	80061ec <_vfiprintf_r+0x44>
 80063ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063b0:	e71e      	b.n	80061f0 <_vfiprintf_r+0x48>
 80063b2:	ab03      	add	r3, sp, #12
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	462a      	mov	r2, r5
 80063b8:	4b05      	ldr	r3, [pc, #20]	@ (80063d0 <_vfiprintf_r+0x228>)
 80063ba:	a904      	add	r1, sp, #16
 80063bc:	4630      	mov	r0, r6
 80063be:	f000 f879 	bl	80064b4 <_printf_i>
 80063c2:	e7e4      	b.n	800638e <_vfiprintf_r+0x1e6>
 80063c4:	08012118 	.word	0x08012118
 80063c8:	08012122 	.word	0x08012122
 80063cc:	00000000 	.word	0x00000000
 80063d0:	08006183 	.word	0x08006183
 80063d4:	0801211e 	.word	0x0801211e

080063d8 <_printf_common>:
 80063d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063dc:	4616      	mov	r6, r2
 80063de:	4698      	mov	r8, r3
 80063e0:	688a      	ldr	r2, [r1, #8]
 80063e2:	690b      	ldr	r3, [r1, #16]
 80063e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063e8:	4293      	cmp	r3, r2
 80063ea:	bfb8      	it	lt
 80063ec:	4613      	movlt	r3, r2
 80063ee:	6033      	str	r3, [r6, #0]
 80063f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063f4:	4607      	mov	r7, r0
 80063f6:	460c      	mov	r4, r1
 80063f8:	b10a      	cbz	r2, 80063fe <_printf_common+0x26>
 80063fa:	3301      	adds	r3, #1
 80063fc:	6033      	str	r3, [r6, #0]
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	0699      	lsls	r1, r3, #26
 8006402:	bf42      	ittt	mi
 8006404:	6833      	ldrmi	r3, [r6, #0]
 8006406:	3302      	addmi	r3, #2
 8006408:	6033      	strmi	r3, [r6, #0]
 800640a:	6825      	ldr	r5, [r4, #0]
 800640c:	f015 0506 	ands.w	r5, r5, #6
 8006410:	d106      	bne.n	8006420 <_printf_common+0x48>
 8006412:	f104 0a19 	add.w	sl, r4, #25
 8006416:	68e3      	ldr	r3, [r4, #12]
 8006418:	6832      	ldr	r2, [r6, #0]
 800641a:	1a9b      	subs	r3, r3, r2
 800641c:	42ab      	cmp	r3, r5
 800641e:	dc26      	bgt.n	800646e <_printf_common+0x96>
 8006420:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006424:	6822      	ldr	r2, [r4, #0]
 8006426:	3b00      	subs	r3, #0
 8006428:	bf18      	it	ne
 800642a:	2301      	movne	r3, #1
 800642c:	0692      	lsls	r2, r2, #26
 800642e:	d42b      	bmi.n	8006488 <_printf_common+0xb0>
 8006430:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006434:	4641      	mov	r1, r8
 8006436:	4638      	mov	r0, r7
 8006438:	47c8      	blx	r9
 800643a:	3001      	adds	r0, #1
 800643c:	d01e      	beq.n	800647c <_printf_common+0xa4>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	6922      	ldr	r2, [r4, #16]
 8006442:	f003 0306 	and.w	r3, r3, #6
 8006446:	2b04      	cmp	r3, #4
 8006448:	bf02      	ittt	eq
 800644a:	68e5      	ldreq	r5, [r4, #12]
 800644c:	6833      	ldreq	r3, [r6, #0]
 800644e:	1aed      	subeq	r5, r5, r3
 8006450:	68a3      	ldr	r3, [r4, #8]
 8006452:	bf0c      	ite	eq
 8006454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006458:	2500      	movne	r5, #0
 800645a:	4293      	cmp	r3, r2
 800645c:	bfc4      	itt	gt
 800645e:	1a9b      	subgt	r3, r3, r2
 8006460:	18ed      	addgt	r5, r5, r3
 8006462:	2600      	movs	r6, #0
 8006464:	341a      	adds	r4, #26
 8006466:	42b5      	cmp	r5, r6
 8006468:	d11a      	bne.n	80064a0 <_printf_common+0xc8>
 800646a:	2000      	movs	r0, #0
 800646c:	e008      	b.n	8006480 <_printf_common+0xa8>
 800646e:	2301      	movs	r3, #1
 8006470:	4652      	mov	r2, sl
 8006472:	4641      	mov	r1, r8
 8006474:	4638      	mov	r0, r7
 8006476:	47c8      	blx	r9
 8006478:	3001      	adds	r0, #1
 800647a:	d103      	bne.n	8006484 <_printf_common+0xac>
 800647c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006484:	3501      	adds	r5, #1
 8006486:	e7c6      	b.n	8006416 <_printf_common+0x3e>
 8006488:	18e1      	adds	r1, r4, r3
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	2030      	movs	r0, #48	@ 0x30
 800648e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006492:	4422      	add	r2, r4
 8006494:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006498:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800649c:	3302      	adds	r3, #2
 800649e:	e7c7      	b.n	8006430 <_printf_common+0x58>
 80064a0:	2301      	movs	r3, #1
 80064a2:	4622      	mov	r2, r4
 80064a4:	4641      	mov	r1, r8
 80064a6:	4638      	mov	r0, r7
 80064a8:	47c8      	blx	r9
 80064aa:	3001      	adds	r0, #1
 80064ac:	d0e6      	beq.n	800647c <_printf_common+0xa4>
 80064ae:	3601      	adds	r6, #1
 80064b0:	e7d9      	b.n	8006466 <_printf_common+0x8e>
	...

080064b4 <_printf_i>:
 80064b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064b8:	7e0f      	ldrb	r7, [r1, #24]
 80064ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064bc:	2f78      	cmp	r7, #120	@ 0x78
 80064be:	4691      	mov	r9, r2
 80064c0:	4680      	mov	r8, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	469a      	mov	sl, r3
 80064c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064ca:	d807      	bhi.n	80064dc <_printf_i+0x28>
 80064cc:	2f62      	cmp	r7, #98	@ 0x62
 80064ce:	d80a      	bhi.n	80064e6 <_printf_i+0x32>
 80064d0:	2f00      	cmp	r7, #0
 80064d2:	f000 80d2 	beq.w	800667a <_printf_i+0x1c6>
 80064d6:	2f58      	cmp	r7, #88	@ 0x58
 80064d8:	f000 80b9 	beq.w	800664e <_printf_i+0x19a>
 80064dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064e4:	e03a      	b.n	800655c <_printf_i+0xa8>
 80064e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064ea:	2b15      	cmp	r3, #21
 80064ec:	d8f6      	bhi.n	80064dc <_printf_i+0x28>
 80064ee:	a101      	add	r1, pc, #4	@ (adr r1, 80064f4 <_printf_i+0x40>)
 80064f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064f4:	0800654d 	.word	0x0800654d
 80064f8:	08006561 	.word	0x08006561
 80064fc:	080064dd 	.word	0x080064dd
 8006500:	080064dd 	.word	0x080064dd
 8006504:	080064dd 	.word	0x080064dd
 8006508:	080064dd 	.word	0x080064dd
 800650c:	08006561 	.word	0x08006561
 8006510:	080064dd 	.word	0x080064dd
 8006514:	080064dd 	.word	0x080064dd
 8006518:	080064dd 	.word	0x080064dd
 800651c:	080064dd 	.word	0x080064dd
 8006520:	08006661 	.word	0x08006661
 8006524:	0800658b 	.word	0x0800658b
 8006528:	0800661b 	.word	0x0800661b
 800652c:	080064dd 	.word	0x080064dd
 8006530:	080064dd 	.word	0x080064dd
 8006534:	08006683 	.word	0x08006683
 8006538:	080064dd 	.word	0x080064dd
 800653c:	0800658b 	.word	0x0800658b
 8006540:	080064dd 	.word	0x080064dd
 8006544:	080064dd 	.word	0x080064dd
 8006548:	08006623 	.word	0x08006623
 800654c:	6833      	ldr	r3, [r6, #0]
 800654e:	1d1a      	adds	r2, r3, #4
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6032      	str	r2, [r6, #0]
 8006554:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006558:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800655c:	2301      	movs	r3, #1
 800655e:	e09d      	b.n	800669c <_printf_i+0x1e8>
 8006560:	6833      	ldr	r3, [r6, #0]
 8006562:	6820      	ldr	r0, [r4, #0]
 8006564:	1d19      	adds	r1, r3, #4
 8006566:	6031      	str	r1, [r6, #0]
 8006568:	0606      	lsls	r6, r0, #24
 800656a:	d501      	bpl.n	8006570 <_printf_i+0xbc>
 800656c:	681d      	ldr	r5, [r3, #0]
 800656e:	e003      	b.n	8006578 <_printf_i+0xc4>
 8006570:	0645      	lsls	r5, r0, #25
 8006572:	d5fb      	bpl.n	800656c <_printf_i+0xb8>
 8006574:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006578:	2d00      	cmp	r5, #0
 800657a:	da03      	bge.n	8006584 <_printf_i+0xd0>
 800657c:	232d      	movs	r3, #45	@ 0x2d
 800657e:	426d      	negs	r5, r5
 8006580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006584:	4859      	ldr	r0, [pc, #356]	@ (80066ec <_printf_i+0x238>)
 8006586:	230a      	movs	r3, #10
 8006588:	e011      	b.n	80065ae <_printf_i+0xfa>
 800658a:	6821      	ldr	r1, [r4, #0]
 800658c:	6833      	ldr	r3, [r6, #0]
 800658e:	0608      	lsls	r0, r1, #24
 8006590:	f853 5b04 	ldr.w	r5, [r3], #4
 8006594:	d402      	bmi.n	800659c <_printf_i+0xe8>
 8006596:	0649      	lsls	r1, r1, #25
 8006598:	bf48      	it	mi
 800659a:	b2ad      	uxthmi	r5, r5
 800659c:	2f6f      	cmp	r7, #111	@ 0x6f
 800659e:	4853      	ldr	r0, [pc, #332]	@ (80066ec <_printf_i+0x238>)
 80065a0:	6033      	str	r3, [r6, #0]
 80065a2:	bf14      	ite	ne
 80065a4:	230a      	movne	r3, #10
 80065a6:	2308      	moveq	r3, #8
 80065a8:	2100      	movs	r1, #0
 80065aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065ae:	6866      	ldr	r6, [r4, #4]
 80065b0:	60a6      	str	r6, [r4, #8]
 80065b2:	2e00      	cmp	r6, #0
 80065b4:	bfa2      	ittt	ge
 80065b6:	6821      	ldrge	r1, [r4, #0]
 80065b8:	f021 0104 	bicge.w	r1, r1, #4
 80065bc:	6021      	strge	r1, [r4, #0]
 80065be:	b90d      	cbnz	r5, 80065c4 <_printf_i+0x110>
 80065c0:	2e00      	cmp	r6, #0
 80065c2:	d04b      	beq.n	800665c <_printf_i+0x1a8>
 80065c4:	4616      	mov	r6, r2
 80065c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80065ca:	fb03 5711 	mls	r7, r3, r1, r5
 80065ce:	5dc7      	ldrb	r7, [r0, r7]
 80065d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065d4:	462f      	mov	r7, r5
 80065d6:	42bb      	cmp	r3, r7
 80065d8:	460d      	mov	r5, r1
 80065da:	d9f4      	bls.n	80065c6 <_printf_i+0x112>
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d10b      	bne.n	80065f8 <_printf_i+0x144>
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	07df      	lsls	r7, r3, #31
 80065e4:	d508      	bpl.n	80065f8 <_printf_i+0x144>
 80065e6:	6923      	ldr	r3, [r4, #16]
 80065e8:	6861      	ldr	r1, [r4, #4]
 80065ea:	4299      	cmp	r1, r3
 80065ec:	bfde      	ittt	le
 80065ee:	2330      	movle	r3, #48	@ 0x30
 80065f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065f4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80065f8:	1b92      	subs	r2, r2, r6
 80065fa:	6122      	str	r2, [r4, #16]
 80065fc:	f8cd a000 	str.w	sl, [sp]
 8006600:	464b      	mov	r3, r9
 8006602:	aa03      	add	r2, sp, #12
 8006604:	4621      	mov	r1, r4
 8006606:	4640      	mov	r0, r8
 8006608:	f7ff fee6 	bl	80063d8 <_printf_common>
 800660c:	3001      	adds	r0, #1
 800660e:	d14a      	bne.n	80066a6 <_printf_i+0x1f2>
 8006610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006614:	b004      	add	sp, #16
 8006616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	f043 0320 	orr.w	r3, r3, #32
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	4833      	ldr	r0, [pc, #204]	@ (80066f0 <_printf_i+0x23c>)
 8006624:	2778      	movs	r7, #120	@ 0x78
 8006626:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	6831      	ldr	r1, [r6, #0]
 800662e:	061f      	lsls	r7, r3, #24
 8006630:	f851 5b04 	ldr.w	r5, [r1], #4
 8006634:	d402      	bmi.n	800663c <_printf_i+0x188>
 8006636:	065f      	lsls	r7, r3, #25
 8006638:	bf48      	it	mi
 800663a:	b2ad      	uxthmi	r5, r5
 800663c:	6031      	str	r1, [r6, #0]
 800663e:	07d9      	lsls	r1, r3, #31
 8006640:	bf44      	itt	mi
 8006642:	f043 0320 	orrmi.w	r3, r3, #32
 8006646:	6023      	strmi	r3, [r4, #0]
 8006648:	b11d      	cbz	r5, 8006652 <_printf_i+0x19e>
 800664a:	2310      	movs	r3, #16
 800664c:	e7ac      	b.n	80065a8 <_printf_i+0xf4>
 800664e:	4827      	ldr	r0, [pc, #156]	@ (80066ec <_printf_i+0x238>)
 8006650:	e7e9      	b.n	8006626 <_printf_i+0x172>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	f023 0320 	bic.w	r3, r3, #32
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	e7f6      	b.n	800664a <_printf_i+0x196>
 800665c:	4616      	mov	r6, r2
 800665e:	e7bd      	b.n	80065dc <_printf_i+0x128>
 8006660:	6833      	ldr	r3, [r6, #0]
 8006662:	6825      	ldr	r5, [r4, #0]
 8006664:	6961      	ldr	r1, [r4, #20]
 8006666:	1d18      	adds	r0, r3, #4
 8006668:	6030      	str	r0, [r6, #0]
 800666a:	062e      	lsls	r6, r5, #24
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	d501      	bpl.n	8006674 <_printf_i+0x1c0>
 8006670:	6019      	str	r1, [r3, #0]
 8006672:	e002      	b.n	800667a <_printf_i+0x1c6>
 8006674:	0668      	lsls	r0, r5, #25
 8006676:	d5fb      	bpl.n	8006670 <_printf_i+0x1bc>
 8006678:	8019      	strh	r1, [r3, #0]
 800667a:	2300      	movs	r3, #0
 800667c:	6123      	str	r3, [r4, #16]
 800667e:	4616      	mov	r6, r2
 8006680:	e7bc      	b.n	80065fc <_printf_i+0x148>
 8006682:	6833      	ldr	r3, [r6, #0]
 8006684:	1d1a      	adds	r2, r3, #4
 8006686:	6032      	str	r2, [r6, #0]
 8006688:	681e      	ldr	r6, [r3, #0]
 800668a:	6862      	ldr	r2, [r4, #4]
 800668c:	2100      	movs	r1, #0
 800668e:	4630      	mov	r0, r6
 8006690:	f7f9 fdb6 	bl	8000200 <memchr>
 8006694:	b108      	cbz	r0, 800669a <_printf_i+0x1e6>
 8006696:	1b80      	subs	r0, r0, r6
 8006698:	6060      	str	r0, [r4, #4]
 800669a:	6863      	ldr	r3, [r4, #4]
 800669c:	6123      	str	r3, [r4, #16]
 800669e:	2300      	movs	r3, #0
 80066a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066a4:	e7aa      	b.n	80065fc <_printf_i+0x148>
 80066a6:	6923      	ldr	r3, [r4, #16]
 80066a8:	4632      	mov	r2, r6
 80066aa:	4649      	mov	r1, r9
 80066ac:	4640      	mov	r0, r8
 80066ae:	47d0      	blx	sl
 80066b0:	3001      	adds	r0, #1
 80066b2:	d0ad      	beq.n	8006610 <_printf_i+0x15c>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	079b      	lsls	r3, r3, #30
 80066b8:	d413      	bmi.n	80066e2 <_printf_i+0x22e>
 80066ba:	68e0      	ldr	r0, [r4, #12]
 80066bc:	9b03      	ldr	r3, [sp, #12]
 80066be:	4298      	cmp	r0, r3
 80066c0:	bfb8      	it	lt
 80066c2:	4618      	movlt	r0, r3
 80066c4:	e7a6      	b.n	8006614 <_printf_i+0x160>
 80066c6:	2301      	movs	r3, #1
 80066c8:	4632      	mov	r2, r6
 80066ca:	4649      	mov	r1, r9
 80066cc:	4640      	mov	r0, r8
 80066ce:	47d0      	blx	sl
 80066d0:	3001      	adds	r0, #1
 80066d2:	d09d      	beq.n	8006610 <_printf_i+0x15c>
 80066d4:	3501      	adds	r5, #1
 80066d6:	68e3      	ldr	r3, [r4, #12]
 80066d8:	9903      	ldr	r1, [sp, #12]
 80066da:	1a5b      	subs	r3, r3, r1
 80066dc:	42ab      	cmp	r3, r5
 80066de:	dcf2      	bgt.n	80066c6 <_printf_i+0x212>
 80066e0:	e7eb      	b.n	80066ba <_printf_i+0x206>
 80066e2:	2500      	movs	r5, #0
 80066e4:	f104 0619 	add.w	r6, r4, #25
 80066e8:	e7f5      	b.n	80066d6 <_printf_i+0x222>
 80066ea:	bf00      	nop
 80066ec:	08012129 	.word	0x08012129
 80066f0:	0801213a 	.word	0x0801213a

080066f4 <__sflush_r>:
 80066f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066fc:	0716      	lsls	r6, r2, #28
 80066fe:	4605      	mov	r5, r0
 8006700:	460c      	mov	r4, r1
 8006702:	d454      	bmi.n	80067ae <__sflush_r+0xba>
 8006704:	684b      	ldr	r3, [r1, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	dc02      	bgt.n	8006710 <__sflush_r+0x1c>
 800670a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	dd48      	ble.n	80067a2 <__sflush_r+0xae>
 8006710:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006712:	2e00      	cmp	r6, #0
 8006714:	d045      	beq.n	80067a2 <__sflush_r+0xae>
 8006716:	2300      	movs	r3, #0
 8006718:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800671c:	682f      	ldr	r7, [r5, #0]
 800671e:	6a21      	ldr	r1, [r4, #32]
 8006720:	602b      	str	r3, [r5, #0]
 8006722:	d030      	beq.n	8006786 <__sflush_r+0x92>
 8006724:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	0759      	lsls	r1, r3, #29
 800672a:	d505      	bpl.n	8006738 <__sflush_r+0x44>
 800672c:	6863      	ldr	r3, [r4, #4]
 800672e:	1ad2      	subs	r2, r2, r3
 8006730:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006732:	b10b      	cbz	r3, 8006738 <__sflush_r+0x44>
 8006734:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006736:	1ad2      	subs	r2, r2, r3
 8006738:	2300      	movs	r3, #0
 800673a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800673c:	6a21      	ldr	r1, [r4, #32]
 800673e:	4628      	mov	r0, r5
 8006740:	47b0      	blx	r6
 8006742:	1c43      	adds	r3, r0, #1
 8006744:	89a3      	ldrh	r3, [r4, #12]
 8006746:	d106      	bne.n	8006756 <__sflush_r+0x62>
 8006748:	6829      	ldr	r1, [r5, #0]
 800674a:	291d      	cmp	r1, #29
 800674c:	d82b      	bhi.n	80067a6 <__sflush_r+0xb2>
 800674e:	4a2a      	ldr	r2, [pc, #168]	@ (80067f8 <__sflush_r+0x104>)
 8006750:	410a      	asrs	r2, r1
 8006752:	07d6      	lsls	r6, r2, #31
 8006754:	d427      	bmi.n	80067a6 <__sflush_r+0xb2>
 8006756:	2200      	movs	r2, #0
 8006758:	6062      	str	r2, [r4, #4]
 800675a:	04d9      	lsls	r1, r3, #19
 800675c:	6922      	ldr	r2, [r4, #16]
 800675e:	6022      	str	r2, [r4, #0]
 8006760:	d504      	bpl.n	800676c <__sflush_r+0x78>
 8006762:	1c42      	adds	r2, r0, #1
 8006764:	d101      	bne.n	800676a <__sflush_r+0x76>
 8006766:	682b      	ldr	r3, [r5, #0]
 8006768:	b903      	cbnz	r3, 800676c <__sflush_r+0x78>
 800676a:	6560      	str	r0, [r4, #84]	@ 0x54
 800676c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800676e:	602f      	str	r7, [r5, #0]
 8006770:	b1b9      	cbz	r1, 80067a2 <__sflush_r+0xae>
 8006772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006776:	4299      	cmp	r1, r3
 8006778:	d002      	beq.n	8006780 <__sflush_r+0x8c>
 800677a:	4628      	mov	r0, r5
 800677c:	f7ff fca0 	bl	80060c0 <_free_r>
 8006780:	2300      	movs	r3, #0
 8006782:	6363      	str	r3, [r4, #52]	@ 0x34
 8006784:	e00d      	b.n	80067a2 <__sflush_r+0xae>
 8006786:	2301      	movs	r3, #1
 8006788:	4628      	mov	r0, r5
 800678a:	47b0      	blx	r6
 800678c:	4602      	mov	r2, r0
 800678e:	1c50      	adds	r0, r2, #1
 8006790:	d1c9      	bne.n	8006726 <__sflush_r+0x32>
 8006792:	682b      	ldr	r3, [r5, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0c6      	beq.n	8006726 <__sflush_r+0x32>
 8006798:	2b1d      	cmp	r3, #29
 800679a:	d001      	beq.n	80067a0 <__sflush_r+0xac>
 800679c:	2b16      	cmp	r3, #22
 800679e:	d11e      	bne.n	80067de <__sflush_r+0xea>
 80067a0:	602f      	str	r7, [r5, #0]
 80067a2:	2000      	movs	r0, #0
 80067a4:	e022      	b.n	80067ec <__sflush_r+0xf8>
 80067a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067aa:	b21b      	sxth	r3, r3
 80067ac:	e01b      	b.n	80067e6 <__sflush_r+0xf2>
 80067ae:	690f      	ldr	r7, [r1, #16]
 80067b0:	2f00      	cmp	r7, #0
 80067b2:	d0f6      	beq.n	80067a2 <__sflush_r+0xae>
 80067b4:	0793      	lsls	r3, r2, #30
 80067b6:	680e      	ldr	r6, [r1, #0]
 80067b8:	bf08      	it	eq
 80067ba:	694b      	ldreq	r3, [r1, #20]
 80067bc:	600f      	str	r7, [r1, #0]
 80067be:	bf18      	it	ne
 80067c0:	2300      	movne	r3, #0
 80067c2:	eba6 0807 	sub.w	r8, r6, r7
 80067c6:	608b      	str	r3, [r1, #8]
 80067c8:	f1b8 0f00 	cmp.w	r8, #0
 80067cc:	dde9      	ble.n	80067a2 <__sflush_r+0xae>
 80067ce:	6a21      	ldr	r1, [r4, #32]
 80067d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80067d2:	4643      	mov	r3, r8
 80067d4:	463a      	mov	r2, r7
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b0      	blx	r6
 80067da:	2800      	cmp	r0, #0
 80067dc:	dc08      	bgt.n	80067f0 <__sflush_r+0xfc>
 80067de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067e6:	81a3      	strh	r3, [r4, #12]
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f0:	4407      	add	r7, r0
 80067f2:	eba8 0800 	sub.w	r8, r8, r0
 80067f6:	e7e7      	b.n	80067c8 <__sflush_r+0xd4>
 80067f8:	dfbffffe 	.word	0xdfbffffe

080067fc <_fflush_r>:
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	690b      	ldr	r3, [r1, #16]
 8006800:	4605      	mov	r5, r0
 8006802:	460c      	mov	r4, r1
 8006804:	b913      	cbnz	r3, 800680c <_fflush_r+0x10>
 8006806:	2500      	movs	r5, #0
 8006808:	4628      	mov	r0, r5
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	b118      	cbz	r0, 8006816 <_fflush_r+0x1a>
 800680e:	6a03      	ldr	r3, [r0, #32]
 8006810:	b90b      	cbnz	r3, 8006816 <_fflush_r+0x1a>
 8006812:	f7ff fb69 	bl	8005ee8 <__sinit>
 8006816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0f3      	beq.n	8006806 <_fflush_r+0xa>
 800681e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006820:	07d0      	lsls	r0, r2, #31
 8006822:	d404      	bmi.n	800682e <_fflush_r+0x32>
 8006824:	0599      	lsls	r1, r3, #22
 8006826:	d402      	bmi.n	800682e <_fflush_r+0x32>
 8006828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800682a:	f7ff fc46 	bl	80060ba <__retarget_lock_acquire_recursive>
 800682e:	4628      	mov	r0, r5
 8006830:	4621      	mov	r1, r4
 8006832:	f7ff ff5f 	bl	80066f4 <__sflush_r>
 8006836:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006838:	07da      	lsls	r2, r3, #31
 800683a:	4605      	mov	r5, r0
 800683c:	d4e4      	bmi.n	8006808 <_fflush_r+0xc>
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	059b      	lsls	r3, r3, #22
 8006842:	d4e1      	bmi.n	8006808 <_fflush_r+0xc>
 8006844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006846:	f7ff fc39 	bl	80060bc <__retarget_lock_release_recursive>
 800684a:	e7dd      	b.n	8006808 <_fflush_r+0xc>

0800684c <__sread>:
 800684c:	b510      	push	{r4, lr}
 800684e:	460c      	mov	r4, r1
 8006850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006854:	f000 f978 	bl	8006b48 <_read_r>
 8006858:	2800      	cmp	r0, #0
 800685a:	bfab      	itete	ge
 800685c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800685e:	89a3      	ldrhlt	r3, [r4, #12]
 8006860:	181b      	addge	r3, r3, r0
 8006862:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006866:	bfac      	ite	ge
 8006868:	6563      	strge	r3, [r4, #84]	@ 0x54
 800686a:	81a3      	strhlt	r3, [r4, #12]
 800686c:	bd10      	pop	{r4, pc}

0800686e <__swrite>:
 800686e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006872:	461f      	mov	r7, r3
 8006874:	898b      	ldrh	r3, [r1, #12]
 8006876:	05db      	lsls	r3, r3, #23
 8006878:	4605      	mov	r5, r0
 800687a:	460c      	mov	r4, r1
 800687c:	4616      	mov	r6, r2
 800687e:	d505      	bpl.n	800688c <__swrite+0x1e>
 8006880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006884:	2302      	movs	r3, #2
 8006886:	2200      	movs	r2, #0
 8006888:	f000 f94c 	bl	8006b24 <_lseek_r>
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006892:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	4632      	mov	r2, r6
 800689a:	463b      	mov	r3, r7
 800689c:	4628      	mov	r0, r5
 800689e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068a2:	f000 b963 	b.w	8006b6c <_write_r>

080068a6 <__sseek>:
 80068a6:	b510      	push	{r4, lr}
 80068a8:	460c      	mov	r4, r1
 80068aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ae:	f000 f939 	bl	8006b24 <_lseek_r>
 80068b2:	1c43      	adds	r3, r0, #1
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	bf15      	itete	ne
 80068b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068c2:	81a3      	strheq	r3, [r4, #12]
 80068c4:	bf18      	it	ne
 80068c6:	81a3      	strhne	r3, [r4, #12]
 80068c8:	bd10      	pop	{r4, pc}

080068ca <__sclose>:
 80068ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ce:	f000 b8f7 	b.w	8006ac0 <_close_r>

080068d2 <__swbuf_r>:
 80068d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d4:	460e      	mov	r6, r1
 80068d6:	4614      	mov	r4, r2
 80068d8:	4605      	mov	r5, r0
 80068da:	b118      	cbz	r0, 80068e4 <__swbuf_r+0x12>
 80068dc:	6a03      	ldr	r3, [r0, #32]
 80068de:	b90b      	cbnz	r3, 80068e4 <__swbuf_r+0x12>
 80068e0:	f7ff fb02 	bl	8005ee8 <__sinit>
 80068e4:	69a3      	ldr	r3, [r4, #24]
 80068e6:	60a3      	str	r3, [r4, #8]
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	071a      	lsls	r2, r3, #28
 80068ec:	d501      	bpl.n	80068f2 <__swbuf_r+0x20>
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	b943      	cbnz	r3, 8006904 <__swbuf_r+0x32>
 80068f2:	4621      	mov	r1, r4
 80068f4:	4628      	mov	r0, r5
 80068f6:	f000 f82b 	bl	8006950 <__swsetup_r>
 80068fa:	b118      	cbz	r0, 8006904 <__swbuf_r+0x32>
 80068fc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006900:	4638      	mov	r0, r7
 8006902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	6922      	ldr	r2, [r4, #16]
 8006908:	1a98      	subs	r0, r3, r2
 800690a:	6963      	ldr	r3, [r4, #20]
 800690c:	b2f6      	uxtb	r6, r6
 800690e:	4283      	cmp	r3, r0
 8006910:	4637      	mov	r7, r6
 8006912:	dc05      	bgt.n	8006920 <__swbuf_r+0x4e>
 8006914:	4621      	mov	r1, r4
 8006916:	4628      	mov	r0, r5
 8006918:	f7ff ff70 	bl	80067fc <_fflush_r>
 800691c:	2800      	cmp	r0, #0
 800691e:	d1ed      	bne.n	80068fc <__swbuf_r+0x2a>
 8006920:	68a3      	ldr	r3, [r4, #8]
 8006922:	3b01      	subs	r3, #1
 8006924:	60a3      	str	r3, [r4, #8]
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	6022      	str	r2, [r4, #0]
 800692c:	701e      	strb	r6, [r3, #0]
 800692e:	6962      	ldr	r2, [r4, #20]
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	429a      	cmp	r2, r3
 8006934:	d004      	beq.n	8006940 <__swbuf_r+0x6e>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	07db      	lsls	r3, r3, #31
 800693a:	d5e1      	bpl.n	8006900 <__swbuf_r+0x2e>
 800693c:	2e0a      	cmp	r6, #10
 800693e:	d1df      	bne.n	8006900 <__swbuf_r+0x2e>
 8006940:	4621      	mov	r1, r4
 8006942:	4628      	mov	r0, r5
 8006944:	f7ff ff5a 	bl	80067fc <_fflush_r>
 8006948:	2800      	cmp	r0, #0
 800694a:	d0d9      	beq.n	8006900 <__swbuf_r+0x2e>
 800694c:	e7d6      	b.n	80068fc <__swbuf_r+0x2a>
	...

08006950 <__swsetup_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4b29      	ldr	r3, [pc, #164]	@ (80069f8 <__swsetup_r+0xa8>)
 8006954:	4605      	mov	r5, r0
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	460c      	mov	r4, r1
 800695a:	b118      	cbz	r0, 8006964 <__swsetup_r+0x14>
 800695c:	6a03      	ldr	r3, [r0, #32]
 800695e:	b90b      	cbnz	r3, 8006964 <__swsetup_r+0x14>
 8006960:	f7ff fac2 	bl	8005ee8 <__sinit>
 8006964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006968:	0719      	lsls	r1, r3, #28
 800696a:	d422      	bmi.n	80069b2 <__swsetup_r+0x62>
 800696c:	06da      	lsls	r2, r3, #27
 800696e:	d407      	bmi.n	8006980 <__swsetup_r+0x30>
 8006970:	2209      	movs	r2, #9
 8006972:	602a      	str	r2, [r5, #0]
 8006974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006978:	81a3      	strh	r3, [r4, #12]
 800697a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800697e:	e033      	b.n	80069e8 <__swsetup_r+0x98>
 8006980:	0758      	lsls	r0, r3, #29
 8006982:	d512      	bpl.n	80069aa <__swsetup_r+0x5a>
 8006984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006986:	b141      	cbz	r1, 800699a <__swsetup_r+0x4a>
 8006988:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800698c:	4299      	cmp	r1, r3
 800698e:	d002      	beq.n	8006996 <__swsetup_r+0x46>
 8006990:	4628      	mov	r0, r5
 8006992:	f7ff fb95 	bl	80060c0 <_free_r>
 8006996:	2300      	movs	r3, #0
 8006998:	6363      	str	r3, [r4, #52]	@ 0x34
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069a0:	81a3      	strh	r3, [r4, #12]
 80069a2:	2300      	movs	r3, #0
 80069a4:	6063      	str	r3, [r4, #4]
 80069a6:	6923      	ldr	r3, [r4, #16]
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	f043 0308 	orr.w	r3, r3, #8
 80069b0:	81a3      	strh	r3, [r4, #12]
 80069b2:	6923      	ldr	r3, [r4, #16]
 80069b4:	b94b      	cbnz	r3, 80069ca <__swsetup_r+0x7a>
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80069bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069c0:	d003      	beq.n	80069ca <__swsetup_r+0x7a>
 80069c2:	4621      	mov	r1, r4
 80069c4:	4628      	mov	r0, r5
 80069c6:	f000 f83f 	bl	8006a48 <__smakebuf_r>
 80069ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ce:	f013 0201 	ands.w	r2, r3, #1
 80069d2:	d00a      	beq.n	80069ea <__swsetup_r+0x9a>
 80069d4:	2200      	movs	r2, #0
 80069d6:	60a2      	str	r2, [r4, #8]
 80069d8:	6962      	ldr	r2, [r4, #20]
 80069da:	4252      	negs	r2, r2
 80069dc:	61a2      	str	r2, [r4, #24]
 80069de:	6922      	ldr	r2, [r4, #16]
 80069e0:	b942      	cbnz	r2, 80069f4 <__swsetup_r+0xa4>
 80069e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069e6:	d1c5      	bne.n	8006974 <__swsetup_r+0x24>
 80069e8:	bd38      	pop	{r3, r4, r5, pc}
 80069ea:	0799      	lsls	r1, r3, #30
 80069ec:	bf58      	it	pl
 80069ee:	6962      	ldrpl	r2, [r4, #20]
 80069f0:	60a2      	str	r2, [r4, #8]
 80069f2:	e7f4      	b.n	80069de <__swsetup_r+0x8e>
 80069f4:	2000      	movs	r0, #0
 80069f6:	e7f7      	b.n	80069e8 <__swsetup_r+0x98>
 80069f8:	2000092c 	.word	0x2000092c

080069fc <__swhatbuf_r>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	460c      	mov	r4, r1
 8006a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a04:	2900      	cmp	r1, #0
 8006a06:	b096      	sub	sp, #88	@ 0x58
 8006a08:	4615      	mov	r5, r2
 8006a0a:	461e      	mov	r6, r3
 8006a0c:	da0d      	bge.n	8006a2a <__swhatbuf_r+0x2e>
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a14:	f04f 0100 	mov.w	r1, #0
 8006a18:	bf14      	ite	ne
 8006a1a:	2340      	movne	r3, #64	@ 0x40
 8006a1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a20:	2000      	movs	r0, #0
 8006a22:	6031      	str	r1, [r6, #0]
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	b016      	add	sp, #88	@ 0x58
 8006a28:	bd70      	pop	{r4, r5, r6, pc}
 8006a2a:	466a      	mov	r2, sp
 8006a2c:	f000 f858 	bl	8006ae0 <_fstat_r>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	dbec      	blt.n	8006a0e <__swhatbuf_r+0x12>
 8006a34:	9901      	ldr	r1, [sp, #4]
 8006a36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a3e:	4259      	negs	r1, r3
 8006a40:	4159      	adcs	r1, r3
 8006a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a46:	e7eb      	b.n	8006a20 <__swhatbuf_r+0x24>

08006a48 <__smakebuf_r>:
 8006a48:	898b      	ldrh	r3, [r1, #12]
 8006a4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a4c:	079d      	lsls	r5, r3, #30
 8006a4e:	4606      	mov	r6, r0
 8006a50:	460c      	mov	r4, r1
 8006a52:	d507      	bpl.n	8006a64 <__smakebuf_r+0x1c>
 8006a54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	6123      	str	r3, [r4, #16]
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	6163      	str	r3, [r4, #20]
 8006a60:	b003      	add	sp, #12
 8006a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a64:	ab01      	add	r3, sp, #4
 8006a66:	466a      	mov	r2, sp
 8006a68:	f7ff ffc8 	bl	80069fc <__swhatbuf_r>
 8006a6c:	9f00      	ldr	r7, [sp, #0]
 8006a6e:	4605      	mov	r5, r0
 8006a70:	4639      	mov	r1, r7
 8006a72:	4630      	mov	r0, r6
 8006a74:	f7ff f920 	bl	8005cb8 <_malloc_r>
 8006a78:	b948      	cbnz	r0, 8006a8e <__smakebuf_r+0x46>
 8006a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7e:	059a      	lsls	r2, r3, #22
 8006a80:	d4ee      	bmi.n	8006a60 <__smakebuf_r+0x18>
 8006a82:	f023 0303 	bic.w	r3, r3, #3
 8006a86:	f043 0302 	orr.w	r3, r3, #2
 8006a8a:	81a3      	strh	r3, [r4, #12]
 8006a8c:	e7e2      	b.n	8006a54 <__smakebuf_r+0xc>
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	6020      	str	r0, [r4, #0]
 8006a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a96:	81a3      	strh	r3, [r4, #12]
 8006a98:	9b01      	ldr	r3, [sp, #4]
 8006a9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a9e:	b15b      	cbz	r3, 8006ab8 <__smakebuf_r+0x70>
 8006aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	f000 f82d 	bl	8006b04 <_isatty_r>
 8006aaa:	b128      	cbz	r0, 8006ab8 <__smakebuf_r+0x70>
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	f043 0301 	orr.w	r3, r3, #1
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	431d      	orrs	r5, r3
 8006abc:	81a5      	strh	r5, [r4, #12]
 8006abe:	e7cf      	b.n	8006a60 <__smakebuf_r+0x18>

08006ac0 <_close_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4d06      	ldr	r5, [pc, #24]	@ (8006adc <_close_r+0x1c>)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	602b      	str	r3, [r5, #0]
 8006acc:	f000 f994 	bl	8006df8 <_close>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_close_r+0x1a>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_close_r+0x1a>
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	20000f34 	.word	0x20000f34

08006ae0 <_fstat_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4d07      	ldr	r5, [pc, #28]	@ (8006b00 <_fstat_r+0x20>)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	4608      	mov	r0, r1
 8006aea:	4611      	mov	r1, r2
 8006aec:	602b      	str	r3, [r5, #0]
 8006aee:	f000 f98b 	bl	8006e08 <_fstat>
 8006af2:	1c43      	adds	r3, r0, #1
 8006af4:	d102      	bne.n	8006afc <_fstat_r+0x1c>
 8006af6:	682b      	ldr	r3, [r5, #0]
 8006af8:	b103      	cbz	r3, 8006afc <_fstat_r+0x1c>
 8006afa:	6023      	str	r3, [r4, #0]
 8006afc:	bd38      	pop	{r3, r4, r5, pc}
 8006afe:	bf00      	nop
 8006b00:	20000f34 	.word	0x20000f34

08006b04 <_isatty_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4d06      	ldr	r5, [pc, #24]	@ (8006b20 <_isatty_r+0x1c>)
 8006b08:	2300      	movs	r3, #0
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	602b      	str	r3, [r5, #0]
 8006b10:	f000 f982 	bl	8006e18 <_isatty>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d102      	bne.n	8006b1e <_isatty_r+0x1a>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	b103      	cbz	r3, 8006b1e <_isatty_r+0x1a>
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	20000f34 	.word	0x20000f34

08006b24 <_lseek_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d07      	ldr	r5, [pc, #28]	@ (8006b44 <_lseek_r+0x20>)
 8006b28:	4604      	mov	r4, r0
 8006b2a:	4608      	mov	r0, r1
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	2200      	movs	r2, #0
 8006b30:	602a      	str	r2, [r5, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	f000 f978 	bl	8006e28 <_lseek>
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d102      	bne.n	8006b42 <_lseek_r+0x1e>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	b103      	cbz	r3, 8006b42 <_lseek_r+0x1e>
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	20000f34 	.word	0x20000f34

08006b48 <_read_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4d07      	ldr	r5, [pc, #28]	@ (8006b68 <_read_r+0x20>)
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	4608      	mov	r0, r1
 8006b50:	4611      	mov	r1, r2
 8006b52:	2200      	movs	r2, #0
 8006b54:	602a      	str	r2, [r5, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	f000 f96e 	bl	8006e38 <_read>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	d102      	bne.n	8006b66 <_read_r+0x1e>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	b103      	cbz	r3, 8006b66 <_read_r+0x1e>
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	bd38      	pop	{r3, r4, r5, pc}
 8006b68:	20000f34 	.word	0x20000f34

08006b6c <_write_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	4d07      	ldr	r5, [pc, #28]	@ (8006b8c <_write_r+0x20>)
 8006b70:	4604      	mov	r4, r0
 8006b72:	4608      	mov	r0, r1
 8006b74:	4611      	mov	r1, r2
 8006b76:	2200      	movs	r2, #0
 8006b78:	602a      	str	r2, [r5, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f000 f964 	bl	8006e48 <_write>
 8006b80:	1c43      	adds	r3, r0, #1
 8006b82:	d102      	bne.n	8006b8a <_write_r+0x1e>
 8006b84:	682b      	ldr	r3, [r5, #0]
 8006b86:	b103      	cbz	r3, 8006b8a <_write_r+0x1e>
 8006b88:	6023      	str	r3, [r4, #0]
 8006b8a:	bd38      	pop	{r3, r4, r5, pc}
 8006b8c:	20000f34 	.word	0x20000f34

08006b90 <expf>:
 8006b90:	b508      	push	{r3, lr}
 8006b92:	ed2d 8b02 	vpush	{d8}
 8006b96:	eef0 8a40 	vmov.f32	s17, s0
 8006b9a:	f000 f839 	bl	8006c10 <__ieee754_expf>
 8006b9e:	eeb0 8a40 	vmov.f32	s16, s0
 8006ba2:	eeb0 0a68 	vmov.f32	s0, s17
 8006ba6:	f000 f829 	bl	8006bfc <finitef>
 8006baa:	b160      	cbz	r0, 8006bc6 <expf+0x36>
 8006bac:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8006bec <expf+0x5c>
 8006bb0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb8:	dd0a      	ble.n	8006bd0 <expf+0x40>
 8006bba:	f7ff fa53 	bl	8006064 <__errno>
 8006bbe:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8006bf0 <expf+0x60>
 8006bc2:	2322      	movs	r3, #34	@ 0x22
 8006bc4:	6003      	str	r3, [r0, #0]
 8006bc6:	eeb0 0a48 	vmov.f32	s0, s16
 8006bca:	ecbd 8b02 	vpop	{d8}
 8006bce:	bd08      	pop	{r3, pc}
 8006bd0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8006bf4 <expf+0x64>
 8006bd4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bdc:	d5f3      	bpl.n	8006bc6 <expf+0x36>
 8006bde:	f7ff fa41 	bl	8006064 <__errno>
 8006be2:	2322      	movs	r3, #34	@ 0x22
 8006be4:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8006bf8 <expf+0x68>
 8006be8:	6003      	str	r3, [r0, #0]
 8006bea:	e7ec      	b.n	8006bc6 <expf+0x36>
 8006bec:	42b17217 	.word	0x42b17217
 8006bf0:	7f800000 	.word	0x7f800000
 8006bf4:	c2cff1b5 	.word	0xc2cff1b5
 8006bf8:	00000000 	.word	0x00000000

08006bfc <finitef>:
 8006bfc:	ee10 3a10 	vmov	r3, s0
 8006c00:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8006c04:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8006c08:	bfac      	ite	ge
 8006c0a:	2000      	movge	r0, #0
 8006c0c:	2001      	movlt	r0, #1
 8006c0e:	4770      	bx	lr

08006c10 <__ieee754_expf>:
 8006c10:	ee10 2a10 	vmov	r2, s0
 8006c14:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8006c18:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006c1c:	d902      	bls.n	8006c24 <__ieee754_expf+0x14>
 8006c1e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006c22:	4770      	bx	lr
 8006c24:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8006c28:	d106      	bne.n	8006c38 <__ieee754_expf+0x28>
 8006c2a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8006d64 <__ieee754_expf+0x154>
 8006c2e:	2900      	cmp	r1, #0
 8006c30:	bf18      	it	ne
 8006c32:	eeb0 0a67 	vmovne.f32	s0, s15
 8006c36:	4770      	bx	lr
 8006c38:	484b      	ldr	r0, [pc, #300]	@ (8006d68 <__ieee754_expf+0x158>)
 8006c3a:	4282      	cmp	r2, r0
 8006c3c:	dd02      	ble.n	8006c44 <__ieee754_expf+0x34>
 8006c3e:	2000      	movs	r0, #0
 8006c40:	f000 b8d4 	b.w	8006dec <__math_oflowf>
 8006c44:	2a00      	cmp	r2, #0
 8006c46:	da05      	bge.n	8006c54 <__ieee754_expf+0x44>
 8006c48:	4a48      	ldr	r2, [pc, #288]	@ (8006d6c <__ieee754_expf+0x15c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d902      	bls.n	8006c54 <__ieee754_expf+0x44>
 8006c4e:	2000      	movs	r0, #0
 8006c50:	f000 b8c6 	b.w	8006de0 <__math_uflowf>
 8006c54:	4a46      	ldr	r2, [pc, #280]	@ (8006d70 <__ieee754_expf+0x160>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006c5c:	d952      	bls.n	8006d04 <__ieee754_expf+0xf4>
 8006c5e:	4a45      	ldr	r2, [pc, #276]	@ (8006d74 <__ieee754_expf+0x164>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8006c66:	d834      	bhi.n	8006cd2 <__ieee754_expf+0xc2>
 8006c68:	4b43      	ldr	r3, [pc, #268]	@ (8006d78 <__ieee754_expf+0x168>)
 8006c6a:	4413      	add	r3, r2
 8006c6c:	ed93 7a00 	vldr	s14, [r3]
 8006c70:	4b42      	ldr	r3, [pc, #264]	@ (8006d7c <__ieee754_expf+0x16c>)
 8006c72:	4413      	add	r3, r2
 8006c74:	ee30 7a47 	vsub.f32	s14, s0, s14
 8006c78:	f1c1 0201 	rsb	r2, r1, #1
 8006c7c:	edd3 7a00 	vldr	s15, [r3]
 8006c80:	1a52      	subs	r2, r2, r1
 8006c82:	ee37 0a67 	vsub.f32	s0, s14, s15
 8006c86:	ee20 6a00 	vmul.f32	s12, s0, s0
 8006c8a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8006d80 <__ieee754_expf+0x170>
 8006c8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006d84 <__ieee754_expf+0x174>
 8006c92:	eee6 6a05 	vfma.f32	s13, s12, s10
 8006c96:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8006d88 <__ieee754_expf+0x178>
 8006c9a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8006c9e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006d8c <__ieee754_expf+0x17c>
 8006ca2:	eee5 6a06 	vfma.f32	s13, s10, s12
 8006ca6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8006d90 <__ieee754_expf+0x180>
 8006caa:	eea6 5a86 	vfma.f32	s10, s13, s12
 8006cae:	eef0 6a40 	vmov.f32	s13, s0
 8006cb2:	eee5 6a46 	vfms.f32	s13, s10, s12
 8006cb6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8006cba:	ee20 5a26 	vmul.f32	s10, s0, s13
 8006cbe:	bb92      	cbnz	r2, 8006d26 <__ieee754_expf+0x116>
 8006cc0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006cc4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8006cc8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006ccc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8006cd0:	4770      	bx	lr
 8006cd2:	4b30      	ldr	r3, [pc, #192]	@ (8006d94 <__ieee754_expf+0x184>)
 8006cd4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006d98 <__ieee754_expf+0x188>
 8006cd8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8006d9c <__ieee754_expf+0x18c>
 8006cdc:	4413      	add	r3, r2
 8006cde:	edd3 7a00 	vldr	s15, [r3]
 8006ce2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006ce6:	eeb0 7a40 	vmov.f32	s14, s0
 8006cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cee:	ee17 2a90 	vmov	r2, s15
 8006cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cf6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8006cfa:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8006da0 <__ieee754_expf+0x190>
 8006cfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006d02:	e7be      	b.n	8006c82 <__ieee754_expf+0x72>
 8006d04:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8006d08:	d20b      	bcs.n	8006d22 <__ieee754_expf+0x112>
 8006d0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006da4 <__ieee754_expf+0x194>
 8006d0e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8006d12:	eef4 6ae5 	vcmpe.f32	s13, s11
 8006d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d1a:	dd02      	ble.n	8006d22 <__ieee754_expf+0x112>
 8006d1c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8006d20:	4770      	bx	lr
 8006d22:	2200      	movs	r2, #0
 8006d24:	e7af      	b.n	8006c86 <__ieee754_expf+0x76>
 8006d26:	ee36 6a66 	vsub.f32	s12, s12, s13
 8006d2a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8006d2e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8006d32:	bfb8      	it	lt
 8006d34:	3264      	addlt	r2, #100	@ 0x64
 8006d36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d3e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8006d42:	ee17 3a90 	vmov	r3, s15
 8006d46:	bfab      	itete	ge
 8006d48:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8006d4c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8006d50:	ee00 3a10 	vmovge	s0, r3
 8006d54:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8006da8 <__ieee754_expf+0x198>
 8006d58:	bfbc      	itt	lt
 8006d5a:	ee00 3a10 	vmovlt	s0, r3
 8006d5e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8006d62:	4770      	bx	lr
 8006d64:	00000000 	.word	0x00000000
 8006d68:	42b17217 	.word	0x42b17217
 8006d6c:	42cff1b5 	.word	0x42cff1b5
 8006d70:	3eb17218 	.word	0x3eb17218
 8006d74:	3f851591 	.word	0x3f851591
 8006d78:	08012154 	.word	0x08012154
 8006d7c:	0801214c 	.word	0x0801214c
 8006d80:	3331bb4c 	.word	0x3331bb4c
 8006d84:	b5ddea0e 	.word	0xb5ddea0e
 8006d88:	388ab355 	.word	0x388ab355
 8006d8c:	bb360b61 	.word	0xbb360b61
 8006d90:	3e2aaaab 	.word	0x3e2aaaab
 8006d94:	0801215c 	.word	0x0801215c
 8006d98:	3fb8aa3b 	.word	0x3fb8aa3b
 8006d9c:	3f317180 	.word	0x3f317180
 8006da0:	3717f7d1 	.word	0x3717f7d1
 8006da4:	7149f2ca 	.word	0x7149f2ca
 8006da8:	0d800000 	.word	0x0d800000

08006dac <with_errnof>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	ed2d 8b02 	vpush	{d8}
 8006db2:	eeb0 8a40 	vmov.f32	s16, s0
 8006db6:	4604      	mov	r4, r0
 8006db8:	f7ff f954 	bl	8006064 <__errno>
 8006dbc:	eeb0 0a48 	vmov.f32	s0, s16
 8006dc0:	ecbd 8b02 	vpop	{d8}
 8006dc4:	6004      	str	r4, [r0, #0]
 8006dc6:	bd10      	pop	{r4, pc}

08006dc8 <xflowf>:
 8006dc8:	b130      	cbz	r0, 8006dd8 <xflowf+0x10>
 8006dca:	eef1 7a40 	vneg.f32	s15, s0
 8006dce:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006dd2:	2022      	movs	r0, #34	@ 0x22
 8006dd4:	f7ff bfea 	b.w	8006dac <with_errnof>
 8006dd8:	eef0 7a40 	vmov.f32	s15, s0
 8006ddc:	e7f7      	b.n	8006dce <xflowf+0x6>
	...

08006de0 <__math_uflowf>:
 8006de0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006de8 <__math_uflowf+0x8>
 8006de4:	f7ff bff0 	b.w	8006dc8 <xflowf>
 8006de8:	10000000 	.word	0x10000000

08006dec <__math_oflowf>:
 8006dec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006df4 <__math_oflowf+0x8>
 8006df0:	f7ff bfea 	b.w	8006dc8 <xflowf>
 8006df4:	70000000 	.word	0x70000000

08006df8 <_close>:
 8006df8:	4b02      	ldr	r3, [pc, #8]	@ (8006e04 <_close+0xc>)
 8006dfa:	2258      	movs	r2, #88	@ 0x58
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e02:	4770      	bx	lr
 8006e04:	20000f34 	.word	0x20000f34

08006e08 <_fstat>:
 8006e08:	4b02      	ldr	r3, [pc, #8]	@ (8006e14 <_fstat+0xc>)
 8006e0a:	2258      	movs	r2, #88	@ 0x58
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e12:	4770      	bx	lr
 8006e14:	20000f34 	.word	0x20000f34

08006e18 <_isatty>:
 8006e18:	4b02      	ldr	r3, [pc, #8]	@ (8006e24 <_isatty+0xc>)
 8006e1a:	2258      	movs	r2, #88	@ 0x58
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	2000      	movs	r0, #0
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20000f34 	.word	0x20000f34

08006e28 <_lseek>:
 8006e28:	4b02      	ldr	r3, [pc, #8]	@ (8006e34 <_lseek+0xc>)
 8006e2a:	2258      	movs	r2, #88	@ 0x58
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e32:	4770      	bx	lr
 8006e34:	20000f34 	.word	0x20000f34

08006e38 <_read>:
 8006e38:	4b02      	ldr	r3, [pc, #8]	@ (8006e44 <_read+0xc>)
 8006e3a:	2258      	movs	r2, #88	@ 0x58
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e42:	4770      	bx	lr
 8006e44:	20000f34 	.word	0x20000f34

08006e48 <_write>:
 8006e48:	4b02      	ldr	r3, [pc, #8]	@ (8006e54 <_write+0xc>)
 8006e4a:	2258      	movs	r2, #88	@ 0x58
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e52:	4770      	bx	lr
 8006e54:	20000f34 	.word	0x20000f34

08006e58 <_init>:
 8006e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5a:	bf00      	nop
 8006e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e5e:	bc08      	pop	{r3}
 8006e60:	469e      	mov	lr, r3
 8006e62:	4770      	bx	lr

08006e64 <_fini>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	bf00      	nop
 8006e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6a:	bc08      	pop	{r3}
 8006e6c:	469e      	mov	lr, r3
 8006e6e:	4770      	bx	lr
